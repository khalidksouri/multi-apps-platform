#!/bin/bash
set -e

WORKSPACE_DIR="/Users/khalidksouri/global-multi-apps-workspace"
LOG_DIR="$WORKSPACE_DIR/logs"
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

mkdir -p "$LOG_DIR"

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🚀 DÉMARRAGE DU MULTI-APPS-PLATFORM${NC}"
echo -e "${BLUE}===================================${NC}"
echo ""
echo "📁 Projet: $PROJECT_DIR"
echo "📁 Workspace: $WORKSPACE_DIR"
echo "📋 Logs: $LOG_DIR"
echo ""

# Fonction de logging
log() {
    echo -e "${2:-$NC}[$1] $3${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$1] $3" >> "$LOG_DIR/startup.log"
}

# Fonction pour diagnostiquer une application
diagnose_app() {
    local app_name=$1
    local app_dir="$WORKSPACE_DIR/$app_name"
    
    echo -e "${YELLOW}🔍 Diagnostic de $app_name...${NC}"
    
    if [ ! -d "$app_dir" ]; then
        echo -e "  ❌ Répertoire non trouvé: $app_dir"
        return 1
    fi
    
    cd "$app_dir"
    
    # Vérifier package.json
    if [ ! -f "package.json" ]; then
        echo -e "  ❌ package.json manquant"
        return 1
    else
        echo -e "  ✅ package.json présent"
    fi
    
    # Vérifier node_modules
    if [ ! -d "node_modules" ]; then
        echo -e "  ⚠️ node_modules manquant - installation..."
        npm install --legacy-peer-deps --no-audit --silent
        echo -e "  ✅ node_modules installé"
    else
        echo -e "  ✅ node_modules présent"
    fi
    
    # Vérifier les fichiers source
    if [ -d "src" ] && [ -f "src/index.tsx" -o -f "src/index.ts" -o -f "src/main.ts" ]; then
        echo -e "  ✅ Fichiers source présents"
    else
        echo -e "  ⚠️ Fichiers source manquants"
    fi
    
    # Vérifier les scripts npm
    if npm run start --dry-run >/dev/null 2>&1; then
        echo -e "  ✅ Script 'start' valide"
    else
        echo -e "  ❌ Script 'start' invalide"
        return 1
    fi
    
    echo -e "  ✅ Diagnostic OK pour $app_name"
    return 0
}

# Fonction pour démarrer une application
start_app() {
    local app_name=$1
    local port=$2
    local command=$3
    local app_dir="$WORKSPACE_DIR/$app_name"
    
    log "INFO" "$YELLOW" "Démarrage de $app_name sur le port $port..."
    
    # Diagnostic préalable
    if ! diagnose_app "$app_name"; then
        log "ERROR" "$RED" "Diagnostic échoué pour $app_name"
        return 1
    fi
    
    cd "$app_dir"
    
    # Arrêter tout processus existant sur le port
    local existing_pid=$(lsof -ti:$port 2>/dev/null || true)
    if [ -n "$existing_pid" ]; then
        log "WARNING" "$YELLOW" "Arrêt du processus existant sur le port $port (PID: $existing_pid)"
        kill -9 "$existing_pid" 2>/dev/null || true
        sleep 3
    fi
    
    # Démarrer l'application
    log "INFO" "$YELLOW" "Lancement de la commande: $command"
    $command > "$LOG_DIR/${app_name}.log" 2>&1 &
    local pid=$!
    echo $pid > "$LOG_DIR/${app_name}.pid"
    
    # Attendre le démarrage avec timeout
    log "INFO" "$YELLOW" "Attente du démarrage de $app_name (PID: $pid)..."
    local timeout=30
    local elapsed=0
    
    while [ $elapsed -lt $timeout ]; do
        if ! kill -0 $pid 2>/dev/null; then
            log "ERROR" "$RED" "$app_name s'est arrêté prématurément"
            echo -e "${RED}Dernières lignes du log:${NC}"
            tail -n 10 "$LOG_DIR/${app_name}.log" 2>/dev/null || echo "Aucun log disponible"
            return 1
        fi
        
        # Vérifier si le port répond
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            if curl -s --max-time 3 "http://localhost:$port" >/dev/null 2>&1; then
                log "SUCCESS" "$GREEN" "$app_name démarré avec succès! - http://localhost:$port"
                return 0
            fi
        fi
        
        sleep 2
        elapsed=$((elapsed + 2))
    done
    
    # Timeout atteint
    if kill -0 $pid 2>/dev/null; then
        log "WARNING" "$YELLOW" "$app_name processus actif mais port $port ne répond pas encore (timeout $timeout s)"
        return 0
    else
        log "ERROR" "$RED" "$app_name a échoué au démarrage (timeout)"
        return 1
    fi
}

# Vérifications préalables
log "INFO" "$BLUE" "Vérifications préalables..."

if ! command -v node &> /dev/null; then
    log "ERROR" "$RED" "Node.js n'est pas installé"
    exit 1
fi

if ! command -v npm &> /dev/null; then
    log "ERROR" "$RED" "npm n'est pas installé"
    exit 1
fi

if [ ! -d "$WORKSPACE_DIR" ]; then
    log "ERROR" "$RED" "Workspace non trouvé: $WORKSPACE_DIR"
    exit 1
fi

log "SUCCESS" "$GREEN" "Prérequis validés"
echo ""

# Démarrage des applications
log "INFO" "$BLUE" "Démarrage séquentiel des applications..."
echo ""

start_app "math4kids" 3001 "npm start"
sleep 5

start_app "unitflip" 3002 "npm start"
sleep 5

start_app "budgetcron" 3003 "npm run serve"
sleep 5

start_app "ai4kids" 3004 "npm start"
sleep 5

start_app "multiai" 3005 "npm run dev"

echo ""
log "SUCCESS" "$GREEN" "Démarrage terminé!"
echo ""
echo -e "${YELLOW}📱 URLs des applications:${NC}"
echo "  📚 Math4Kids:  http://localhost:3001"
echo "  🔄 UnitFlip:   http://localhost:3002"
echo "  💰 BudgetCron: http://localhost:3003"
echo "  🤖 AI4Kids:   http://localhost:3004"
echo "  🧠 MultiAI:    http://localhost:3005"
echo ""
echo -e "${YELLOW}📋 Gestion:${NC}"
echo "  🛑 Arrêt:      ./stop-apps.sh"
echo "  📊 Statut:     ./status-apps.sh"
echo "  📝 Logs:       ls $LOG_DIR"
echo ""

# Retourner au répertoire du projet
cd "$PROJECT_DIR"
