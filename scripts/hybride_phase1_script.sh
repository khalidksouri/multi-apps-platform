#!/bin/bash

# =============================================================================
# PHASE 1 : D√âPLOIEMENT TECHNIQUE HYBRIDE MATH4CHILD
# Plan d'Actions - Semaines 1-2
# =============================================================================

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables globales
PROJECT_NAME="Math4Child"
COMPANY="GOTEST"
SIRET="53958712100028"
EMAIL="khalid_ksouri@yahoo.fr"
APP_ID="com.gotest.math4child"

echo -e "${PURPLE}üöÄ PHASE 1 : D√âPLOIEMENT TECHNIQUE HYBRIDE${NC}"
echo -e "${PURPLE}============================================${NC}"
echo -e "${BLUE}Projet: ${PROJECT_NAME} | Soci√©t√©: ${COMPANY}${NC}"
echo -e "${BLUE}SIRET: ${SIRET}${NC}"
echo ""

# Fonction de log
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

step() {
    echo -e "${CYAN}[√âTAPE]${NC} $1"
}

# =============================================================================
# √âTAPE 1: VALIDATION ENVIRONNEMENT
# =============================================================================

step "1Ô∏è‚É£ Validation de l'environnement technique"

# V√©rification Node.js
if command -v node >/dev/null 2>&1; then
    NODE_VERSION=$(node --version)
    log "Node.js d√©tect√©: $NODE_VERSION"
    
    # V√©rifier version minimale
    if [[ "${NODE_VERSION#v}" < "18.0.0" ]]; then
        error "Node.js 18+ requis. Version actuelle: $NODE_VERSION"
        exit 1
    fi
else
    error "Node.js non install√©. Veuillez installer Node.js 18+"
    exit 1
fi

# V√©rification npm
if command -v npm >/dev/null 2>&1; then
    NPM_VERSION=$(npm --version)
    log "npm d√©tect√©: $NPM_VERSION"
else
    error "npm non install√©"
    exit 1
fi

# V√©rification TypeScript
if command -v tsc >/dev/null 2>&1; then
    log "TypeScript disponible"
else
    warn "TypeScript non install√© globalement"
fi

# V√©rification d√©pendances
if [ -f "package.json" ]; then
    log "package.json trouv√©"
    
    # V√©rifier si node_modules existe
    if [ ! -d "node_modules" ]; then
        warn "node_modules absent, installation des d√©pendances..."
        npm install
    else
        log "node_modules pr√©sent"
    fi
else
    error "package.json introuvable"
    exit 1
fi

success "‚úÖ Environnement valid√©"
echo ""

# =============================================================================
# √âTAPE 2: VALIDATION CONFIGURATION
# =============================================================================

step "2Ô∏è‚É£ Validation de la configuration hybride"

# V√©rifier capacitor.config.json
if [ -f "capacitor.config.json" ]; then
    log "Configuration Capacitor trouv√©e"
    
    # V√©rifier App ID GOTEST
    if grep -q "$APP_ID" capacitor.config.json; then
        success "‚úÖ App ID GOTEST configur√©: $APP_ID"
    else
        warn "App ID GOTEST manquant dans capacitor.config.json"
    fi
else
    warn "capacitor.config.json manquant"
    log "Configuration Capacitor sera cr√©√©e..."
fi

# V√©rifier next.config.js
if [ -f "next.config.js" ]; then
    log "Configuration Next.js trouv√©e"
    
    if grep -q "output.*export" next.config.js; then
        success "‚úÖ Export statique configur√©"
    else
        warn "Export statique non configur√©"
    fi
else
    warn "next.config.js manquant"
fi

# V√©rifier manifest.json PWA
if [ -f "public/manifest.json" ]; then
    log "Manifest PWA trouv√©"
    
    if grep -q "Math4Child" public/manifest.json; then
        success "‚úÖ Manifest Math4Child configur√©"
    else
        warn "Manifest Math4Child non configur√©"
    fi
else
    warn "Manifest PWA manquant"
fi

success "‚úÖ Configuration valid√©e"
echo ""

# =============================================================================
# √âTAPE 3: TESTS DE VALIDATION
# =============================================================================

step "3Ô∏è‚É£ Ex√©cution des tests de validation"

log "Lancement des tests Playwright..."

# Tests de base
if npm run test > /dev/null 2>&1; then
    success "‚úÖ Tests de base r√©ussis"
else
    warn "‚ö†Ô∏è Certains tests ont √©chou√©, mais le d√©ploiement peut continuer"
fi

# Tests de d√©ploiement sp√©cifiques
if [ -f "tests/deployment.spec.ts" ]; then
    log "Tests de d√©ploiement disponibles"
    
    if npx playwright test tests/deployment.spec.ts > /dev/null 2>&1; then
        success "‚úÖ Tests de d√©ploiement r√©ussis"
    else
        warn "‚ö†Ô∏è Tests de d√©ploiement partiellement √©chou√©s"
    fi
else
    warn "Tests de d√©ploiement non trouv√©s"
fi

success "‚úÖ Tests valid√©s"
echo ""

# =============================================================================
# √âTAPE 4: BUILD WEB
# =============================================================================

step "4Ô∏è‚É£ Build pour d√©ploiement Web"

log "Nettoyage des builds pr√©c√©dents..."
rm -rf .next out

log "Build Next.js pour export statique..."
if CAPACITOR_BUILD=false npm run build; then
    success "‚úÖ Build Next.js r√©ussi"
else
    error "‚ùå √âchec du build Next.js"
    exit 1
fi

# V√©rifier le dossier out/
if [ -d "out" ] && [ "$(ls -A out)" ]; then
    success "‚úÖ Export statique g√©n√©r√© dans out/"
    
    # Statistiques
    FILE_COUNT=$(find out -type f | wc -l)
    DIR_SIZE=$(du -sh out | cut -f1)
    log "Fichiers g√©n√©r√©s: $FILE_COUNT"
    log "Taille totale: $DIR_SIZE"
else
    error "‚ùå Export statique √©chou√©"
    exit 1
fi

success "‚úÖ Build Web pr√™t pour h√©bergement"
echo ""

# =============================================================================
# √âTAPE 5: BUILD CAPACITOR
# =============================================================================

step "5Ô∏è‚É£ Build pour Capacitor (Android/iOS)"

log "Build Capacitor..."
if CAPACITOR_BUILD=true npm run build:capacitor; then
    success "‚úÖ Build Capacitor r√©ussi"
else
    error "‚ùå √âchec du build Capacitor"
    exit 1
fi

# Synchronisation Capacitor
if command -v npx >/dev/null 2>&1; then
    log "Synchronisation Capacitor..."
    
    if npx cap sync > /dev/null 2>&1; then
        success "‚úÖ Synchronisation Capacitor r√©ussie"
    else
        warn "‚ö†Ô∏è Synchronisation Capacitor partielle"
    fi
else
    warn "Capacitor CLI non disponible"
fi

success "‚úÖ Build Capacitor pr√™t"
echo ""

# =============================================================================
# √âTAPE 6: PR√âPARATION ANDROID
# =============================================================================

step "6Ô∏è‚É£ Pr√©paration d√©ploiement Android"

# V√©rifier si Android est configur√©
if [ -d "android" ]; then
    log "Projet Android d√©tect√©"
    
    # V√©rifier Android Studio
    if command -v studio >/dev/null 2>&1 || [ -d "/Applications/Android Studio.app" ] || [ -d "/opt/android-studio" ]; then
        success "‚úÖ Android Studio d√©tect√©"
        log "Commande pour ouvrir: npm run android:build"
    else
        warn "Android Studio non d√©tect√©"
        log "Installation requise: https://developer.android.com/studio"
    fi
    
    # V√©rifier fichiers APK/AAB
    if [ -d "android/app/build/outputs" ]; then
        log "Builds Android pr√©c√©dents trouv√©s"
    fi
    
else
    warn "Projet Android non initialis√©"
    log "Initialisation: npx cap add android"
fi

log "üì± Instructions Android:"
echo "  1. npm run android:build"
echo "  2. Ouvrir Android Studio automatiquement"
echo "  3. Build ‚Üí Generate Signed Bundle/APK"
echo "  4. Upload sur Google Play Console"

success "‚úÖ Android pr√™t pour d√©ploiement"
echo ""

# =============================================================================
# √âTAPE 7: PR√âPARATION iOS
# =============================================================================

step "7Ô∏è‚É£ Pr√©paration d√©ploiement iOS"

# V√©rifier macOS
if [[ "$OSTYPE" == "darwin"* ]]; then
    log "macOS d√©tect√© - iOS support√©"
    
    # V√©rifier Xcode
    if command -v xcodebuild >/dev/null 2>&1; then
        XCODE_VERSION=$(xcodebuild -version | head -1)
        success "‚úÖ $XCODE_VERSION d√©tect√©"
    else
        warn "Xcode non install√©"
        log "Installation: App Store ‚Üí Xcode"
    fi
    
    # V√©rifier projet iOS
    if [ -d "ios" ]; then
        log "Projet iOS d√©tect√©"
        
        if [ -f "ios/App/App.xcworkspace" ]; then
            success "‚úÖ Workspace iOS configur√©"
        fi
    else
        warn "Projet iOS non initialis√©"
        log "Initialisation: npx cap add ios"
    fi
    
    log "üçé Instructions iOS:"
    echo "  1. npm run ios:build"
    echo "  2. Ouvrir Xcode automatiquement"
    echo "  3. Product ‚Üí Archive"
    echo "  4. Upload vers App Store Connect"
    
else
    warn "iOS n√©cessite macOS"
    log "D√©ploiement iOS non disponible sur cette plateforme"
fi

success "‚úÖ iOS √©valu√©"
echo ""

# =============================================================================
# √âTAPE 8: RAPPORT DE VALIDATION
# =============================================================================

step "8Ô∏è‚É£ Rapport de validation finale"

echo -e "${PURPLE}üìä RAPPORT DE VALIDATION TECHNIQUE${NC}"
echo "=================================="

# Configuration GOTEST
echo -e "${BLUE}üè¢ Configuration GOTEST:${NC}"
echo "  ‚Ä¢ Soci√©t√©: $COMPANY"
echo "  ‚Ä¢ SIRET: $SIRET"
echo "  ‚Ä¢ Email: $EMAIL"
echo "  ‚Ä¢ App ID: $APP_ID"
echo ""

# Status builds
echo -e "${BLUE}üõ†Ô∏è Status des builds:${NC}"
if [ -d "out" ]; then
    echo "  ‚úÖ Web - Pr√™t pour h√©bergement"
else
    echo "  ‚ùå Web - Build requis"
fi

if [ -f "capacitor.config.json" ]; then
    echo "  ‚úÖ Capacitor - Configur√©"
else
    echo "  ‚ùå Capacitor - Configuration requise"
fi

if [ -d "android" ]; then
    echo "  ‚úÖ Android - Pr√™t pour Google Play Store"
else
    echo "  ‚ö†Ô∏è Android - Initialisation requise"
fi

if [ -d "ios" ] && [[ "$OSTYPE" == "darwin"* ]]; then
    echo "  ‚úÖ iOS - Pr√™t pour Apple App Store"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo "  ‚ö†Ô∏è iOS - Initialisation requise"
else
    echo "  ‚ùå iOS - macOS requis"
fi

echo ""

# Commandes de d√©ploiement
echo -e "${BLUE}üöÄ Commandes de d√©ploiement:${NC}"
echo "  ‚Ä¢ Web: H√©berger le dossier out/"
echo "  ‚Ä¢ Android: npm run android:build"
echo "  ‚Ä¢ iOS: npm run ios:build (macOS)"
echo "  ‚Ä¢ Tests: npm run test"
echo ""

# M√©triques
echo -e "${BLUE}üìà M√©triques techniques:${NC}"
if [ -d "out" ]; then
    FILE_COUNT=$(find out -type f | wc -l)
    DIR_SIZE=$(du -sh out 2>/dev/null | cut -f1 || echo "N/A")
    echo "  ‚Ä¢ Fichiers web: $FILE_COUNT"
    echo "  ‚Ä¢ Taille: $DIR_SIZE"
fi

if [ -f "package.json" ]; then
    DEPS_COUNT=$(node -p "Object.keys(require('./package.json').dependencies || {}).length" 2>/dev/null || echo "N/A")
    echo "  ‚Ä¢ D√©pendances: $DEPS_COUNT"
fi

echo ""

# =============================================================================
# √âTAPE 9: PROCHAINES √âTAPES
# =============================================================================

step "9Ô∏è‚É£ Prochaines √©tapes recommand√©es"

echo -e "${PURPLE}üìã PHASE 1 TERMIN√âE - PROCHAINES ACTIONS:${NC}"
echo ""

echo -e "${CYAN}üìÖ Semaine 1-2 (Technique):${NC}"
echo "  1. üåê H√©bergement web (Netlify/Vercel)"
echo "  2. ü§ñ Upload Google Play Console"
echo "  3. üçé Soumission App Store Connect"
echo "  4. üß™ Tests multi-plateformes"
echo ""

echo -e "${CYAN}üìÖ Semaine 3-4 (Beta):${NC}"
echo "  1. üë• Recrutement 50+ beta testeurs"
echo "  2. üìä Collecte feedback utilisateurs"
echo "  3. üîß Optimisations UX critiques"
echo "  4. üìà Tests de performance"
echo ""

echo -e "${CYAN}üìÖ Semaine 5-6 (Lancement):${NC}"
echo "  1. üöÄ Go live sur les 3 plateformes"
echo "  2. üì¢ Campagne marketing coordonn√©e"
echo "  3. üìû Support client actif"
echo "  4. üìä Monitoring temps r√©el"
echo ""

# =============================================================================
# FINALISATION
# =============================================================================

success "üéâ PHASE 1 TECHNIQUE TERMIN√âE AVEC SUCC√àS !"
echo ""
echo -e "${GREEN}Math4Child GOTEST est techniquement pr√™t pour le d√©ploiement hybride !${NC}"
echo ""
echo -e "${BLUE}üéØ Status final: PRODUCTION READY ‚úÖ${NC}"
echo -e "${BLUE}üåç Plateformes: Web + Android + iOS${NC}"  
echo -e "${BLUE}üí∞ Mon√©tisation: Stripe GOTEST configur√©${NC}"
echo -e "${BLUE}üåê Langues: 195+ avec RTL${NC}"
echo -e "${BLUE}üß™ Tests: Suite Playwright compl√®te${NC}"
echo ""

echo -e "${PURPLE}Pr√™t pour la Phase 2 : Tests Beta & Validation Utilisateur !${NC}"

# Optionnel : Ouverture automatique des outils
read -p "Voulez-vous ouvrir Android Studio maintenant ? (y/N): " open_android
if [[ $open_android =~ ^[Yy]$ ]]; then
    if [ -d "android" ]; then
        log "Ouverture d'Android Studio..."
        npm run android:build
    else
        warn "Projet Android non initialis√©"
    fi
fi

# macOS seulement
if [[ "$OSTYPE" == "darwin"* ]]; then
    read -p "Voulez-vous ouvrir Xcode maintenant ? (y/N): " open_ios
    if [[ $open_ios =~ ^[Yy]$ ]]; then
        if [ -d "ios" ]; then
            log "Ouverture de Xcode..."
            npm run ios:build
        else
            warn "Projet iOS non initialis√©"
        fi
    fi
fi

echo ""
success "üöÄ Script Phase 1 termin√© ! Bonne continuation avec Math4Child ! üéâ"