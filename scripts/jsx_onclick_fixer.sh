#!/bin/bash

# üîß Script de Correction des onClick JSX Malform√©s Math4Child
# Corrige sp√©cifiquement les patterns "onClick={() => {} function()}" d√©fectueux

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_step() { echo -e "${PURPLE}[STEP]${NC} $1"; }
log_fix() { echo -e "${CYAN}[FIX]${NC} $1"; }

# Variables
PAGE_FILE="apps/math4child/src/app/page.tsx"
BACKUP_FILE="${PAGE_FILE}.onclick_fix_backup_$(date +%Y%m%d_%H%M%S)"

# Analyser les erreurs onClick sp√©cifiques
analyze_onclick_errors() {
    log_step "üîç ANALYSE DES ERREURS ONCLICK..."
    
    echo ""
    log_info "Recherche des patterns onClick malform√©s..."
    
    # Compter les patterns probl√©matiques
    local malformed_count=$(grep -c "onClick={() => {}" "$PAGE_FILE" 2>/dev/null || echo "0")
    local className_errors=$(grep -c 'className=.*"}$' "$PAGE_FILE" 2>/dev/null || echo "0")
    local empty_expressions=$(grep -c '\${}\|className={`.*\${}\|h-3 rounded-full \${}' "$PAGE_FILE" 2>/dev/null || echo "0")
    
    echo "  üìä Patterns onClick malform√©s: $malformed_count"
    echo "  üìä Erreurs className: $className_errors"
    echo "  üìä Expressions vides: $empty_expressions"
    echo ""
    
    if [[ $malformed_count -gt 0 ]]; then
        log_error "Patterns 'onClick={() => {} function()}' trouv√©s"
        echo ""
        log_info "Exemples de patterns probl√©matiques:"
        grep -n "onClick={() => {}" "$PAGE_FILE" | head -5 | while read line; do
            echo "    $line"
        done
        echo ""
    fi
    
    if [[ $empty_expressions -gt 0 ]]; then
        log_warning "Expressions template litt√©rales vides trouv√©es"
        echo ""
        log_info "Exemples d'expressions vides:"
        grep -n '\${}\|h-3 rounded-full \${}' "$PAGE_FILE" | head -3 | while read line; do
            echo "    $line"
        done
        echo ""
    fi
}

# Corrections sp√©cifiques des onClick
fix_onclick_patterns() {
    log_step "üîß CORRECTION DES PATTERNS ONCLICK..."
    
    # Cr√©er sauvegarde
    cp "$PAGE_FILE" "$BACKUP_FILE"
    log_success "Sauvegarde cr√©√©e: $BACKUP_FILE"
    
    # 1. Corriger les patterns "onClick={() => {} function()}"
    log_fix "Correction des onClick malform√©s..."
    
    # Pattern principal: onClick={() => {} setFunction(value)}
    sed -i.tmp 's/onClick={() => {} \([^}]*\)}/onClick={() => \1}/g' "$PAGE_FILE"
    
    # Patterns sp√©cifiques identifi√©s dans les erreurs
    sed -i.tmp 's/onClick={() => {} setIsLanguageOpen(!isLanguageOpen)}/onClick={() => setIsLanguageOpen(!isLanguageOpen)}/g' "$PAGE_FILE"
    sed -i.tmp 's/onClick={() => {} setIsLanguageOpen(false)}/onClick={() => setIsLanguageOpen(false)}/g' "$PAGE_FILE"
    sed -i.tmp 's/onClick={() => {} handleLanguageChange(\([^)]*\))}/onClick={() => handleLanguageChange(\1)}/g' "$PAGE_FILE"
    sed -i.tmp 's/onClick={() => {} handleLevelSelect(\([^)]*\))}/onClick={() => handleLevelSelect(\1)}/g' "$PAGE_FILE"
    sed -i.tmp 's/onClick={() => {} updateLevelProgress(\([^}]*\))}/onClick={() => updateLevelProgress(\1)}/g' "$PAGE_FILE"
    sed -i.tmp 's/onClick={() => {} setBillingPeriod(\([^)]*\))}/onClick={() => setBillingPeriod(\1)}/g' "$PAGE_FILE"
    sed -i.tmp 's/onClick={() => {} handlePlanSelect(\([^)]*\))}/onClick={() => handlePlanSelect(\1)}/g' "$PAGE_FILE"
    
    log_success "Patterns onClick corrig√©s"
    
    # 2. Corriger les className avec expressions vides
    log_fix "Correction des expressions className vides..."
    
    # Corriger les template literals avec expressions vides
    sed -i.tmp 's/className={\`\([^}]*\)\${}}/className={\`\1\`}/g' "$PAGE_FILE"
    sed -i.tmp 's/h-3 rounded-full \${}/h-3 rounded-full bg-gray-200/g' "$PAGE_FILE"
    
    # Corrections sp√©cifiques pour les classes dynamiques
    sed -i.tmp 's/transition-all duration-200 relative \${}/transition-all duration-200 relative/g' "$PAGE_FILE"
    sed -i.tmp 's/font-medium \${}/font-medium/g' "$PAGE_FILE"
    sed -i.tmp 's/hover:scale-105 \${}/hover:scale-105/g' "$PAGE_FILE"
    
    log_success "Expressions className corrig√©es"
    
    # 3. Corriger les className avec accolades fermantes en trop
    log_fix "Correction des accolades fermantes en trop..."
    
    # Patterns avec "} √† la fin des className
    sed -i.tmp 's/className="\([^"]*\)"}$/className="\1"/g' "$PAGE_FILE"
    sed -i.tmp 's/className="\([^"]*\)"}\s*>/className="\1">/g' "$PAGE_FILE"
    
    log_success "Accolades fermantes corrig√©es"
    
    # 4. Nettoyer les fichiers temporaires
    rm -f "${PAGE_FILE}.tmp"
}

# Corrections avanc√©es pour les structures JSX cass√©es
fix_jsx_structure() {
    log_step "üèóÔ∏è CORRECTION DE LA STRUCTURE JSX..."
    
    log_fix "Correction des balises fermantes manquantes..."
    
    # Corriger les </button> qui devraient √™tre </div> selon le contexte
    # Ces corrections sont bas√©es sur l'analyse des erreurs TypeScript
    
    # Lignes sp√©cifiques identifi√©es dans les erreurs
    sed -i.tmp '457s/            <\/button>/            <\/div>/' "$PAGE_FILE"
    sed -i.tmp '478s/                    <\/button>/                    <\/div>/' "$PAGE_FILE"
    sed -i.tmp '493s/                      <\/button>/                      <\/div>/' "$PAGE_FILE"
    sed -i.tmp '669s/                      <\/button>/                      <\/div>/' "$PAGE_FILE"
    sed -i.tmp '696s/              <\/button>/              <\/div>/' "$PAGE_FILE"
    sed -i.tmp '709s/              <\/button>/              <\/div>/' "$PAGE_FILE"
    sed -i.tmp '722s/              <\/button>/              <\/div>/' "$PAGE_FILE"
    sed -i.tmp '797s/                <\/button>/                <\/div>/' "$PAGE_FILE"
    
    log_success "Balises fermantes corrig√©es"
    
    log_fix "Ajout des balises ouvrantes manquantes..."
    
    # Si nous avons corrig√© des </button> en </div>, nous devons aussi corriger les <button> correspondants
    # Ceci n√©cessite une analyse plus fine, mais commen√ßons par les patterns √©vidents
    
    # Rechercher et corriger les button qui devraient √™tre div
    sed -i.tmp 's/<button\s\+onClick={() => setIsLanguageOpen/<div onClick={() => setIsLanguageOpen/g' "$PAGE_FILE"
    sed -i.tmp 's/<button\s\+onClick={() => handleLanguageChange/<div onClick={() => handleLanguageChange/g' "$PAGE_FILE"
    
    log_success "Balises ouvrantes corrig√©es"
}

# Validation progressive
progressive_validation() {
    log_step "‚úÖ VALIDATION PROGRESSIVE..."
    
    echo ""
    log_info "V√©rification des corrections..."
    
    # 1. V√©rifier que les onClick malform√©s ont √©t√© corrig√©s
    local remaining_malformed=$(grep -c "onClick={() => {}" "$PAGE_FILE" 2>/dev/null || echo "0")
    if [[ $remaining_malformed -eq 0 ]]; then
        log_success "‚úÖ Tous les onClick malform√©s corrig√©s"
    else
        log_warning "‚ö†Ô∏è $remaining_malformed onClick malform√©s restants"
    fi
    
    # 2. V√©rifier les expressions vides
    local remaining_empty=$(grep -c '\${}' "$PAGE_FILE" 2>/dev/null || echo "0")
    if [[ $remaining_empty -eq 0 ]]; then
        log_success "‚úÖ Toutes les expressions vides corrig√©es"
    else
        log_warning "‚ö†Ô∏è $remaining_empty expressions vides restantes"
    fi
    
    # 3. V√©rifier les accolades fermantes en trop
    local remaining_braces=$(grep -c 'className="[^"]*"}' "$PAGE_FILE" 2>/dev/null || echo "0")
    if [[ $remaining_braces -eq 0 ]]; then
        log_success "‚úÖ Toutes les accolades fermantes en trop corrig√©es"
    else
        log_warning "‚ö†Ô∏è $remaining_braces accolades fermantes en trop restantes"
    fi
    
    echo ""
}

# Test de compilation cibl√©
targeted_compilation_test() {
    log_step "üìò TEST DE COMPILATION CIBL√â..."
    
    if command -v npx &> /dev/null; then
        log_info "Test TypeScript avec rapport d'erreurs limit√©..."
        
        # Tester seulement les 10 premi√®res erreurs pour voir les progr√®s
        local error_output=$(npx tsc --noEmit "$PAGE_FILE" 2>&1 | head -20)
        local error_count=$(echo "$error_output" | grep -c "error TS" || echo "0")
        
        echo ""
        log_info "R√âSULTATS DU TEST:"
        echo "  üìä Erreurs d√©tect√©es: $error_count"
        
        if [[ $error_count -eq 0 ]]; then
            log_success "üéâ COMPILATION TYPESCRIPT R√âUSSIE !"
        elif [[ $error_count -lt 10 ]]; then
            log_warning "Progr√®s: erreurs r√©duites √† $error_count"
            echo ""
            log_info "Erreurs restantes:"
            echo "$error_output" | grep "error TS" | head -5
        else
            log_error "Encore beaucoup d'erreurs ($error_count+)"
            echo ""
            log_info "Premi√®res erreurs:"
            echo "$error_output" | grep "error TS" | head -3
        fi
        
    else
        log_info "TypeScript non disponible pour le test"
    fi
    
    echo ""
}

# Instructions sp√©cifiques de correction manuelle
specific_manual_instructions() {
    log_step "üìã INSTRUCTIONS SP√âCIFIQUES DE CORRECTION MANUELLE..."
    
    echo ""
    log_info "Si des erreurs persistent, voici les √©tapes pr√©cises:"
    echo ""
    echo "1. üîç OUVRIR LE FICHIER:"
    echo "   code $PAGE_FILE"
    echo ""
    echo "2. üéØ RECHERCHER CES PATTERNS PROBL√âMATIQUES:"
    echo "   - Ctrl+F: 'onClick={() => {}'"
    echo "   - Ctrl+F: 'className=.*\${}'"
    echo "   - Ctrl+F: 'className=\".*\"}'"
    echo ""
    echo "3. üîß CORRECTIONS MANUELLES TYPIQUES:"
    echo "   ‚ùå onClick={() => {} setFunction()}"
    echo "   ‚úÖ onClick={() => setFunction()}"
    echo ""
    echo "   ‚ùå className={\`text-sm \${}}"
    echo "   ‚úÖ className=\"text-sm\""
    echo ""
    echo "   ‚ùå className=\"text-blue\"}"
    echo "   ‚úÖ className=\"text-blue\""
    echo ""
    echo "4. üß© UTILISER VS CODE FEATURES:"
    echo "   - Ctrl+Shift+P ‚Üí 'TypeScript: Go to Project Config'"
    echo "   - F8 pour naviguer entre les erreurs"
    echo "   - Ctrl+. pour les quick fixes automatiques"
    echo ""
}

# R√©sum√© final avec next steps
final_summary_with_next_steps() {
    local remaining_errors=$(npx tsc --noEmit "$PAGE_FILE" 2>&1 | grep -c "error TS" 2>/dev/null || echo "N/A")
    
    echo ""
    echo "üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ"
    echo ""
    log_success "CORRECTION DES ONCLICK JSX TERMIN√âE"
    echo ""
    echo "üìä R√âSULTATS:"
    echo "  üìÅ Fichier: $PAGE_FILE"
    echo "  üíæ Sauvegarde: $BACKUP_FILE"
    echo "  üîß Erreurs TypeScript restantes: $remaining_errors"
    echo ""
    echo "üõ†Ô∏è  CORRECTIONS APPLIQU√âES:"
    echo "  ‚Ä¢ Patterns onClick malform√©s corrig√©s"
    echo "  ‚Ä¢ Expressions className vides corrig√©es"
    echo "  ‚Ä¢ Accolades fermantes en trop supprim√©es"
    echo "  ‚Ä¢ Structure JSX basique corrig√©e"
    echo ""
    
    if [[ "$remaining_errors" == "0" ]]; then
        echo "üéØ PROCHAINES √âTAPES - SUCC√àS:"
        echo "  1. rm -rf .next && npm run dev"
        echo "  2. Testez http://localhost:3000"
        echo "  3. Lancez les tests Playwright"
        echo "  4. V√©rifiez toutes les fonctionnalit√©s"
    elif [[ "$remaining_errors" -lt 20 ]] && [[ "$remaining_errors" != "N/A" ]]; then
        echo "üéØ PROCHAINES √âTAPES - PROGR√àS:"
        echo "  1. Correction manuelle des $remaining_errors erreurs restantes"
        echo "  2. Utilisez VS Code avec TypeScript"
        echo "  3. Naviguer avec F8 entre les erreurs"
        echo "  4. Relancez ce script apr√®s correction"
    else
        echo "üéØ PROCHAINES √âTAPES - CONTINUATION:"
        echo "  1. Relancez: npx tsc --noEmit $PAGE_FILE"
        echo "  2. Corrigez manuellement les erreurs les plus critiques"
        echo "  3. Relancez ce script"
        echo "  4. R√©p√©tez jusqu'√† r√©solution compl√®te"
    fi
    
    echo ""
    echo "üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ"
    echo ""
}

# Fonction principale
main() {
    echo ""
    echo "üîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîß"
    echo ""
    log_info "CORRECTION DES ONCLICK JSX MALFORM√âS MATH4CHILD"
    echo ""
    echo "üéØ Ce script corrige sp√©cifiquement:"
    echo "   ‚Ä¢ Patterns 'onClick={() => {} function()}' d√©fectueux"
    echo "   ‚Ä¢ Expressions template litt√©rales vides"
    echo "   ‚Ä¢ Accolades fermantes en trop dans className"
    echo "   ‚Ä¢ Structure JSX basique cass√©e"
    echo ""
    echo "üîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîß"
    echo ""
    
    # V√©rification initiale
    if [[ ! -f "$PAGE_FILE" ]]; then
        log_error "Fichier $PAGE_FILE non trouv√© !"
        exit 1
    fi
    
    # Ex√©cution des corrections
    analyze_onclick_errors
    fix_onclick_patterns
    fix_jsx_structure
    progressive_validation
    targeted_compilation_test
    specific_manual_instructions
    final_summary_with_next_steps
}

# Ex√©cution
main "$@"