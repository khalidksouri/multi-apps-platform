#!/bin/bash

# =============================================================================
# üîÑ RESTAURATION DE L'√âTAT DU PROJET MATH4CHILD
# Remet le projet dans l'√©tat ant√©rieur au script language_selector_fix.sh
# =============================================================================

set -e

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}=================================${NC}"
    echo -e "${PURPLE}üîÑ $1${NC}"
    echo -e "${PURPLE}=================================${NC}"
}

print_header "RESTAURATION DE L'√âTAT DU PROJET"

# V√©rifications
if [ ! -d "apps/math4child" ]; then
    log_error "Dossier apps/math4child introuvable!"
    exit 1
fi

cd apps/math4child

echo "üìç R√©pertoire actuel: $(pwd)"
echo ""

# =============================================================================
# 1. D√âTECTION DES FICHIERS DE SAUVEGARDE
# =============================================================================

log_info "üîç Recherche des fichiers de sauvegarde..."

# Rechercher les fichiers de sauvegarde cr√©√©s par le script
BACKUP_FILES=$(find . -name "*.backup_*" -type f 2>/dev/null || true)

if [ -z "$BACKUP_FILES" ]; then
    log_warning "‚ö†Ô∏è Aucun fichier de sauvegarde trouv√© cr√©√© par le script"
    log_info "Recherche d'autres sauvegardes possibles..."
    
    # Chercher d'autres patterns de sauvegarde
    OTHER_BACKUPS=$(find . -name "*.bak" -o -name "*backup*" -o -name "*.old" 2>/dev/null || true)
    
    if [ -z "$OTHER_BACKUPS" ]; then
        log_warning "Aucune sauvegarde automatique trouv√©e"
        log_info "üìã Restauration manuelle recommand√©e ou utilisation de Git"
        echo ""
        echo "üîß Options de restauration manuelle :"
        echo "   1. Utilisez 'git status' pour voir les changements"
        echo "   2. Utilisez 'git checkout .' pour restaurer tous les fichiers"
        echo "   3. Utilisez 'git reset --hard HEAD' pour une restauration compl√®te"
        echo ""
        read -p "Voulez-vous continuer avec une restauration Git automatique ? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log_info "üîÑ Restauration via Git..."
            git checkout . 2>/dev/null || log_error "√âchec de la restauration Git"
            git clean -fd 2>/dev/null || log_warning "Impossible de nettoyer les fichiers non track√©s"
            log_success "‚úÖ Restauration Git termin√©e"
        else
            log_info "‚ùå Restauration annul√©e par l'utilisateur"
            exit 0
        fi
    else
        echo "üîç Sauvegardes trouv√©es :"
        echo "$OTHER_BACKUPS"
        echo ""
        log_warning "‚ö†Ô∏è Sauvegardes trouv√©es mais pas dans le format attendu"
        log_info "Veuillez restaurer manuellement si n√©cessaire"
    fi
else
    echo "‚úÖ Fichiers de sauvegarde trouv√©s :"
    echo "$BACKUP_FILES"
    echo ""
fi

# =============================================================================
# 2. RESTAURATION DES FICHIERS SAUVEGARD√âS
# =============================================================================

if [ ! -z "$BACKUP_FILES" ]; then
    log_info "üîÑ Restauration des fichiers depuis les sauvegardes..."
    
    # Compteur pour les restaurations
    RESTORED_COUNT=0
    
    echo "$BACKUP_FILES" | while read -r backup_file; do
        if [ -f "$backup_file" ]; then
            # Extraire le nom du fichier original
            original_file=$(echo "$backup_file" | sed 's/\.backup_[0-9_]*$//')
            
            if [ -f "$original_file" ]; then
                log_info "üìÑ Restauration: $original_file"
                
                # Cr√©er une sauvegarde du fichier actuel avant restauration
                current_backup="${original_file}.current_$(date +%Y%m%d_%H%M%S)"
                cp "$original_file" "$current_backup"
                
                # Restaurer depuis la sauvegarde
                cp "$backup_file" "$original_file"
                
                log_success "‚úÖ Restaur√©: $(basename "$original_file")"
                RESTORED_COUNT=$((RESTORED_COUNT + 1))
            else
                log_warning "‚ö†Ô∏è Fichier original non trouv√©: $original_file"
            fi
        fi
    done
    
    if [ $RESTORED_COUNT -gt 0 ]; then
        log_success "‚úÖ $RESTORED_COUNT fichier(s) restaur√©(s)"
    fi
fi

# =============================================================================
# 3. SUPPRESSION DES FICHIERS CR√â√âS PAR LE SCRIPT
# =============================================================================

log_info "üóëÔ∏è Suppression des fichiers cr√©√©s par le script..."

# Supprimer les fichiers qui n'existaient pas avant le script
FILES_TO_REMOVE=(
    "src/components/LanguageSelector.tsx"
    "src/app/globals.css"
)

for file in "${FILES_TO_REMOVE[@]}"; do
    if [ -f "$file" ]; then
        # V√©rifier si c'est un fichier cr√©√© par le script
        if grep -q "STYLES CORRECTIFS POUR LE S√âLECTEUR DE LANGUES" "$file" 2>/dev/null || 
           grep -q "language-selector" "$file" 2>/dev/null; then
            log_info "üóëÔ∏è Suppression: $file (cr√©√© par le script)"
            rm "$file"
            log_success "‚úÖ Supprim√©: $(basename "$file")"
        else
            log_warning "‚ö†Ô∏è Fichier conserv√© (pas cr√©√© par le script): $file"
        fi
    fi
done

# =============================================================================
# 4. NETTOYAGE DU CACHE ET RED√âMARRAGE
# =============================================================================

log_info "üßπ Nettoyage du cache Next.js..."

# Arr√™ter le serveur
pkill -f "next dev" 2>/dev/null || true
sleep 2

# Supprimer le cache
if [ -d ".next" ]; then
    rm -rf .next
    log_success "‚úÖ Cache .next supprim√©"
fi

if [ -d "node_modules/.cache" ]; then
    rm -rf node_modules/.cache
    log_success "‚úÖ Cache node_modules supprim√©"
fi

# =============================================================================
# 5. V√âRIFICATION DE L'√âTAT DU PROJET
# =============================================================================

log_info "üîç V√©rification de l'√©tat du projet..."

# V√©rifier la structure des fichiers
if [ -f "src/app/page.tsx" ]; then
    log_success "‚úÖ Fichier page.tsx pr√©sent"
    
    # V√©rifier le contenu
    if grep -q "LanguageSelector" src/app/page.tsx 2>/dev/null; then
        log_warning "‚ö†Ô∏è page.tsx contient encore des r√©f√©rences au LanguageSelector"
        log_info "üîß Nettoyage des r√©f√©rences..."
        
        # Sauvegarder avant nettoyage
        cp src/app/page.tsx "src/app/page.tsx.pre_cleanup_$(date +%Y%m%d_%H%M%S)"
        
        # Cr√©er une version nettoy√©e sans les r√©f√©rences au LanguageSelector
        cat > src/app/page.tsx << 'CLEANFILE'
'use client';

import React, { useState, useEffect } from 'react';

export default function HomePage() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
      <div className="text-blue-600">Chargement...</div>
    </div>;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                <span className="text-white text-lg font-bold">M</span>
              </div>
              <h1 className="text-xl font-bold text-gray-900">Math4Child</h1>
            </div>
          </div>
        </div>
      </header>

      {/* Contenu principal */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Math4Child - Application √âducative
          </h1>
          <p className="text-xl text-gray-600 mb-12">
            Apprentissage des math√©matiques pour toute la famille
          </p>
          <div className="bg-blue-100 border border-blue-300 rounded-lg p-4 inline-block">
            <p className="text-blue-800 font-medium">
              ‚úÖ Projet restaur√© √† l'√©tat initial
            </p>
          </div>
        </div>
      </main>
    </div>
  );
}
CLEANFILE
        
        log_success "‚úÖ R√©f√©rences nettoy√©es"
    fi
else
    log_warning "‚ö†Ô∏è Fichier page.tsx non trouv√©"
fi

# V√©rifier package.json
if [ -f "package.json" ]; then
    log_success "‚úÖ package.json pr√©sent"
else
    log_error "‚ùå package.json manquant"
fi

# =============================================================================
# 6. RED√âMARRAGE DU SERVEUR
# =============================================================================

log_info "üöÄ Red√©marrage du serveur de d√©veloppement..."

# Red√©marrer le serveur
if command -v npm >/dev/null 2>&1; then
    nohup npm run dev > /dev/null 2>&1 &
    sleep 3
    
    if pgrep -f "next dev" > /dev/null; then
        log_success "‚úÖ Serveur red√©marr√© avec succ√®s"
    else
        log_warning "‚ö†Ô∏è Le serveur n'a pas pu red√©marrer automatiquement"
        echo "   D√©marrez-le manuellement avec: npm run dev"
    fi
else
    log_warning "‚ö†Ô∏è npm non trouv√©, red√©marrage manuel requis"
fi

# =============================================================================
# 7. NETTOYAGE DES FICHIERS DE SAUVEGARDE (OPTIONNEL)
# =============================================================================

if [ ! -z "$BACKUP_FILES" ]; then
    echo ""
    read -p "üóëÔ∏è Voulez-vous supprimer les fichiers de sauvegarde ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "$BACKUP_FILES" | while read -r backup_file; do
            if [ -f "$backup_file" ]; then
                rm "$backup_file"
                log_info "üóëÔ∏è Supprim√©: $(basename "$backup_file")"
            fi
        done
        log_success "‚úÖ Fichiers de sauvegarde supprim√©s"
    else
        log_info "üìÅ Fichiers de sauvegarde conserv√©s"
    fi
fi

# =============================================================================
# RAPPORT FINAL
# =============================================================================

echo ""
print_header "RESTAURATION TERMIN√âE"
echo ""
echo "üîÑ Actions effectu√©es :"
echo ""

if [ ! -z "$BACKUP_FILES" ]; then
    echo "‚úÖ Fichiers restaur√©s depuis les sauvegardes"
    echo "‚úÖ Fichiers cr√©√©s par le script supprim√©s"
else
    echo "‚úÖ Restauration Git effectu√©e (si demand√©e)"
fi

echo "‚úÖ Cache Next.js nettoy√©"
echo "‚úÖ R√©f√©rences au LanguageSelector supprim√©es"
echo "‚úÖ Serveur red√©marr√©"
echo ""

echo "üåê √âtat du projet :"
echo "   üìÅ Structure de fichiers restaur√©e"
echo "   üßπ Cache nettoy√©"
echo "   üîÑ Serveur op√©rationnel"
echo ""

echo "üîç V√©rification recommand√©e :"
echo "   1. Visitez http://localhost:3000"
echo "   2. V√©rifiez que l'application fonctionne"
echo "   3. Utilisez 'git status' pour voir les changements restants"
echo ""

echo "üìÅ Fichiers de sauvegarde disponibles :"
if [ ! -z "$BACKUP_FILES" ]; then
    echo "$BACKUP_FILES" | sed 's/^/   /'
else
    echo "   Aucun (restauration Git utilis√©e)"
fi

echo ""
log_success "üéâ Restauration du projet termin√©e avec succ√®s!"
echo "======================================"