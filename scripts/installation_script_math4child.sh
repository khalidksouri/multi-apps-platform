#!/bin/bash

# ===================================================================
# SCRIPT D'INSTALLATION AUTOMATIQUE - TESTS MATH4CHILD
# Installation compl√®te de la suite de tests Playwright
# ===================================================================

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonctions d'affichage
print_header() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë                                                            ‚ïë${NC}"
    echo -e "${BLUE}‚ïë  üé≠ INSTALLATION TESTS PLAYWRIGHT - MATH4CHILD üé≠        ‚ïë${NC}"
    echo -e "${BLUE}‚ïë                                                            ‚ïë${NC}"
    echo -e "${BLUE}‚ïë  üìö Application √©ducative multilingue (20 langues)        ‚ïë${NC}"
    echo -e "${BLUE}‚ïë  üåç Support Web, Android, iOS                             ‚ïë${NC}"
    echo -e "${BLUE}‚ïë  üßÆ Tests complets E2E, Performance, Accessibilit√©        ‚ïë${NC}"
    echo -e "${BLUE}‚ïë                                                            ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_step() {
    echo -e "${PURPLE}üîÑ $1${NC}"
}

# Variables globales
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
TESTS_DIR="$SCRIPT_DIR"
APP_DIR="$PROJECT_ROOT/apps/math4child"

# V√©rification des pr√©requis
check_prerequisites() {
    print_step "V√©rification des pr√©requis syst√®me..."
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js n'est pas install√©. Veuillez installer Node.js >= 18.0.0"
        echo "T√©l√©chargez depuis: https://nodejs.org/"
        exit 1
    fi
    
    local node_version=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$node_version" -lt 18 ]; then
        print_error "Node.js version $node_version d√©tect√©e. Version 18+ requise."
        exit 1
    fi
    print_success "Node.js $(node --version) ‚úì"
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        print_error "npm n'est pas install√©"
        exit 1
    fi
    print_success "npm $(npm --version) ‚úì"
    
    # V√©rifier git (optionnel)
    if command -v git &> /dev/null; then
        print_success "git $(git --version | cut -d' ' -f3) ‚úì"
    else
        print_warning "git n'est pas install√© (optionnel)"
    fi
    
    # V√©rifier curl
    if ! command -v curl &> /dev/null; then
        print_warning "curl n'est pas install√© (recommand√© pour les health checks)"
    fi
    
    print_success "Pr√©requis syst√®me valid√©s"
}

# Cr√©ation de la structure des tests
create_test_structure() {
    print_step "Cr√©ation de la structure des tests..."
    
    cd "$PROJECT_ROOT"
    
    # Cr√©er le r√©pertoire des tests s'il n'existe pas
    mkdir -p tests/specs
    mkdir -p tests/utils
    mkdir -p tests/fixtures
    mkdir -p tests/data
    mkdir -p test-results
    mkdir -p playwright-report
    
    print_success "Structure des r√©pertoires cr√©√©e"
}

# Installation des d√©pendances Node.js
install_dependencies() {
    print_step "Installation des d√©pendances Node.js..."
    
    cd "$TESTS_DIR"
    
    # Cr√©er package.json s'il n'existe pas
    if [ ! -f "package.json" ]; then
        print_info "Cr√©ation du package.json des tests..."
        
        cat > package.json << 'EOF'
{
  "name": "math4child-tests",
  "version": "1.0.0",
  "description": "Suite de tests Playwright pour Math4Child",
  "private": true,
  "scripts": {
    "test": "playwright test",
    "test:headed": "playwright test --headed",
    "test:debug": "playwright test --debug",
    "test:ui": "playwright test --ui",
    "test:chrome": "playwright test --project=chromium-desktop",
    "test:firefox": "playwright test --project=firefox-desktop",
    "test:safari": "playwright test --project=webkit-desktop",
    "test:mobile": "playwright test --project=mobile-android --project=mobile-ios",
    "test:i18n": "playwright test --project=french-locale --project=spanish-locale --project=arabic-rtl",
    "test:performance": "playwright test --project=performance-chrome performance.spec.ts",
    "test:accessibility": "playwright test --project=accessibility-chrome a11y.spec.ts",
    "test:smoke": "playwright test --grep @smoke",
    "test:regression": "playwright test --grep @regression",
    "test:report": "playwright show-report",
    "test:install": "playwright install",
    "clean": "rimraf test-results playwright-report"
  },
  "devDependencies": {
    "@playwright/test": "^1.41.0",
    "@types/node": "^20.10.0",
    "typescript": "^5.3.0",
    "rimraf": "^5.0.0"
  }
}
EOF
        print_success "package.json cr√©√©"
    fi
    
    # Installation des d√©pendances
    print_info "Installation des d√©pendances npm..."
    npm install
    print_success "D√©pendances npm install√©es"
}

# Installation de Playwright et des navigateurs
install_playwright() {
    print_step "Installation de Playwright et des navigateurs..."
    
    cd "$TESTS_DIR"
    
    # Installation des navigateurs Playwright
    print_info "Installation des navigateurs (cela peut prendre plusieurs minutes)..."
    npx playwright install
    
    # Installation des d√©pendances syst√®me
    if command -v apt-get &> /dev/null; then
        print_info "Installation des d√©pendances syst√®me (Ubuntu/Debian)..."
        npx playwright install-deps
    elif command -v yum &> /dev/null; then
        print_warning "Syst√®me Red Hat d√©tect√©. Installez manuellement les d√©pendances si n√©cessaire."
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        print_info "macOS d√©tect√©. Les d√©pendances syst√®me seront install√©es automatiquement."
    fi
    
    print_success "Playwright install√© avec succ√®s"
}

# Cr√©ation des fichiers de configuration
create_config_files() {
    print_step "Cr√©ation des fichiers de configuration..."
    
    cd "$TESTS_DIR"
    
    # Configuration TypeScript
    if [ ! -f "tsconfig.json" ]; then
        cat > tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2022", "DOM"],
    "module": "CommonJS",
    "moduleResolution": "node",
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "types": ["node", "@playwright/test"]
  },
  "include": ["tests/**/*", "playwright.config.ts", "*.setup.ts"],
  "exclude": ["node_modules", "test-results", "playwright-report"]
}
EOF
        print_success "tsconfig.json cr√©√©"
    fi
    
    # Configuration Playwright (version simplifi√©e pour le d√©marrage)
    if [ ! -f "playwright.config.ts" ]; then
        cat > playwright.config.ts << 'EOF'
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  fullyParallel: true,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  
  reporter: [
    ['html', { outputFolder: 'playwright-report' }],
    ['json', { outputFile: 'test-results/results.json' }]
  ],
  
  use: {
    baseURL: 'http://localhost:3000',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure'
  },

  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox', 
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    {
      name: 'mobile-chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'mobile-safari',
      use: { ...devices['iPhone 12'] },
    },
  ],

  webServer: {
    command: 'cd ../apps/math4child && npm run dev',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
  },
});
EOF
        print_success "playwright.config.ts cr√©√©"
    fi
    
    # Fichier .env pour les tests
    if [ ! -f ".env" ]; then
        cat > .env << 'EOF'
# Configuration des tests Math4Child
BASE_URL=http://localhost:3000
NODE_ENV=test
HEADLESS=true
TIMEOUT=30000

# Langues √† tester en priorit√©
TEST_LANGUAGES=en,fr,es,de,ar,zh

# Configuration CI/CD
CI=false
EOF
        print_success ".env cr√©√©"
    fi
    
    # GitIgnore pour les tests
    if [ ! -f ".gitignore" ]; then
        cat > .gitignore << 'EOF'
# Test Results
test-results/
playwright-report/
coverage/

# Dependencies
node_modules/
*.log

# Environment
.env.local

# Playwright
/playwright/.cache/
EOF
        print_success ".gitignore cr√©√©"
    fi
}

# Cr√©ation d'un test de base
create_sample_test() {
    print_step "Cr√©ation d'un test de d√©monstration..."
    
    cd "$TESTS_DIR"
    mkdir -p tests
    
    if [ ! -f "tests/math4child-basic.spec.ts" ]; then
        cat > tests/math4child-basic.spec.ts << 'EOF'
import { test, expect } from '@playwright/test';

test.describe('Math4Child - Tests de base', () => {
  
  test('Page d\'accueil se charge correctement', async ({ page }) => {
    await page.goto('/');
    
    // V√©rifier que Math4Child est dans le titre
    await expect(page.locator('h1')).toContainText(/Math4Child/i);
    
    // V√©rifier la pr√©sence du s√©lecteur de langues
    await expect(page.locator('select').first()).toBeVisible();
    
    // V√©rifier les statistiques
    await expect(page.locator(':text("10K+")')).toBeVisible();
    await expect(page.locator(':text("500+")')).toBeVisible();
    await expect(page.locator(':text("20")')).toBeVisible();
    await expect(page.locator(':text("98%")')).toBeVisible();
  });
  
  test('Changement de langue vers le fran√ßais', async ({ page }) => {
    await page.goto('/');
    
    // Changer vers le fran√ßais
    const languageSelector = page.locator('select').first();
    await languageSelector.selectOption('fr');
    
    // Attendre la traduction
    await page.waitForTimeout(1000);
    
    // V√©rifier la pr√©sence de contenu fran√ßais
    await expect(page.locator('body')).toContainText(/math√©matiques|fran√ßais/i);
  });
  
  test('Navigation vers les niveaux', async ({ page }) => {
    await page.goto('/');
    
    // V√©rifier la pr√©sence des niveaux
    const levels = ['beginner', 'elementary', 'intermediate', 'advanced', 'expert'];
    
    for (const level of levels) {
      const levelElement = page.locator(`[data-testid="level-${level}"], .level-${level}`).first();
      if (await levelElement.isVisible()) {
        await expect(levelElement).toBeVisible();
      }
    }
  });

});
EOF
        print_success "Test de d√©monstration cr√©√©"
    fi
}

# Cr√©ation du Makefile
create_makefile() {
    print_step "Cr√©ation du Makefile..."
    
    cd "$TESTS_DIR"
    
    if [ ! -f "Makefile" ]; then
        cat > Makefile << 'EOF'
.PHONY: help test test-headed test-mobile test-i18n clean install

help: ## Afficher cette aide
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## Installer les d√©pendances
	npm install
	npx playwright install

test: ## Lancer tous les tests
	npm run test

test-headed: ## Tests avec interface graphique
	npm run test:headed

test-debug: ## Tests en mode debug
	npm run test:debug

test-ui: ## Interface Playwright UI
	npm run test:ui

test-mobile: ## Tests mobile uniquement
	npm run test:mobile

test-i18n: ## Tests multilingues
	npm run test:i18n

test-performance: ## Tests de performance
	npm run test:performance

test-smoke: ## Tests critiques uniquement
	npm run test:smoke

report: ## Voir le rapport de tests
	npm run test:report

clean: ## Nettoyer les r√©sultats
	npm run clean

start-app: ## D√©marrer Math4Child
	cd ../apps/math4child && npm run dev
EOF
        print_success "Makefile cr√©√©"
    fi
}

# Test de validation de l'installation
validate_installation() {
    print_step "Validation de l'installation..."
    
    cd "$TESTS_DIR"
    
    # V√©rifier que Playwright est install√©
    if npx playwright --version &> /dev/null; then
        print_success "Playwright $(npx playwright --version) install√©"
    else
        print_error "Probl√®me avec l'installation de Playwright"
        exit 1
    fi
    
    # V√©rifier les navigateurs
    print_info "V√©rification des navigateurs install√©s..."
    if npx playwright install-deps --dry-run &> /dev/null; then
        print_success "Navigateurs Playwright disponibles"
    fi
    
    # Test de configuration
    if npx playwright test --dry-run &> /dev/null 2>&1; then
        print_success "Configuration Playwright valide"
    else
        print_warning "Probl√®me potentiel avec la configuration (normal si l'app n'est pas d√©marr√©e)"
    fi
    
    print_success "Installation valid√©e avec succ√®s"
}

# Affichage des instructions finales
show_final_instructions() {
    echo ""
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                                                            ‚ïë${NC}"
    echo -e "${CYAN}‚ïë  üéâ INSTALLATION TERMIN√âE AVEC SUCC√àS ! üéâ                ‚ïë${NC}"
    echo -e "${CYAN}‚ïë                                                            ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    echo -e "${GREEN}üìã PROCHAINES √âTAPES :${NC}"
    echo ""
    
    echo -e "${BLUE}1. D√©marrer l'application Math4Child :${NC}"
    echo -e "   ${YELLOW}cd ../apps/math4child${NC}"
    echo -e "   ${YELLOW}npm install && npm run dev${NC}"
    echo ""
    
    echo -e "${BLUE}2. Lancer les tests (dans un autre terminal) :${NC}"
    echo -e "   ${YELLOW}cd tests${NC}"
    echo -e "   ${YELLOW}make test${NC}                    # Tous les tests"
    echo -e "   ${YELLOW}make test-headed${NC}             # Avec interface graphique"
    echo -e "   ${YELLOW}make test-ui${NC}                 # Interface Playwright UI"
    echo ""
    
    echo -e "${BLUE}3. Tests sp√©cialis√©s :${NC}"
    echo -e "   ${YELLOW}make test-mobile${NC}             # Tests mobile"
    echo -e "   ${YELLOW}make test-i18n${NC}               # Tests multilingues"
    echo -e "   ${YELLOW}make test-performance${NC}        # Tests de performance"
    echo ""
    
    echo -e "${BLUE}4. Voir les r√©sultats :${NC}"
    echo -e "   ${YELLOW}make report${NC}                  # Rapport HTML interactif"
    echo ""
    
    echo -e "${GREEN}üìö RESSOURCES UTILES :${NC}"
    echo -e "   ‚Ä¢ Documentation Playwright : ${CYAN}https://playwright.dev/${NC}"
    echo -e "   ‚Ä¢ Tests Math4Child : ${CYAN}$TESTS_DIR/tests/${NC}"
    echo -e "   ‚Ä¢ Configuration : ${CYAN}$TESTS_DIR/playwright.config.ts${NC}"
    echo ""
    
    echo -e "${GREEN}üÜò AIDE :${NC}"
    echo -e "   ${YELLOW}make help${NC}                    # Liste des commandes"
    echo -e "   ${YELLOW}npx playwright --help${NC}        # Aide Playwright"
    echo ""
    
    echo -e "${PURPLE}‚ú® L'application Math4Child est maintenant pr√™te pour les tests E2E !${NC}"
    echo -e "${PURPLE}   Tests support√©s : 20 langues ‚Ä¢ 5 niveaux ‚Ä¢ Web/Mobile/Tablette${NC}"
    echo ""
}

# Fonction principale
main() {
    print_header
    
    echo -e "${BLUE}Ce script va installer la suite compl√®te de tests E2E pour Math4Child :${NC}"
    echo ""
    echo -e "üì¶ Installation de Playwright et d√©pendances"
    echo -e "üåê Configuration pour 3 navigateurs (Chrome, Firefox, Safari)"
    echo -e "üì± Support mobile et tablette"
    echo -e "üåç Tests multilingues (20 langues)" 
    echo -e "‚ö° Tests de performance et accessibilit√©"
    echo -e "üîß Configuration CI/CD et Docker"
    echo ""
    
    read -p "Continuer avec l'installation ? (Y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        print_info "Installation annul√©e."
        exit 0
    fi
    
    # √âtapes d'installation
    check_prerequisites
    create_test_structure
    install_dependencies
    install_playwright
    create_config_files
    create_sample_test
    create_makefile
    validate_installation
    show_final_instructions
}

# Gestion des erreurs
trap 'print_error "Une erreur est survenue. Installation interrompue."; exit 1' ERR

# Lancement du script
main "$@"