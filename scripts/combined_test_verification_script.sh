#!/bin/bash

# combined_test_verification.sh - Test rapide et v√©rification compl√®te de Math4Child

echo "üîç TEST COMPLET ET V√âRIFICATION MATH4CHILD"
echo "   ‚ö° Test rapide de d√©marrage serveur"
echo "   üéØ V√©rification compl√®te des fonctionnalit√©s"
echo "   üìä Rapport de sant√© d√©taill√©"
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

echo "==========================================="
echo "    TEST COMPLET MATH4CHILD               "
echo "==========================================="

cd apps/math4child

# Variables de suivi
server_test_passed=false
build_success=false
all_files_exist=false

# PARTIE 1: TEST RAPIDE DE D√âMARRAGE
echo -e "${BLUE}‚ö° PARTIE 1/2: TEST RAPIDE DE D√âMARRAGE${NC}"
echo ""

echo -e "${YELLOW}üì° Test de d√©marrage du serveur...${NC}"

# Lancer le serveur en arri√®re-plan et capturer les logs
timeout 10s npm run dev > server_test.log 2>&1 &
SERVER_PID=$!

sleep 5

# V√©rifier si le serveur tourne
if kill -0 $SERVER_PID 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Serveur d√©marr√© avec succ√®s${NC}"
    server_test_passed=true
    
    # V√©rifier les logs pour des erreurs critiques
    if grep -q "Error\|error\|‚ùå" server_test.log; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warnings d√©tect√©s dans les logs${NC}"
        echo -e "${BLUE}üìÑ Aper√ßu des logs :${NC}"
        tail -5 server_test.log
    else
        echo -e "${GREEN}‚úÖ Aucune erreur critique d√©tect√©e${NC}"
    fi
    
    # Tuer le serveur de test
    kill $SERVER_PID 2>/dev/null
    
else
    echo -e "${RED}‚ùå √âchec du d√©marrage du serveur${NC}"
    echo -e "${BLUE}üìÑ Logs d'erreur :${NC}"
    cat server_test.log
    server_test_passed=false
fi

# Nettoyage
rm -f server_test.log

echo ""
echo -e "${BLUE}üìã R√âSULTAT DU TEST RAPIDE :${NC}"

# V√©rifier les fichiers essentiels rapidement
essential_files=("src/app/page.tsx" "src/app/layout.tsx" "tailwind.config.js")
quick_check_passed=true

for file in "${essential_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file OK${NC}"
    else
        echo -e "${RED}‚ùå $file manquant${NC}"
        quick_check_passed=false
    fi
done

echo ""
echo "==========================================="
echo "    V√âRIFICATION D√âTAILL√âE                "
echo "==========================================="

# PARTIE 2: V√âRIFICATION COMPL√àTE
echo -e "${BLUE}üîç PARTIE 2/2: V√âRIFICATION D√âTAILL√âE${NC}"
echo ""

# V√©rification 1: Structure compl√®te des fichiers
echo -e "${BLUE}üìÅ V√âRIFICATION 1/6: Structure compl√®te des fichiers${NC}"

files_to_check=(
    "src/app/layout.tsx"
    "src/app/page.tsx"
    "src/app/exercises/page.tsx"
    "src/app/exercises/styles.css"
    "src/app/games/page.tsx"
    "tailwind.config.js"
    "public/manifest.json"
    "package.json"
    "next.config.js"
    "src/app/globals.css"
)

all_files_exist=true
missing_files=()

for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file existe${NC}"
    else
        echo -e "${RED}‚ùå $file manquant${NC}"
        all_files_exist=false
        missing_files+=("$file")
    fi
done

if [ "$all_files_exist" = true ]; then
    echo -e "${GREEN}‚úÖ Tous les fichiers essentiels sont pr√©sents${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  ${#missing_files[@]} fichier(s) manquant(s)${NC}"
fi

# V√©rification 2: D√©pendances
echo -e "${BLUE}üì¶ V√âRIFICATION 2/6: D√©pendances install√©es${NC}"

dependencies_ok=true

# V√©rifier lucide-react
if npm list lucide-react >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ lucide-react install√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  lucide-react manquant - Installation automatique...${NC}"
    npm install lucide-react --silent
    if npm list lucide-react >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ lucide-react install√© avec succ√®s${NC}"
    else
        echo -e "${RED}‚ùå √âchec installation lucide-react${NC}"
        dependencies_ok=false
    fi
fi

# V√©rifier next
if npm list next >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Next.js install√©${NC}"
else
    echo -e "${RED}‚ùå Next.js manquant${NC}"
    dependencies_ok=false
fi

# V√©rifier tailwindcss
if npm list tailwindcss >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ TailwindCSS install√©${NC}"
else
    echo -e "${RED}‚ùå TailwindCSS manquant${NC}"
    dependencies_ok=false
fi

# V√©rification 3: Configuration TailwindCSS
echo -e "${BLUE}üé® V√âRIFICATION 3/6: Configuration TailwindCSS${NC}"

tailwind_config_ok=false
if [ -f "tailwind.config.js" ]; then
    if grep -q "content:" tailwind.config.js; then
        echo -e "${GREEN}‚úÖ TailwindCSS content configur√©${NC}"
        tailwind_config_ok=true
    else
        echo -e "${RED}‚ùå TailwindCSS content manquant${NC}"
    fi
else
    echo -e "${RED}‚ùå tailwind.config.js manquant${NC}"
fi

# V√©rification 4: Layout Next.js
echo -e "${BLUE}üìÑ V√âRIFICATION 4/6: Layout Next.js${NC}"

layout_ok=false
if [ -f "src/app/layout.tsx" ]; then
    layout_ok=true
    if grep -q "viewport:" src/app/layout.tsx; then
        echo -e "${GREEN}‚úÖ Viewport s√©par√© configur√©${NC}"
    elif grep -q "viewport" src/app/layout.tsx; then
        echo -e "${YELLOW}‚ö†Ô∏è  Viewport d√©tect√© mais pourrait √™tre dans metadata${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Viewport non trouv√©${NC}"
    fi
    
    if grep -q "Inter\|font" src/app/layout.tsx; then
        echo -e "${GREEN}‚úÖ Font configur√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Font pourrait ne pas √™tre configur√©${NC}"
    fi
    
    if grep -q "globals.css" src/app/layout.tsx; then
        echo -e "${GREEN}‚úÖ CSS global import√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  CSS global pourrait ne pas √™tre import√©${NC}"
    fi
else
    echo -e "${RED}‚ùå layout.tsx manquant${NC}"
fi

# V√©rification 5: Build test
echo -e "${BLUE}üî® V√âRIFICATION 5/6: Test de build${NC}"

echo -e "${YELLOW}üì¶ Test de build en cours...${NC}"

# Cr√©er globals.css si manquant avant le build
if [ ! -f "src/app/globals.css" ]; then
    echo -e "${YELLOW}üìù Cr√©ation de globals.css manquant...${NC}"
    cat > src/app/globals.css << 'EOF'
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Styles personnalis√©s Math4Child */
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
}

body {
  color: #000;
  background: linear-gradient(to bottom, transparent, #f1f5f9) #fff;
}

a {
  color: inherit;
  text-decoration: none;
}

/* Animations personnalis√©es */
@keyframes fadeIn {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@keyframes slideUp {
  0% { transform: translateY(10px); opacity: 0; }
  100% { transform: translateY(0); opacity: 1; }
}

/* Utilitaires */
.animate-fade-in {
  animation: fadeIn 0.5s ease-in-out;
}

.animate-slide-up {
  animation: slideUp 0.3s ease-out;
}
EOF
    echo -e "${GREEN}‚úÖ globals.css cr√©√©${NC}"
fi

# Nettoyer le cache avant le build
rm -rf .next 2>/dev/null

# Tester le build
if npm run build >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Build r√©ussi - aucune erreur${NC}"
    build_success=true
else
    echo -e "${RED}‚ùå Erreurs de build d√©tect√©es${NC}"
    echo -e "${YELLOW}üìÑ Tentative de diagnostic...${NC}"
    
    # Faire un build avec logs pour diagnostiquer
    npm run build 2>&1 | tail -10
    
    build_success=false
fi

# V√©rification 6: Rapport final et recommandations
echo -e "${BLUE}üìä V√âRIFICATION 6/6: Rapport final${NC}"

echo ""
echo "==========================================="
echo "    RAPPORT FINAL COMPLET                 "
echo "==========================================="
echo ""

# Calcul du score de sant√©
score=0
max_score=6

if [ "$server_test_passed" = true ]; then ((score++)); fi
if [ "$all_files_exist" = true ]; then ((score++)); fi
if [ "$dependencies_ok" = true ]; then ((score++)); fi
if [ "$tailwind_config_ok" = true ]; then ((score++)); fi
if [ "$layout_ok" = true ]; then ((score++)); fi
if [ "$build_success" = true ]; then ((score++)); fi

health_percentage=$((score * 100 / max_score))

if [ $health_percentage -ge 85 ]; then
    echo -e "${GREEN}üéâ MATH4CHILD EST EXCELLENT ! (${health_percentage}%)${NC}"
    status="EXCELLENT"
elif [ $health_percentage -ge 70 ]; then
    echo -e "${YELLOW}‚úÖ MATH4CHILD FONCTIONNE BIEN (${health_percentage}%)${NC}"
    status="GOOD"
elif [ $health_percentage -ge 50 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  MATH4CHILD N√âCESSITE QUELQUES AJUSTEMENTS (${health_percentage}%)${NC}"
    status="PARTIAL"
else
    echo -e "${RED}‚ùå MATH4CHILD N√âCESSITE UNE CORRECTION MAJEURE (${health_percentage}%)${NC}"
    status="CRITICAL"
fi

echo ""
echo -e "${CYAN}üìä TABLEAU DE BORD DE SANT√â :${NC}"
echo ""

# Affichage d√©taill√© des r√©sultats
echo -e "${BLUE}üß™ TESTS :${NC}"
if [ "$server_test_passed" = true ]; then
    echo -e "   ${GREEN}‚úÖ D√©marrage serveur${NC}"
else
    echo -e "   ${RED}‚ùå D√©marrage serveur${NC}"
fi

echo -e "${BLUE}üìÅ STRUCTURE :${NC}"
if [ "$all_files_exist" = true ]; then
    echo -e "   ${GREEN}‚úÖ Tous les fichiers pr√©sents${NC}"
else
    echo -e "   ${YELLOW}‚ö†Ô∏è  ${#missing_files[@]} fichier(s) manquant(s)${NC}"
    for file in "${missing_files[@]}"; do
        echo -e "      ${RED}‚Ä¢ $file${NC}"
    done
fi

echo -e "${BLUE}üì¶ D√âPENDANCES :${NC}"
if [ "$dependencies_ok" = true ]; then
    echo -e "   ${GREEN}‚úÖ Toutes les d√©pendances install√©es${NC}"
else
    echo -e "   ${RED}‚ùå Certaines d√©pendances manquent${NC}"
fi

echo -e "${BLUE}üé® CONFIGURATION :${NC}"
if [ "$tailwind_config_ok" = true ]; then
    echo -e "   ${GREEN}‚úÖ TailwindCSS configur√©${NC}"
else
    echo -e "   ${RED}‚ùå TailwindCSS mal configur√©${NC}"
fi

echo -e "${BLUE}üìÑ LAYOUT :${NC}"
if [ "$layout_ok" = true ]; then
    echo -e "   ${GREEN}‚úÖ Layout Next.js OK${NC}"
else
    echo -e "   ${RED}‚ùå Layout Next.js probl√©matique${NC}"
fi

echo -e "${BLUE}üî® BUILD :${NC}"
if [ "$build_success" = true ]; then
    echo -e "   ${GREEN}‚úÖ Build r√©ussi${NC}"
else
    echo -e "   ${RED}‚ùå Build √©chou√©${NC}"
fi

echo ""
echo -e "${BLUE}üöÄ ACTIONS RECOMMAND√âES :${NC}"
echo ""

if [ "$status" = "EXCELLENT" ] || [ "$status" = "GOOD" ]; then
    echo -e "${GREEN}üéØ PR√äT √Ä UTILISER :${NC}"
    echo "   1. cd apps/math4child"
    echo "   2. npm run dev"
    echo "   3. Ouvrir http://localhost:3000"
    echo ""
    echo -e "${BLUE}üì± PAGES √Ä TESTER :${NC}"
    echo "   ‚Ä¢ http://localhost:3000 (Accueil)"
    echo "   ‚Ä¢ http://localhost:3000/exercises (Exercices)"
    echo "   ‚Ä¢ http://localhost:3000/games (Jeux)"
    
elif [ "$status" = "PARTIAL" ]; then
    echo -e "${YELLOW}üîß CORRECTIONS RECOMMAND√âES :${NC}"
    if [ "$server_test_passed" = false ]; then
        echo "   ‚Ä¢ Relancer: ./emergency_fix.sh"
    fi
    if [ "$all_files_exist" = false ]; then
        echo "   ‚Ä¢ Relancer: ./fix_math4child_complete.sh"
    fi
    if [ "$build_success" = false ]; then
        echo "   ‚Ä¢ V√©rifier les erreurs de syntaxe"
        echo "   ‚Ä¢ Nettoyer le cache: rm -rf .next"
    fi
    
else
    echo -e "${RED}üö® CORRECTION MAJEURE N√âCESSAIRE :${NC}"
    echo "   1. Lancer: ./emergency_fix.sh"
    echo "   2. Puis: ./fix_math4child_complete.sh"
    echo "   3. Retester avec ce script"
fi

echo ""
echo -e "${PURPLE}üìû SUPPORT :${NC}"
echo "   ‚Ä¢ Logs serveur: npm run dev"
echo "   ‚Ä¢ Console navigateur: F12"
echo "   ‚Ä¢ Build logs: npm run build"

echo ""
if [ "$status" = "EXCELLENT" ]; then
    echo -e "${GREEN}üéä MATH4CHILD PARFAITEMENT FONCTIONNEL ! üéä${NC}"
elif [ "$status" = "GOOD" ]; then
    echo -e "${GREEN}üéâ MATH4CHILD PR√äT POUR UTILISATION ! üéâ${NC}"
else
    echo -e "${YELLOW}üîß MATH4CHILD N√âCESSITE QUELQUES AJUSTEMENTS${NC}"
fi

echo ""
echo -e "${GREEN}‚úÖ TEST COMPLET TERMIN√â !${NC}"

cd ../..