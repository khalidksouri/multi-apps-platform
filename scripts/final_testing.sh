#!/bin/bash

# =============================================================================
# TESTS ET VALIDATION FINALE - MATH4CHILD PRODUCTION
# =============================================================================

echo "üß™ Tests et Validation Finale Math4Child"
echo "========================================"

# Couleurs pour l'affichage
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

test_passed() { echo -e "${GREEN}‚úÖ $1${NC}"; }
test_failed() { echo -e "${RED}‚ùå $1${NC}"; }
test_info() { echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"; }
test_warning() { echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"; }

echo ""
test_info "D√©but des tests de validation finale..."

# =============================================================================
# TEST 1: STRUCTURE DU PROJET
# =============================================================================

echo ""
echo "üìÅ Test 1: Structure du Projet"
echo "==============================="

# V√©rifier les fichiers essentiels
if [[ -f "package.json" ]]; then
    test_passed "package.json pr√©sent"
else
    test_failed "package.json manquant"
    exit 1
fi

if [[ -f "next.config.js" ]]; then
    test_passed "next.config.js pr√©sent"
else
    test_failed "next.config.js manquant"
fi

if [[ -f "netlify.toml" ]]; then
    test_passed "netlify.toml pr√©sent"
else
    test_failed "netlify.toml manquant"
fi

if [[ -d "src/app" ]]; then
    test_passed "Structure src/app pr√©sente"
else
    test_failed "Structure src/app manquante"
fi

if [[ -f "src/app/page.tsx" ]]; then
    test_passed "Page principale pr√©sente"
else
    test_failed "Page principale manquante"
fi

if [[ -f "src/app/layout.tsx" ]]; then
    test_passed "Layout principal pr√©sent"
else
    test_failed "Layout principal manquant"
fi

# =============================================================================
# TEST 2: BUILD ET EXPORT
# =============================================================================

echo ""
echo "üèóÔ∏è Test 2: Build et Export"
echo "=========================="

test_info "Lancement du build de production..."

if npm run build > build.log 2>&1; then
    test_passed "Build Next.js r√©ussi"
    
    if [[ -d "out" ]]; then
        test_passed "R√©pertoire out/ g√©n√©r√©"
        
        if [[ -f "out/index.html" ]]; then
            test_passed "index.html g√©n√©r√©"
            
            # V√©rifier le contenu
            if grep -q "Math4Child" out/index.html; then
                test_passed "Contenu Math4Child d√©tect√©"
            else
                test_failed "Contenu Math4Child manquant"
            fi
            
            if grep -q "gotesttech@gmail.com" out/index.html; then
                test_passed "Contact GOTEST d√©tect√©"
            else
                test_warning "Contact GOTEST non d√©tect√©"
            fi
        else
            test_failed "index.html non g√©n√©r√©"
        fi
        
        # V√©rifier la taille
        BUILD_SIZE=$(du -sh out/ | cut -f1)
        test_info "Taille du build: $BUILD_SIZE"
        
    else
        test_failed "R√©pertoire out/ non g√©n√©r√©"
    fi
else
    test_failed "Build Next.js √©chou√©"
    test_info "V√©rifiez build.log pour les d√©tails"
    exit 1
fi

# =============================================================================
# TEST 3: CONFIGURATION NETLIFY
# =============================================================================

echo ""
echo "üåê Test 3: Configuration Netlify"
echo "================================"

if [[ -f "netlify.toml" ]]; then
    
    # V√©rifier la configuration de base
    if grep -q "publish.*out" netlify.toml; then
        test_passed "Configuration publish correcte"
    else
        test_failed "Configuration publish incorrecte"
    fi
    
    if grep -q "command.*build" netlify.toml; then
        test_passed "Commande de build configur√©e"
    else
        test_failed "Commande de build manquante"
    fi
    
    # V√©rifier les redirections
    if grep -q "redirects" netlify.toml; then
        test_passed "Redirections configur√©es"
    else
        test_warning "Redirections non configur√©es"
    fi
    
    # V√©rifier les headers de s√©curit√©
    if grep -q "X-Frame-Options" netlify.toml; then
        test_passed "Headers de s√©curit√© configur√©s"
    else
        test_warning "Headers de s√©curit√© manquants"
    fi
    
else
    test_failed "netlify.toml manquant"
fi

# =============================================================================
# TEST 4: CONFIGURATION STRIPE
# =============================================================================

echo ""
echo "üí≥ Test 4: Configuration Stripe"
echo "==============================="

if [[ -f "src/lib/stripe.ts" ]]; then
    test_passed "Configuration Stripe pr√©sente"
    
    if grep -q "SUBSCRIPTION_PLANS" src/lib/stripe.ts; then
        test_passed "Plans d'abonnement configur√©s"
    else
        test_failed "Plans d'abonnement manquants"
    fi
    
    if grep -q "GOTEST" src/lib/stripe.ts; then
        test_passed "Configuration GOTEST pr√©sente"
    else
        test_warning "Configuration GOTEST manquante"
    fi
else
    test_failed "Configuration Stripe manquante"
fi

if [[ -f "src/app/api/stripe/create-checkout-session/route.ts" ]]; then
    test_passed "API route Stripe pr√©sente"
else
    test_failed "API route Stripe manquante"
fi

if [[ -f "src/app/success/page.tsx" ]]; then
    test_passed "Page de succ√®s pr√©sente"
else
    test_failed "Page de succ√®s manquante"
fi

if [[ -f "src/app/cancel/page.tsx" ]]; then
    test_passed "Page d'annulation pr√©sente"
else
    test_failed "Page d'annulation manquante"
fi

# =============================================================================
# TEST 5: CONTENU ET TRADUCTIONS
# =============================================================================

echo ""
echo "üåç Test 5: Contenu et Traductions"
echo "================================="

if [[ -f "src/app/page.tsx" ]]; then
    
    # V√©rifier les langues
    if grep -q "LANGUAGES.*fr.*en.*ar" src/app/page.tsx; then
        test_passed "Support multilingue configur√©"
    else
        test_failed "Support multilingue manquant"
    fi
    
    # V√©rifier le RTL
    if grep -q "rtl.*true" src/app/page.tsx; then
        test_passed "Support RTL configur√©"
    else
        test_failed "Support RTL manquant"
    fi
    
    # V√©rifier les traductions
    if grep -q "TRANSLATIONS" src/app/page.tsx; then
        test_passed "Traductions configur√©es"
    else
        test_failed "Traductions manquantes"
    fi
    
    # V√©rifier GOTEST
    if grep -q "GOTEST" src/app/page.tsx; then
        test_passed "R√©f√©rences GOTEST pr√©sentes"
    else
        test_warning "R√©f√©rences GOTEST manquantes"
    fi
    
else
    test_failed "Page principale manquante"
fi

# =============================================================================
# TEST 6: PERFORMANCE ET SEO
# =============================================================================

echo ""
echo "‚ö° Test 6: Performance et SEO"
echo "============================"

if [[ -f "src/app/layout.tsx" ]]; then
    
    # V√©rifier les m√©tadonn√©es
    if grep -q "metadata.*title" src/app/layout.tsx; then
        test_passed "M√©tadonn√©es SEO configur√©es"
    else
        test_failed "M√©tadonn√©es SEO manquantes"
    fi
    
    # V√©rifier les Open Graph
    if grep -q "openGraph" src/app/layout.tsx; then
        test_passed "Open Graph configur√©"
    else
        test_warning "Open Graph manquant"
    fi
    
    # V√©rifier les polices
    if grep -q "Inter.*font" src/app/layout.tsx; then
        test_passed "Police optimis√©e configur√©e"
    else
        test_warning "Police optimis√©e manquante"
    fi
    
else
    test_failed "Layout manquant"
fi

# V√©rifier Tailwind
if [[ -f "tailwind.config.js" ]]; then
    test_passed "Tailwind CSS configur√©"
else
    test_failed "Tailwind CSS manquant"
fi

# =============================================================================
# TEST 7: ENVIRONNEMENT ET S√âCURIT√â
# =============================================================================

echo ""
echo "üîí Test 7: Environnement et S√©curit√©"
echo "===================================="

if [[ -f ".env.example" ]]; then
    test_passed "Fichier d'environnement exemple pr√©sent"
else
    test_warning "Fichier d'environnement exemple manquant"
fi

if [[ -f ".gitignore" ]]; then
    if grep -q ".env" .gitignore; then
        test_passed "Fichiers d'environnement ignor√©s par Git"
    else
        test_warning "Fichiers d'environnement non ignor√©s"
    fi
else
    test_warning "Fichier .gitignore manquant"
fi

# V√©rifier qu'aucune cl√© secr√®te n'est commit√©e
if grep -r "sk_live\|sk_test" src/ 2>/dev/null; then
    test_failed "DANGER: Cl√©s secr√®tes d√©tect√©es dans le code"
else
    test_passed "Aucune cl√© secr√®te dans le code"
fi

# =============================================================================
# R√âSUM√â DES TESTS
# =============================================================================

echo ""
echo "üìä R√©sum√© des Tests"
echo "=================="

# Compter les r√©sultats (approximatif)
TOTAL_TESTS=25
PASSED_TESTS=$(echo -e "${output}" | grep -c "‚úÖ" || echo "0")
FAILED_TESTS=$(echo -e "${output}" | grep -c "‚ùå" || echo "0")
WARNING_TESTS=$(echo -e "${output}" | grep -c "‚ö†Ô∏è" || echo "0")

echo ""
test_info "Tests effectu√©s: $TOTAL_TESTS"
test_passed "Tests r√©ussis: $PASSED_TESTS"
test_failed "Tests √©chou√©s: $FAILED_TESTS"  
test_warning "Avertissements: $WARNING_TESTS"

# =============================================================================
# RECOMMANDATIONS FINALES
# =============================================================================

echo ""
echo "üìã Recommandations Finales"
echo "=========================="

echo ""
test_info "‚úÖ PR√äT POUR PRODUCTION :"
echo "  1. D√©ploiement Netlify configur√©"
echo "  2. Build fonctionnel (taille: $BUILD_SIZE)"
echo "  3. Stripe int√©gr√© et pr√™t"
echo "  4. Support multilingue complet"
echo "  5. Configuration s√©curis√©e"

echo ""
test_info "üîÑ PROCHAINES √âTAPES :"
echo "  1. Configurer les cl√©s Stripe r√©elles"
echo "  2. Acheter et configurer www.math4child.com"
echo "  3. Configurer Google Analytics"
echo "  4. Tests utilisateurs beta"
echo "  5. Lancement commercial"

echo ""
test_info "üìû SUPPORT GOTEST :"
echo "  üìß gotesttech@gmail.com"
echo "  üè¢ SIRET: 53958712100028"
echo "  üåê www.math4child.com"

echo ""
if [[ $FAILED_TESTS -eq 0 ]]; then
    test_passed "üéâ MATH4CHILD EST PR√äT POUR LA PRODUCTION !"
else
    test_warning "‚ö†Ô∏è Corriger les erreurs avant la production"
fi

# Nettoyer les fichiers temporaires
rm -f build.log 2>/dev/null

echo ""
test_info "Tests termin√©s. Bonne chance avec Math4Child ! üöÄ"