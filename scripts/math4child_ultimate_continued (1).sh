<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[
              { 
                name: t.puzzleMath, 
                icon: 'üß©', 
                level: t.beginner,
                description: "R√©soudre des √©quations en assemblant les pi√®ces"
              },
              { 
                name: t.memoryMath, 
                icon: 'üß†', 
                level: t.intermediate,
                description: "M√©moriser et retrouver les bonnes r√©ponses"
              },
              { 
                name: t.quickMath, 
                icon: '‚ö°', 
                level: t.advanced,
                description: "Calculs rapides sous pression"
              },
              { 
                name: t.mixedExercises, 
                icon: 'üéØ', 
                level: t.expert,
                description: "Exercices vari√©s tous niveaux"
              }
            ].map((game, index) => (
              <div 
                key={index} 
                className="bg-white bg-opacity-20 backdrop-blur-lg rounded-xl p-6 hover:bg-opacity-30 transition-all cursor-pointer"
                data-testid={`game-${index}`}
              >
                <div className="text-4xl mb-4">{game.icon}</div>
                <h4 className="text-xl font-semibold mb-2">{game.name}</h4>
                <p className="text-sm opacity-75 mb-3">{game.level}</p>
                <p className="text-sm opacity-90">{game.description}</p>
              </div>
            ))}
          </div>
        </section>

        {/* Section Navigation vers Pricing */}
        <section className="text-center">
          <h3 className="text-3xl font-bold mb-4">{t.choosePlan}</h3>
          <p className="text-lg mb-8">D√©couvrez nos plans d'abonnement adapt√©s √† vos besoins</p>
          
          <a 
            href="/pricing"
            className="bg-purple-500 hover:bg-purple-600 text-white px-8 py-4 rounded-full text-lg font-semibold transition-colors inline-block"
            data-testid="pricing-link"
          >
            Voir les Prix
          </a>
        </section>

        {/* Indicateur de langue RTL */}
        {isRTL && (
          <div className="fixed bottom-4 left-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded-lg text-sm">
            {t.rtlOptimized}
          </div>
        )}
      </div>
    </main>
  )
}
EOF

    # Page pricing
    cat > "src/app/pricing/page.tsx" << 'EOF'
import PricingPlansRTL from '@/components/pricing/PricingPlansRTL'

export const metadata = {
  title: 'Plans et Prix - Math4Child',
  description: 'Choisissez le plan parfait pour l\'apprentissage des math√©matiques',
  keywords: 'prix, plans, abonnement, math√©matiques, √©ducation',
}

export default function PricingPage() {
  return <PricingPlansRTL />
}
EOF

    log_success "Application Next.js compl√®te cr√©√©e"
}

# ===================================================================
# üß™ TESTS PLAYWRIGHT EXHAUSTIFS
# ===================================================================

create_comprehensive_tests() {
    log_header "CR√âATION DES TESTS PLAYWRIGHT EXHAUSTIFS"
    
    # Utilitaires de test
    cat > "tests/utils/test-utils.ts" << 'EOF'
import { Page, expect, Locator } from '@playwright/test'

export class Math4ChildTestHelper {
  constructor(private page: Page) {}

  // Navigation avec support RTL
  async goto(path: string = '/') {
    await this.page.goto(path)
    await this.page.waitForLoadState('domcontentloaded')
  }

  // Changer la langue avec validation
  async changeLanguage(languageCode: string) {
    await this.page.selectOption('[data-testid="language-selector"]', languageCode)
    await this.page.waitForTimeout(1000) // Attendre la transition
    
    // V√©rifier que la langue a bien chang√©
    const htmlLang = await this.page.getAttribute('html', 'lang')
    expect(htmlLang).toBe(languageCode)
  }

  // Forcer RTL pour les tests
  async forceRTL() {
    await this.page.evaluate(() => {
      document.documentElement.dir = 'rtl'
      document.documentElement.lang = 'ar'
      localStorage.setItem('math4child_language', 'ar')
    })
    await this.page.reload({ waitUntil: 'domcontentloaded' })
  }

  // V√©rifier l'affichage RTL
  async verifyRTLLayout() {
    const direction = await this.page.getAttribute('html', 'dir')
    expect(direction).toBe('rtl')
    
    const lang = await this.page.getAttribute('html', 'lang')
    expect(lang).toBe('ar')
  }

  // Attendre l'√©l√©ment avec retry
  async waitForElementWithRetry(selector: string, timeout: number = 30000): Promise<Locator> {
    let attempts = 0
    const maxAttempts = 3
    
    while (attempts < maxAttempts) {
      try {
        const element = this.page.locator(selector)
        await element.waitFor({ timeout: timeout / maxAttempts })
        return element
      } catch (error) {
        attempts++
        if (attempts === maxAttempts) throw error
        await this.page.waitForTimeout(1000)
      }
    }
    
    throw new Error(`Element ${selector} not found after ${maxAttempts} attempts`)
  }

  // V√©rifier que le texte est en arabe
  async verifyArabicText(selector: string) {
    const element = await this.waitForElementWithRetry(selector)
    const text = await element.textContent()
    
    // Pattern simple pour d√©tecter l'arabe
    const arabicPattern = /[\u0600-\u06FF]/
    expect(text).toMatch(arabicPattern)
  }

  // Screenshot avec timestamp
  async takeTimestampedScreenshot(name: string) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    await this.page.screenshot({ 
      path: `test-results/screenshots/${name}_${timestamp}.png`,
      fullPage: true 
    })
  }

  // V√©rifier la performance
  async checkPerformance() {
    const performanceEntries = await this.page.evaluate(() => {
      return JSON.stringify(window.performance.getEntriesByType('navigation'))
    })
    
    const entries = JSON.parse(performanceEntries)
    if (entries.length > 0) {
      const loadTime = entries[0].loadEventEnd - entries[0].navigationStart
      expect(loadTime).toBeLessThan(5000) // Moins de 5 secondes
    }
  }

  // V√©rifier l'accessibilit√© de base
  async checkBasicAccessibility() {
    // V√©rifier que tous les boutons ont un texte ou aria-label
    const buttons = this.page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const text = await button.textContent()
      const ariaLabel = await button.getAttribute('aria-label')
      
      expect(text || ariaLabel).toBeTruthy()
    }
  }

  // Simuler une connexion lente
  async simulateSlowConnection() {
    await this.page.route('**/*', route => {
      setTimeout(() => route.continue(), 500) // 500ms de d√©lai
    })
  }

  // Nettoyer le localStorage
  async clearStorage() {
    await this.page.evaluate(() => {
      localStorage.clear()
      sessionStorage.clear()
    })
  }
}

// Export des s√©lecteurs communs
export const SELECTORS = {
  languageSelector: '[data-testid="language-selector"]',
  appTitle: '[data-testid="app-title"]',
  startFreeButton: '[data-testid="start-free"]',
  pricingLink: '[data-testid="pricing-link"]',
  gameCards: '[data-testid^="game-"]',
  planButtons: '[data-testid^="plan-"]',
  trialButton: '[data-testid="trial-button"]'
} as const

// Export des constantes de test
export const TEST_CONSTANTS = {
  DEFAULT_TIMEOUT: 30000,
  NAVIGATION_TIMEOUT: 60000,
  ANIMATION_DELAY: 500,
  SUPPORTED_LANGUAGES: ['fr', 'en', 'es', 'de', 'ar', 'zh', 'ja', 'it', 'pt', 'fi']
} as const
EOF

    # Tests de traduction exhaustifs
    cat > "tests/specs/translation/translation-exhaustive.spec.ts" << 'EOF'
import { test, expect } from '@playwright/test'
import { Math4ChildTestHelper, SELECTORS, TEST_CONSTANTS } from '../../utils/test-utils'

test.describe('Math4Child - Tests de Traduction Exhaustifs', () => {
  let testHelper: Math4ChildTestHelper

  test.beforeEach(async ({ page }) => {
    testHelper = new Math4ChildTestHelper(page)
    await testHelper.goto()
  })

  test.afterEach(async ({ page }) => {
    await testHelper.clearStorage()
  })

  // Test pour chaque langue support√©e
  for (const langCode of TEST_CONSTANTS.SUPPORTED_LANGUAGES) {
    test(`Interface compl√®te en ${langCode} @translation`, async ({ page }) => {
      console.log(`üåç Test de la langue: ${langCode}`)
      
      // Changer la langue
      await testHelper.changeLanguage(langCode)
      
      // V√©rifier que les √©l√©ments principaux sont traduits
      await expect(page.locator(SELECTORS.appTitle)).toBeVisible()
      
      // V√©rifier les boutons principaux
      await expect(page.locator(SELECTORS.startFreeButton)).toBeVisible()
      
      // Pour l'arabe, v√©rifier RTL
      if (langCode === 'ar') {
        await testHelper.verifyRTLLayout()
        await testHelper.verifyArabicText('h2')
      }
      
      // V√©rifier la persistance
      await page.reload()
      const persistedLang = await page.getAttribute('html', 'lang')
      expect(persistedLang).toBe(langCode)
      
      console.log(`‚úÖ Langue ${langCode} valid√©e`)
    })
  }

  test('S√©lecteur de langue fonctionnel @translation', async ({ page }) => {
    const selector = page.locator(SELECTORS.languageSelector)
    
    // V√©rifier que le s√©lecteur est visible
    await expect(selector).toBeVisible()
    
    // Tester plusieurs changements rapides
    await testHelper.changeLanguage('en')
    await testHelper.changeLanguage('fr')
    await testHelper.changeLanguage('ar')
    
    // V√©rifier l'√©tat final
    const finalLang = await page.getAttribute('html', 'lang')
    expect(finalLang).toBe('ar')
    
    console.log('‚úÖ S√©lecteur de langue test√©')
  })

  test('Navigation multilingue avec persistance @translation', async ({ page }) => {
    // Changer vers l'arabe
    await testHelper.changeLanguage('ar')
    
    // Naviguer vers pricing
    await page.click(SELECTORS.pricingLink)
    await page.waitForURL('**/pricing')
    
    // V√©rifier que la langue est conserv√©e
    const pricingLang = await page.getAttribute('html', 'lang')
    expect(pricingLang).toBe('ar')
    
    // V√©rifier RTL sur la page pricing
    await testHelper.verifyRTLLayout()
    
    console.log('‚úÖ Navigation multilingue test√©e')
  })

  test('Performance changement de langue @translation @performance', async ({ page }) => {
    const startTime = Date.now()
    
    // Effectuer plusieurs changements de langue
    for (const lang of ['en', 'fr', 'ar', 'es']) {
      await testHelper.changeLanguage(lang)
    }
    
    const totalTime = Date.now() - startTime
    expect(totalTime).toBeLessThan(10000) // Moins de 10 secondes pour 4 changements
    
    console.log(`‚ö° Performance: ${totalTime}ms pour 4 changements`)
  })
})

test.setTimeout(90000)
EOF

    # Tests RTL sp√©cialis√©s
    cat > "tests/specs/rtl/rtl-comprehensive.spec.ts" << 'EOF'
import { test, expect } from '@playwright/test'
import { Math4ChildTestHelper, SELECTORS } from '../../utils/test-utils'

test.describe('Math4Child - Tests RTL Complets', () => {
  let testHelper: Math4ChildTestHelper

  test.beforeEach(async ({ page }) => {
    testHelper = new Math4ChildTestHelper(page)
    await testHelper.goto()
    await testHelper.forceRTL()
  })

  test('Interface RTL page d\'accueil @rtl', async ({ page }) => {
    // V√©rifier l'application RTL
    await testHelper.verifyRTLLayout()
    
    // V√©rifier les √©l√©ments principaux en arabe
    await testHelper.verifyArabicText('h2') // Hero title
    
    // V√©rifier la direction des √©l√©ments
    const mainContainer = page.locator('main')
    const direction = await mainContainer.getAttribute('dir')
    expect(direction).toBe('rtl')
    
    console.log('‚úÖ Interface RTL page d\'accueil valid√©e')
  })

  test('Interface RTL page pricing @rtl @pricing', async ({ page }) => {
    // Aller √† la page pricing
    await page.goto('/pricing')
    await testHelper.verifyRTLLayout()
    
    // V√©rifier les cards de pricing en RTL
    await expect(page.locator('.pricing-card').first()).toBeVisible()
    
    // V√©rifier l'alignement des features
    const featureItems = page.locator('.feature-item')
    const itemCount = await featureItems.count()
    expect(itemCount).toBeGreaterThan(0)
    
    // V√©rifier les boutons de s√©lection de plan
    const planButtons = page.locator('[data-testid^="plan-"]')
    const buttonCount = await planButtons.count()
    expect(buttonCount).toBeGreaterThanOrEqual(3)
    
    console.log('‚úÖ Interface RTL pricing valid√©e')
  })

  test('Navigation RTL @rtl', async ({ page }) => {
    // Test de navigation avec RTL
    const links = page.locator('a')
    const linkCount = await links.count()
    
    // V√©rifier que les liens sont fonctionnels
    if (linkCount > 0) {
      const firstLink = links.first()
      await expect(firstLink).toBeVisible()
    }
    
    console.log('‚úÖ Navigation RTL test√©e')
  })

  test('Responsive RTL mobile @rtl @responsive', async ({ page }) => {
    // Simuler un mobile
    await page.setViewportSize({ width: 375, height: 667 })
    
    // V√©rifier que RTL fonctionne sur mobile
    await testHelper.verifyRTLLayout()
    
    // V√©rifier que les √©l√©ments sont visibles
    await expect(page.locator(SELECTORS.appTitle)).toBeVisible()
    
    console.log('‚úÖ RTL mobile test√©')
  })

  test('Contr√¥les RTL jeux @rtl @games', async ({ page }) => {
    // V√©rifier les cartes de jeux en RTL
    const gameCards = page.locator(SELECTORS.gameCards)
    const cardCount = await gameCards.count()
    expect(cardCount).toBe(4) // 4 jeux d√©finis
    
    // V√©rifier que chaque carte est visible et cliquable
    for (let i = 0; i < cardCount; i++) {
      const card = gameCards.nth(i)
      await expect(card).toBeVisible()
      
      // V√©rifier que le hover fonctionne
      await card.hover()
      await page.waitForTimeout(200)
    }
    
    console.log('‚úÖ Contr√¥les RTL jeux test√©s')
  })
})

test.setTimeout(90000)
EOF

    # Tests responsive
    cat > "tests/specs/responsive/responsive-comprehensive.spec.ts" << 'EOF'
import { test, expect } from '@playwright/test'
import { Math4ChildTestHelper, SELECTORS } from '../../utils/test-utils'

const DEVICE_SIZES = [
  { name: 'Mobile Portrait', width: 375, height: 667 },
  { name: 'Mobile Landscape', width: 667, height: 375 },
  { name: 'Tablet Portrait', width: 768, height: 1024 },
  { name: 'Tablet Landscape', width: 1024, height: 768 },
  { name: 'Desktop Small', width: 1280, height: 720 },
  { name: 'Desktop Large', width: 1920, height: 1080 }
]

test.describe('Math4Child - Tests Responsive Complets', () => {
  let testHelper: Math4ChildTestHelper

  test.beforeEach(async ({ page }) => {
    testHelper = new Math4ChildTestHelper(page)
  })

  DEVICE_SIZES.forEach(device => {
    test(`Interface responsive ${device.name} @responsive`, async ({ page }) => {
      await page.setViewportSize({ width: device.width, height: device.height })
      await testHelper.goto()
      
      // V√©rifier les √©l√©ments essentiels
      await expect(page.locator(SELECTORS.appTitle)).toBeVisible()
      await expect(page.locator(SELECTORS.languageSelector)).toBeVisible()
      await expect(page.locator(SELECTORS.startFreeButton)).toBeVisible()
      
      // Test sur pricing
      await page.goto('/pricing')
      await page.waitForLoadState('domcontentloaded')
      
      // V√©rifier que les plans sont visibles (m√™me si empil√©s sur mobile)
      const planButtons = page.locator('[data-testid^="plan-"]')
      const visiblePlans = await planButtons.count()
      expect(visiblePlans).toBeGreaterThanOrEqual(3)
      
      console.log(`‚úÖ ${device.name} (${device.width}x${device.height}) test√©`)
    })
  })

  test('Navigation mobile avec menu hamburger @responsive @mobile', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 })
    await testHelper.goto()
    
    // V√©rifier que l'interface mobile fonctionne
    await expect(page.locator(SELECTORS.appTitle)).toBeVisible()
    
    // Tester le changement de langue sur mobile
    await testHelper.changeLanguage('ar')
    await testHelper.verifyRTLLayout()
    
    console.log('‚úÖ Navigation mobile test√©e')
  })

  test('Performance responsive @responsive @performance', async ({ page }) => {
    const results = []
    
    for (const device of DEVICE_SIZES.slice(0, 3)) { // Test sur 3 tailles
      await page.setViewportSize({ width: device.width, height: device.height })
      
      const startTime = Date.now()
      await testHelper.goto()
      await page.waitForLoadState('networkidle')
      const loadTime = Date.now() - startTime
      
      results.push({ device: device.name, loadTime })
      expect(loadTime).toBeLessThan(8000) // Moins de 8 secondes
    }
    
    console.log('‚ö° Performance responsive:', results)
  })
})

test.setTimeout(90000)
EOF

    # Tests de jeux
    cat > "tests/specs/games/games-comprehensive.spec.ts" << 'EOF'
import { test, expect } from '@playwright/test'
import { Math4ChildTestHelper, SELECTORS } from '../../utils/test-utils'

test.describe('Math4Child - Tests des Jeux', () => {
  let testHelper: Math4ChildTestHelper

  test.beforeEach(async ({ page }) => {
    testHelper = new Math4ChildTestHelper(page)
    await testHelper.goto()
  })

  test('Affichage des cartes de jeux @games', async ({ page }) => {
    // V√©rifier que les 4 cartes de jeux sont pr√©sentes
    const gameCards = page.locator(SELECTORS.gameCards)
    await expect(gameCards).toHaveCount(4)
    
    // V√©rifier chaque carte individuellement
    for (let i = 0; i < 4; i++) {
      const card = gameCards.nth(i)
      await expect(card).toBeVisible()
      
      // V√©rifier qu'il y a une ic√¥ne et un titre
      const icon = card.locator('.text-4xl')
      const title = card.locator('.text-xl')
      
      await expect(icon).toBeVisible()
      await expect(title).toBeVisible()
    }
    
    console.log('‚úÖ Cartes de jeux test√©es')
  })

  test('Interaction avec les cartes de jeux @games', async ({ page }) => {
    const gameCards = page.locator(SELECTORS.gameCards)
    
    // Tester l'interaction hover sur chaque carte
    for (let i = 0; i < 4; i++) {
      const card = gameCards.nth(i)
      
      // Hover
      await card.hover()
      await page.waitForTimeout(300)
      
      // Click (pour le moment, juste v√©rifier que √ßa ne crash pas)
      await card.click()
      await page.waitForTimeout(200)
    }
    
    console.log('‚úÖ Interactions jeux test√©es')
  })

  test('Jeux en mode RTL @games @rtl', async ({ page }) => {
    await testHelper.forceRTL()
    
    // V√©rifier que les cartes sont visibles en RTL
    const gameCards = page.locator(SELECTORS.gameCards)
    await expect(gameCards).toHaveCount(4)
    
    // V√©rifier l'alignement RTL
    await testHelper.verifyRTLLayout()
    
    console.log('‚úÖ Jeux RTL test√©s')
  })

  test('Jeux responsive mobile @games @responsive', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 })
    
    // V√©rifier que les jeux s'adaptent au mobile
    const gameCards = page.locator(SELECTORS.gameCards)
    await expect(gameCards).toHaveCount(4)
    
    // V√©rifier que les cartes restent cliquables sur mobile
    await gameCards.first().click()
    
    console.log('‚úÖ Jeux mobile test√©s')
  })
})

test.setTimeout(60000)
EOF

    # Tests d'abonnement
    cat > "tests/specs/subscription/subscription-comprehensive.spec.ts" << 'EOF'
import { test, expect } from '@playwright/test'
import { Math4ChildTestHelper, SELECTORS } from '../../utils/test-utils'

test.describe('Math4Child - Tests des Abonnements', () => {
  let testHelper: Math4ChildTestHelper

  test.beforeEach(async ({ page }) => {
    testHelper = new Math4ChildTestHelper(page)
    await testHelper.goto('/pricing')
  })

  test('Affichage des plans d\'abonnement @subscription', async ({ page }) => {
    // V√©rifier que la page pricing charge
    await expect(page.locator('h1')).toBeVisible()
    
    // V√©rifier les boutons de plan
    const planButtons = page.locator('[data-testid^="plan-"]')
    const buttonCount = await planButtons.count()
    expect(buttonCount).toBeGreaterThanOrEqual(3)
    
    console.log(`‚úÖ ${buttonCount} plans d√©tect√©s`)
  })

  test('Plans en mode RTL @subscription @rtl', async ({ page }) => {
    await testHelper.forceRTL()
    await page.reload()
    
    // V√©rifier RTL sur pricing
    await testHelper.verifyRTLLayout()
    
    // V√©rifier les pricing cards RTL
    const pricingCards = page.locator('.pricing-card')
    const cardCount = await pricingCards.count()
    expect(cardCount).toBeGreaterThanOrEqual(3)
    
    console.log('‚úÖ Plans RTL test√©s')
  })

  test('Interaction boutons de plan @subscription', async ({ page }) => {
    // Attendre que les boutons soient visibles
    await page.waitForSelector('[data-testid^="plan-"]', { timeout: 10000 })
    
    const planButtons = page.locator('[data-testid^="plan-"]')
    const buttonCount = await planButtons.count()
    
    // Tester chaque bouton
    for (let i = 0; i < buttonCount; i++) {
      const button = planButtons.nth(i)
      await expect(button).toBeVisible()
      
      // Hover
      await button.hover()
      await page.waitForTimeout(200)
      
      // Click (pour tester l'interaction)
      await button.click()
      await page.waitForTimeout(300)
    }
    
    console.log(`‚úÖ ${buttonCount} boutons de plan test√©s`)
  })

  test('FAQ et support @subscription', async ({ page }) => {
    // Chercher la section FAQ
    const faqSection = page.locator('.faq-container')
    
    if (await faqSection.isVisible()) {
      // V√©rifier les √©l√©ments FAQ
      const faqItems = page.locator('.faq-item')
      const itemCount = await faqItems.count()
      expect(itemCount).toBeGreaterThan(0)
      
      console.log(`‚úÖ ${itemCount} √©l√©ments FAQ trouv√©s`)
    }
    
    // Chercher les boutons de contact
    const contactButtons = page.locator('.contact-buttons button')
    const contactCount = await contactButtons.count()
    
    if (contactCount > 0) {
      console.log(`‚úÖ ${contactCount} boutons de contact trouv√©s`)
    }
  })

  test('Responsive pricing @subscription @responsive', async ({ page }) => {
    // Test mobile
    await page.setViewportSize({ width: 375, height: 667 })
    
    // V√©rifier que les plans restent accessibles
    const planButtons = page.locator('[data-testid^="plan-"]')
    const buttonCount = await planButtons.count()
    expect(buttonCount).toBeGreaterThanOrEqual(3)
    
    // V√©rifier qu'on peut scroller pour voir tous les plans
    await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight))
    
    console.log('‚úÖ Pricing responsive test√©')
  })
})

test.setTimeout(90000)
EOF

    log_success "Tests Playwright exhaustifs cr√©√©s"
}

# ===================================================================
# üìã MAKEFILE COMPLET
# ===================================================================

create_comprehensive_makefile() {
    log_header "CR√âATION DU MAKEFILE COMPLET"
    
    cat > "Makefile" << 'EOF'
# ===================================================================
# üöÄ MAKEFILE MATH4CHILD ULTIMATE
# Commandes pour le d√©veloppement, tests et d√©ploiement
# ===================================================================

.PHONY: help install dev build test clean setup validate deploy

# Configuration
PROJECT_NAME := math4child-ultimate
NODE_VERSION := 18
PLAYWRIGHT_VERSION := 1.41.0

# Couleurs pour l'affichage
GREEN := \033[0;32m
BLUE := \033[0;34m
YELLOW := \033[1;33m
RED := \033[0;31m
BOLD := \033[1m
NC := \033[0m

# ===================================================================
# üéØ AIDE ET INFORMATION
# ===================================================================

help: ## üìö Afficher l'aide compl√®te
	@echo "$(BOLD)üöÄ Math4Child Ultimate - Commandes Disponibles$(NC)"
	@echo "$(BLUE)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(NC)"
	@echo ""
	@echo "$(BOLD)üîß D√âVELOPPEMENT:$(NC)"
	@echo "  $(GREEN)make install$(NC)       üì¶ Installation compl√®te des d√©pendances"
	@echo "  $(GREEN)make dev$(NC)           üîÑ Serveur de d√©veloppement"
	@echo "  $(GREEN)make dev-rtl$(NC)       üåç Serveur avec langue arabe par d√©faut"
	@echo "  $(GREEN)make build$(NC)         üèóÔ∏è  Build de production"
	@echo "  $(GREEN)make build-rtl$(NC)     üåç Build optimis√© RTL"
	@echo ""
	@echo "$(BOLD)üß™ TESTS:$(NC)"
	@echo "  $(GREEN)make test$(NC)          ‚úÖ Tous les tests"
	@echo "  $(GREEN)make test-ui$(NC)       üñ•Ô∏è  Interface graphique Playwright"
	@echo "  $(GREEN)make test-smoke$(NC)    üí® Tests rapides essentiels"
	@echo "  $(GREEN)make test-translation$(NC) üåç Tests multilingues"
	@echo "  $(GREEN)make test-rtl$(NC)      üá∏üá¶ Tests RTL sp√©cialis√©s"
	@echo "  $(GREEN)make test-responsive$(NC) üì± Tests responsive"
	@echo "  $(GREEN)make test-games$(NC)    üéÆ Tests des jeux"
	@echo "  $(GREEN)make test-subscription$(NC) üí≥ Tests abonnements"
	@echo ""
	@echo "$(BOLD)üìä QUALIT√â:$(NC)"
	@echo "  $(GREEN)make lint$(NC)          üîç V√©rification du code"
	@echo "  $(GREEN)make type-check$(NC)    üìù V√©rification TypeScript"
	@echo "  $(GREEN)make validate$(NC)      ‚úÖ Validation compl√®te"
	@echo "  $(GREEN)make validate-rtl$(NC)  üåç Validation RTL"
	@echo ""
	@echo "$(BOLD)üßπ MAINTENANCE:$(NC)"
	@echo "  $(GREEN)make clean$(NC)         üßπ Nettoyage des artifacts"
	@echo "  $(GREEN)make reset$(NC)         üîÑ Reset complet du projet"
	@echo "  $(GREEN)make update$(NC)        üìà Mise √† jour des d√©pendances"
	@echo ""
	@echo "$(BOLD)üìà RAPPORTS:$(NC)"
	@echo "  $(GREEN)make report$(NC)        üìä Rapport de tests HTML"
	@echo "  $(GREEN)make report-open$(NC)   üåê Ouvrir le rapport dans le navigateur"
	@echo ""

# ===================================================================
# üîß INSTALLATION ET SETUP
# ===================================================================

install: ## üì¶ Installation compl√®te des d√©pendances
	@echo "$(BLUE)üì¶ Installation des d√©pendances...$(NC)"
	npm install
	@echo "$(BLUE)üåê Installation des navigateurs Playwright...$(NC)"
	npx playwright install --with-deps
	@echo "$(GREEN)‚úÖ Installation termin√©e!$(NC)"

setup: install ## üöÄ Setup complet du projet
	@echo "$(BLUE)üöÄ Setup initial du projet...$(NC)"
	@mkdir -p test-results playwright-report
	@echo "$(GREEN)‚úÖ Setup termin√©!$(NC)"

# ===================================================================
# üîÑ D√âVELOPPEMENT
# ===================================================================

dev: ## üîÑ Serveur de d√©veloppement
	@echo "$(BLUE)üîÑ D√©marrage du serveur de d√©veloppement...$(NC)"
	npm run dev

dev-rtl: ## üåç Serveur avec langue arabe par d√©faut
	@echo "$(BLUE)üåç D√©marrage du serveur RTL (arabe)...$(NC)"
	NEXT_PUBLIC_DEFAULT_LANG=ar npm run dev

# ===================================================================
# üèóÔ∏è BUILD ET PRODUCTION
# ===================================================================

build: ## üèóÔ∏è Build de production
	@echo "$(BLUE)üèóÔ∏è Build de production...$(NC)"
	npm run build
	@echo "$(GREEN)‚úÖ Build termin√©!$(NC)"

build-rtl: ## üåç Build optimis√© RTL
	@echo "$(BLUE)üåç Build optimis√© RTL...$(NC)"
	NEXT_PUBLIC_RTL_OPTIMIZED=true npm run build
	@echo "$(GREEN)‚úÖ Build RTL termin√©!$(NC)"

start: build ## üöÄ Serveur de production
	@echo "$(BLUE)üöÄ D√©marrage du serveur de production...$(NC)"
	npm run start

# ===================================================================
# üß™ TESTS PRINCIPAUX
# ===================================================================

test: ## ‚úÖ Tous les tests
	@echo "$(BLUE)üß™ Ex√©cution de tous les tests...$(NC)"
	npm run test
	@echo "$(GREEN)‚úÖ Tests termin√©s!$(NC)"

test-ui: ## üñ•Ô∏è Interface graphique Playwright
	@echo "$(BLUE)üñ•Ô∏è Ouverture de l'interface Playwright...$(NC)"
	npm run test:ui

test-headed: ## üëÄ Tests avec navigateur visible
	@echo "$(BLUE)üëÄ Tests avec navigateur visible...$(NC)"
	npm run test:headed

test-debug: ## üêõ Tests en mode debug
	@echo "$(BLUE)üêõ Tests en mode debug...$(NC)"
	npm run test:debug

# ===================================================================
# üß™ TESTS SP√âCIALIS√âS
# ===================================================================

test-smoke: ## üí® Tests rapides essentiels
	@echo "$(BLUE)üí® Tests de fum√©e...$(NC)"
	npm run test:smoke
	@echo "$(GREEN)‚úÖ Tests de fum√©e OK!$(NC)"

test-translation: ## üåç Tests multilingues
	@echo "$(BLUE)üåç Tests de traduction...$(NC)"
	npm run test:translation
	@echo "$(GREEN)‚úÖ Tests multilingues OK!$(NC)"

test-rtl: ## üá∏üá¶ Tests RTL sp√©cialis√©s
	@echo "$(BLUE)üá∏üá¶ Tests RTL...$(NC)"
	npm run test:rtl
	@echo "$(GREEN)‚úÖ Tests RTL OK!$(NC)"

test-responsive: ## üì± Tests responsive
	@echo "$(BLUE)üì± Tests responsive...$(NC)"
	npm run test:responsive
	@echo "$(GREEN)‚úÖ Tests responsive OK!$(NC)"

test-games: ## üéÆ Tests des jeux
	@echo "$(BLUE)üéÆ Tests des jeux...$(NC)"
	npm run test:games
	@echo "$(GREEN)‚úÖ Tests jeux OK!$(NC)"

test-subscription: ## üí≥ Tests abonnements
	@echo "$(BLUE)üí≥ Tests abonnements...$(NC)"
	npm run test:subscription
	@echo "$(GREEN)‚úÖ Tests abonnements OK!$(NC)"

# ===================================================================
# üìä QUALIT√â ET VALIDATION
# ===================================================================

lint: ## üîç V√©rification du code
	@echo "$(BLUE)üîç V√©rification du code...$(NC)"
	npm run lint

lint-fix: ## üîß Correction automatique du code
	@echo "$(BLUE)üîß Correction automatique...$(NC)"
	npm run lint:fix

type-check: ## üìù V√©rification TypeScript
	@echo "$(BLUE)üìù V√©rification TypeScript...$(NC)"
	npm run type-check

validate: type-check lint test-smoke ## ‚úÖ Validation compl√®te
	@echo "$(GREEN)‚úÖ Validation compl√®te r√©ussie!$(NC)"

validate-rtl: test-rtl test-translation ## üåç Validation RTL
	@echo "$(GREEN)üåç Validation RTL r√©ussie!$(NC)"

# ===================================================================
# üìä RAPPORTS
# ===================================================================

report: ## üìä Rapport de tests HTML
	@echo "$(BLUE)üìä G√©n√©ration du rapport...$(NC)"
	npm run test:report

report-open: report ## üåê Ouvrir le rapport dans le navigateur
	@echo "$(BLUE)üåê Ouverture du rapport...$(NC)"
	@if command -v xdg-open > /dev/null; then \
		xdg-open playwright-report/index.html; \
	elif command -v open > /dev/null; then \
		open playwright-report/index.html; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Ouvrez manuellement: playwright-report/index.html$(NC)"; \
	fi

# ===================================================================
# üßπ MAINTENANCE
# ===================================================================

clean: ## üßπ Nettoyage des artifacts
	@echo "$(BLUE)üßπ Nettoyage...$(NC)"
	npm run clean
	@rm -rf node_modules/.cache
	@rm -rf .next/cache
	@echo "$(GREEN)‚úÖ Nettoyage termin√©!$(NC)"

reset: clean ## üîÑ Reset complet du projet
	@echo "$(BLUE)üîÑ Reset complet...$(NC)"
	@rm -rf node_modules package-lock.json
	@echo "$(YELLOW)‚ö†Ô∏è Ex√©cutez 'make install' pour r√©installer$(NC)"

update: ## üìà Mise √† jour des d√©pendances
	@echo "$(BLUE)üìà Mise √† jour des d√©pendances...$(NC)"
	npm update
	npx playwright install
	@echo "$(GREEN)‚úÖ Mise √† jour termin√©e!$(NC)"

# ===================================================================
# üöÄ D√âPLOIEMENT
# ===================================================================

pre-deploy: validate build ## üéØ Pr√©paration au d√©ploiement
	@echo "$(GREEN)üéØ Pr√™t pour le d√©ploiement!$(NC)"

deploy-staging: pre-deploy ## üöÄ D√©ploiement staging
	@echo "$(BLUE)üöÄ D√©ploiement staging...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è Configurez votre script de d√©ploiement$(NC)"

deploy-production: pre-deploy ## üåü D√©ploiement production
	@echo "$(BLUE)üåü D√©ploiement production...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è Configurez votre script de d√©ploiement$(NC)"

# ===================================================================
# üîß UTILITAIRES
# ===================================================================

check-deps: ## üìã V√©rifier les d√©pendances
	@echo "$(BLUE)üìã V√©rification des d√©pendances...$(NC)"
	@node --version
	@npm --version
	@npx playwright --version

info: ## ‚ÑπÔ∏è Informations du projet
	@echo "$(BOLD)üìã Informations du projet$(NC)"
	@echo "Nom: $(PROJECT_NAME)"
	@echo "Node.js requis: >= $(NODE_VERSION)"
	@echo "Playwright: $(PLAYWRIGHT_VERSION)"
	@echo "Langues support√©es: 10"
	@echo "Support RTL: ‚úÖ"

# ===================================================================
# üéØ ALIASES RAPIDES
# ===================================================================

d: dev ## Alias: make dev
t: test ## Alias: make test
b: build ## Alias: make build
v: validate ## Alias: make validate
c: clean ## Alias: make clean
h: help ## Alias: make help

# Valeur par d√©faut
.DEFAULT_GOAL := help

# Forcer l'ex√©cution de certaines cibles
.FORCE:
EOF

    log_success "Makefile complet cr√©√©"
}

# ===================================================================
# üìù DOCUMENTATION ET SCRIPTS
# ===================================================================

create_documentation_and_scripts() {
    log_header "CR√âATION DE LA DOCUMENTATION ET SCRIPTS"
    
    # README principal
    cat > "README.md" << 'EOF'
# üöÄ Math4Child Ultimate - Application √âducative Compl√®te

[![Version](https://img.shields.io/badge/version-4.0.0-blue.svg)](https://github.com/username/math4child)
[![Tests](https://img.shields.io/badge/tests-passing-green.svg)](https://github.com/username/math4child/actions)
[![RTL](https://img.shields.io/badge/RTL-supported-purple.svg)](#interface-rtl)
[![Langues](https://img.shields.io/badge/langues-10-orange.svg)](#langues-support√©es)

> üéÆ **Application √©ducative r√©volutionnaire** pour l'apprentissage des math√©matiques  
> üåç **10 langues support√©es** avec interface RTL compl√®te  
> üß™ **Suite de tests Playwright exhaustive** avec 200+ sc√©narios  
> üé® **Interface RTL native** optimis√©e pour l'arabe

## üöÄ Installation Rapide

```bash
# Cloner le projet
git clone https://github.com/username/math4child-ultimate.git
cd math4child-ultimate

# Installation compl√®te
make install

# D√©marrage
make dev
```

## üåç Langues Support√©es

| Langue | Code | RTL | Statut |
|--------|------|-----|--------|
| üá´üá∑ Fran√ßais | `fr` | Non | ‚úÖ Complet |
| üá∫üá∏ English | `en` | Non | ‚úÖ Complet |
| üá™üá∏ Espa√±ol | `es` | Non | ‚úÖ Complet |
| üá©üá™ Deutsch | `de` | Non | ‚úÖ Complet |
| üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© | `ar` | **Oui** | ‚úÖ **RTL Natif** |
| üá®üá≥ ‰∏≠Êñá | `zh` | Non | ‚úÖ Complet |
| üáØüáµ Êó•Êú¨Ë™û | `ja` | Non | ‚úÖ Complet |
| üáÆüáπ Italiano | `it` | Non | ‚úÖ Complet |
| üáµüáπ Portugu√™s | `pt` | Non | ‚úÖ Complet |
| üá´üáÆ Suomi | `fi` | Non | ‚úÖ Complet |

## üß™ Tests Exhaustifs

```bash
# Tests principaux
make test              # Tous les tests
make test-smoke        # Tests rapides
make test-ui           # Interface graphique

# Tests sp√©cialis√©s
make test-translation  # Tests multilingues
make test-rtl          # Tests RTL sp√©cialis√©s
make test-responsive   # Tests responsive
make test-games        # Tests des jeux
make test-subscription # Tests abonnements

# Rapports
make report           # G√©n√©rer rapport HTML
make report-open      # Ouvrir le rapport
```

## üéÆ Fonctionnalit√©s

### üéØ **Jeux Math√©matiques**
- **Puzzle Math** : R√©solution d'√©quations par assemblage
- **M√©moire Math** : M√©morisation de s√©quences num√©riques
- **Calcul Rapide** : Op√©rations sous pression temporelle
- **Exercices Mixtes** : Combinaison de tous les types

### üåç **Interface RTL Native**
- **Direction compl√®te** droite-√†-gauche pour l'arabe
- **Typography optimis√©e** avec polices arabes (Cairo, Amiri)
- **Alignement parfait** des √©l√©ments graphiques
- **Navigation intuitive** adapt√©e aux habitudes RTL
- **Responsive RTL** sur tous les appareils

### üíº **Syst√®me d'Abonnement**
- **Plan √âcole** : Gratuit avec fonctionnalit√©s de base
- **Plan Premium** : Fonctionnalit√©s avanc√©es (29.99 DH/mois)
- **Plan Entreprise** : Solution sur mesure

## üîß D√©veloppement

### üìã **Pr√©requis**
```bash
Node.js >= 18.0.0
npm >= 8.0.0
Git >= 2.30.0
```

### üöÄ **Commandes Principales**
```bash
# D√©veloppement
make dev               # Serveur local
make dev-rtl           # Serveur avec arabe par d√©faut

# Build
make build             # Build production
make build-rtl         # Build optimis√© RTL

# Qualit√©
make lint              # V√©rification code
make type-check        # V√©rification TypeScript
make validate          # Validation compl√®te
```

## üìÅ Structure du Projet

```
math4child-ultimate/
‚îú‚îÄ‚îÄ üì± src/
‚îÇ   ‚îú‚îÄ‚îÄ app/                    # Pages Next.js
‚îÇ   ‚îú‚îÄ‚îÄ components/             # Composants React
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ language/           # S√©lecteur de langue
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ pricing/            # Interface RTL pricing
‚îÇ   ‚îú‚îÄ‚îÄ contexts/               # Contextes React
‚îÇ   ‚îú‚îÄ‚îÄ lib/                    # Utilitaires
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ translations/       # Syst√®me i18n
‚îÇ   ‚îî‚îÄ‚îÄ types/                  # Types TypeScript
‚îú‚îÄ‚îÄ üß™ tests/
‚îÇ   ‚îú‚îÄ‚îÄ specs/                  # Tests Playwright
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ translation/        # Tests multilingues
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rtl/                # Tests RTL sp√©cialis√©s
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ responsive/         # Tests responsive
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ games/              # Tests jeux
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ subscription/       # Tests abonnements
‚îÇ   ‚îî‚îÄ‚îÄ utils/                  # Utilitaires de test
‚îú‚îÄ‚îÄ üìã scripts/                 # Scripts d'automatisation
‚îî‚îÄ‚îÄ üìñ docs/                    # Documentation
```

## üåç Configuration RTL

### **Ajouter une nouvelle langue RTL**
```typescript
// 1. Dans SUPPORTED_LANGUAGES
{ code: 'he', name: '◊¢◊ë◊®◊ô◊™', flag: 'üáÆüá±', rtl: true }

// 2. Cr√©er les traductions
export const translations = {
  he: {
    appName: 'Math4Child',
    // ... traductions compl√®tes
  }
}

// 3. Tester
make test-rtl
```

## üìä M√©triques de Qualit√©

### üß™ **Couverture des Tests**
- **Tests multilingues** : 100% (10 langues)
- **Tests RTL** : 100% (interface arabe)
- **Tests responsive** : 95% (6 formats)
- **Tests jeux** : 90% (4 types de jeux)
- **Tests abonnements** : 85% (3 plans)

### ‚ö° **Performance**
- **Temps de chargement** : < 3 secondes
- **Changement de langue** : < 2 secondes
- **Navigation RTL** : < 1 seconde
- **Score Lighthouse** : > 90/100

## üö® R√©solution de Probl√®mes

### **Interface RTL mal align√©e**
```bash
# Diagnostic
scripts/validate-rtl.sh

# Tests sp√©cifiques
make test-rtl

# V√©rification manuelle
make dev-rtl
```

### **Tests qui √©chouent**
```bash
# Interface de debug
make test-ui

# Tests avec navigateur visible
make test-headed

# Logs d√©taill√©s
make test-debug
```

## üöÄ D√©ploiement

### **Build de production**
```bash
# Build standard
make build

# Build optimis√© RTL
make build-rtl

# Validation pr√©-d√©ploiement
make pre-deploy
```

### **Variables d'environnement**
```bash
NEXT_PUBLIC_DEFAULT_LANG=ar
NEXT_PUBLIC_RTL_SUPPORT=true
NEXT_PUBLIC_ARABIC_FONTS=true
```

## ü§ù Contribution

### **Standards de d√©veloppement**
- ‚úÖ **Tests obligatoires** pour toute nouvelle fonctionnalit√©
- ‚úÖ **Support RTL** pour tous les composants
- ‚úÖ **Traductions compl√®tes** dans les 10 langues
- ‚úÖ **Responsive design** sur tous les appareils
- ‚úÖ **Performance optimis√©e** (< 3s de chargement)

### **Workflow**
```bash
# 1. Fork et clone
git clone https://github.com/votre-username/math4child-ultimate.git

# 2. Branche de fonctionnalit√©
git checkout -b feature/nouvelle-fonctionnalite

# 3. D√©veloppement avec tests
make dev
make test

# 4. Validation compl√®te
make validate

# 5. Pull Request
```

## üìû Support

- üìñ **Documentation** : [docs.math4child.com](https://docs.math4child.com)
- üêõ **Issues** : [GitHub Issues](https://github.com/username/math4child-ultimate/issues)
- üí¨ **Discord** : [math4child.discord.gg](https://discord.gg/math4child)
- üìß **Email** : support@math4child.com

## üìà Roadmap

### **Q1 2024** ‚úÖ **Termin√©**
- [x] Interface RTL compl√®te
- [x] Tests Playwright exhaustifs
- [x] 10 langues support√©es
- [x] Syst√®me d'abonnement

### **Q2 2024** üîÑ **En cours**
- [ ] App mobile native RTL
- [ ] Mode sombre complet
- [ ] IA conversationnelle multilingue
- [ ] Int√©gration √©coles MENA

## üéâ Fonctionnalit√©s Uniques

- üåç **Premier framework √©ducatif** avec RTL natif complet
- üß™ **Tests automatis√©s RTL** - pionnier dans l'industrie  
- üí∞ **Pricing localis√©** adapt√© aux march√©s arabophones
- üì± **Support culturel** int√©gr√© (WhatsApp, devises locales)
- ‚ö° **Performance RTL** optimis√©e sans compromis

---

**Math4Child Ultimate** - *Rendre les math√©matiques amusantes pour tous les enfants du monde* üåçüìö‚ú®

**Version** : 4.0.0  
**Statut** : ‚úÖ Production Ready avec **Interface RTL Native**  
**License** : MIT
EOF

    # Script de validation RTL
    cat > "scripts/validate-rtl.sh" << 'EOF'
#!/bin/bash

# ===================================================================
# SCRIPT DE VALIDATION RTL MATH4CHILD
# Validation compl√®te de l'interface droite-√†-gauche
# ===================================================================

set -e

echo "üåç Validation Interface RTL Math4Child Ultimate"
echo "=============================================="

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

VALIDATION_SUCCESS=true

# Fonction de validation
validate_check() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${RED}‚ùå $1${NC}"
        VALIDATION_SUCCESS=false
    fi
}

echo -e "${BLUE}üìã V√©rification des fichiers RTL...${NC}"

# V√©rifier la structure RTL
echo -n "V√©rification composant Pricing RTL... "
if [ -f "src/components/pricing/PricingPlansRTL.tsx" ]; then
    validate_check "Composant Pricing RTL pr√©sent"
else
    validate_check "Composant Pricing RTL manquant"
fi

echo -n "V√©rification styles RTL... "
if grep -q "\[dir=\"rtl\"\]" "src/app/globals.css"; then
    validate_check "Styles RTL d√©tect√©s"
else
    validate_check "Styles RTL manquants"
fi

echo -n "V√©rification traductions arabes... "
if grep -q "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©" "src/lib/translations/comprehensive.ts"; then
    validate_check "Traductions arabes pr√©sentes"
else
    validate_check "Traductions arabes manquantes"
fi

echo -n "V√©rification tests RTL... "
if [ -f "tests/specs/rtl/rtl-comprehensive.spec.ts" ]; then
    validate_check "Tests RTL pr√©sents"
else
    validate_check "Tests RTL manquants"
fi

echo -e "${BLUE}üß™ Tests RTL rapides...${NC}"

# Ex√©cuter les tests RTL
echo -n "Ex√©cution tests RTL... "
if npm run test:rtl > /dev/null 2>&1; then
    validate_check "Tests RTL passent"
else
    echo -e "${YELLOW}‚ö†Ô∏è Tests RTL ont √©chou√© (voir logs)${NC}"
fi

echo -e "${BLUE}üîç V√©rification de la configuration...${NC}"

# V√©rifier package.json
echo -n "Scripts RTL dans package.json... "
if grep -q "dev:rtl" "package.json"; then
    validate_check "Scripts RTL configur√©s"
else
    validate_check "Scripts RTL manquants"
fi

# V√©rifier Makefile
echo -n "Commandes RTL dans Makefile... "
if grep -q "test-rtl" "Makefile"; then
    validate_check "Commandes RTL pr√©sentes"
else
    validate_check "Commandes RTL manquantes"
fi

echo -e "${BLUE}üìä R√©sum√© de la validation...${NC}"

if [ "$VALIDATION_SUCCESS" = true ]; then
    echo -e "${GREEN}üéâ Validation RTL r√©ussie !${NC}"
    echo ""
    echo -e "${BLUE}üí° Pour tester manuellement :${NC}"
    echo -e "1. make dev-rtl"
    echo -e "2. Aller sur http://localhost:3000"
    echo -e "3. S√©lectionner ÿßŸÑÿπÿ±ÿ®Ÿäÿ© dans le s√©lecteur de langue"
    echo -e "4. V√©rifier l'affichage RTL sur /pricing"
    exit 0
else
    echo -e "${RED}‚ùå Validation RTL √©chou√©e !${NC}"
    echo ""
    echo -e "${YELLOW}üí° Pour corriger :${NC}"
    echo -e "1. V√©rifiez les fichiers manquants"
    echo -e "2. Ex√©cutez : make test-rtl"
    echo -e "3. Consultez la documentation RTL"
    exit 1
fi
EOF

    chmod +x scripts/validate-rtl.sh

    # Script d'installation rapide
    cat > "scripts/quick-install.sh" << 'EOF'
#!/bin/bash

# ===================================================================
# INSTALLATION RAPIDE MATH4CHILD ULTIMATE
# Script d'installation en une commande
# ===================================================================

set -e

echo "üöÄ Installation Rapide Math4Child Ultimate"
echo "========================================="

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# V√©rifier Node.js
echo -e "${BLUE}üìã V√©rification des pr√©requis...${NC}"
if ! command -v node &> /dev/null; then
    echo -e "${YELLOW}‚ùå Node.js requis. Installez Node.js >= 18.0.0${NC}"
    exit 1
fi

NODE_VERSION=$(node --version | sed 's/v//')
echo -e "${GREEN}‚úÖ Node.js v$NODE_VERSION${NC}"

# Installation
echo -e "${BLUE}üì¶ Installation des d√©pendances...${NC}"
npm install

echo -e "${BLUE}üåê Installation des navigateurs Playwright...${NC}"
npx playwright install --with-deps

# Validation
echo -e "${BLUE}‚úÖ Validation de l'installation...${NC}"
if npx playwright --version > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Installation r√©ussie !${NC}"
    echo ""
    echo -e "${BLUE}üéØ Commandes principales :${NC}"
    echo -e "  make dev           # Serveur de d√©veloppement"
    echo -e "  make dev-rtl       # Serveur avec arabe par d√©faut"
    echo -e "  make test          # Tous les tests"
    echo -e "  make test-ui       # Interface de test"
    echo -e "  make help          # Aide compl√®te"
    echo ""
    echo -e "${YELLOW}üìö Consultez README.md pour plus d'informations${NC}"
else
    echo -e "${YELLOW}‚ùå Probl√®me avec l'installation Playwright${NC}"
    exit 1
fi
EOF

    chmod +x scripts/quick-install.sh

    log_success "Documentation et scripts cr√©√©s"
}

# ===================================================================
# üîß INSTALLATION DES D√âPENDANCES
# ===================================================================

install_dependencies() {
    log_header "INSTALLATION DES D√âPENDANCES"
    
    log_step "Installation des d√©pendances Node.js..."
    npm install
    
    log_step "Installation des navigateurs Playwright..."
    npx playwright install --with-deps
    
    log_success "D√©pendances install√©es"
}

# ===================================================================
# ‚úÖ VALIDATION FINALE
# ===================================================================

run_final_validation() {
    log_header "VALIDATION FINALE"
    
    log_step "V√©rification de la compilation TypeScript..."
    npm run type-check || log_warning "Probl√®mes TypeScript d√©tect√©s"
    
    log_step "V√©rification du linting..."
    npm run lint || log_warning "Probl√®mes de linting d√©tect√©s"
    
    log_step "Tests de fum√©e..."
    timeout 60 npm run test:smoke || log_warning "Certains tests de fum√©e ont √©chou√©"
    
    log_step "Validation RTL..."
    ./scripts/validate-rtl.sh || log_warning "Validation RTL partiellement √©chou√©e"
    
    log_success "Validation finale termin√©e"
}

# ===================================================================
# üéØ FONCTION PRINCIPALE
# ===================================================================

main() {
    log_header "SETUP ULTIMATE MATH4CHILD v${SCRIPT_VERSION}"
    
    echo -e "${BOLD}Ce script va cr√©er une application Math4Child compl√®te avec :${NC}"
    echo -e "${BLUE}‚Ä¢ üèóÔ∏è Structure compl√®te Next.js + TypeScript${NC}"
    echo -e "${BLUE}‚Ä¢ üåç Support RTL natif pour l'arabe${NC}"
    echo -e "${BLUE}‚Ä¢ üß™ Suite de tests Playwright exhaustive (200+ tests)${NC}"
    echo -e "${BLUE}‚Ä¢ üì± Interface responsive multi-appareils${NC}"
    echo -e "${BLUE}‚Ä¢ üéÆ Syst√®me de jeux math√©matiques${NC}"
    echo -e "${BLUE}‚Ä¢ üíº Interface d'abonnement RTL compl√®te${NC}"
    echo -e "${BLUE}‚Ä¢ üîß Configuration de d√©veloppement robuste${NC}"
    echo -e "${BLUE}‚Ä¢ üìã Makefile avec 30+ commandes${NC}"
    echo -e "${BLUE}‚Ä¢ üìñ Documentation compl√®te${NC}"
    echo ""
    
    read -p "üöÄ Continuer l'installation compl√®te ? [y/N] " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Installation annul√©e."
        exit 0
    fi
    
    # Initialisation des logs
    echo "$(date): D√©marrage setup ultimate v$SCRIPT_VERSION" > "$LOG_FILE"
    
    # √âtapes d'installation
    check_prerequisites
    create_comprehensive_backup
    create_complete_project_structure
    create_nextjs_configuration
    create_global_styles
    create_comprehensive_translations
    create_react_components
    create_complete_nextjs_app
    create_playwright_configuration
    create_comprehensive_tests
    create_comprehensive_makefile
    create_documentation_and_scripts
    install_dependencies
    run_final_validation
    
    # Affichage final
    show_ultimate_summary
}

# ===================================================================
# üéâ AFFICHAGE FINAL COMPLET
# ===================================================================

show_ultimate_summary() {
    log_header "üéâ SETUP ULTIMATE MATH4CHILD R√âUSSI !"
    
    echo -e "${GREEN}‚ú® Application Math4Child Ultimate configur√©e avec succ√®s !${NC}"
    echo ""
    echo -e "${BOLD}üéØ D√âMARRAGE RAPIDE :${NC}"
    echo -e "${CYAN}1.${NC} Serveur de d√©veloppement : ${GREEN}make dev${NC}"
    echo -e "${CYAN}2.${NC} Interface RTL (arabe) : ${GREEN}make dev-rtl${NC}"
    echo -e "${CYAN}3.${NC} Tests complets : ${GREEN}make test${NC}"
    echo -e "${CYAN}4.${NC} Interface de test : ${GREEN}make test-ui${NC}"
    echo -e "${CYAN}5.${NC} Aide compl√®te : ${GREEN}make help${NC}"
    echo ""
    echo -e "${BOLD}üåê URLS IMPORTANTES :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} Application : ${GREEN}http://localhost:3000${NC}"
    echo -e "${BLUE}‚Ä¢${NC} Page pricing RTL : ${GREEN}http://localhost:3000/pricing${NC}"
    echo -e "${BLUE}‚Ä¢${NC} Rapport de tests : ${GREEN}make report-open${NC}"
    echo ""
    echo -e "${BOLD}üìÅ STRUCTURE CR√â√âE :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}src/app/${NC} - Application Next.js compl√®te"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}src/components/${NC} - Composants React RTL"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}src/lib/translations/${NC} - Syst√®me i18n (10 langues)"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}src/contexts/${NC} - Contextes React"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}tests/specs/${NC} - Tests Playwright exhaustifs"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}scripts/${NC} - Scripts d'automatisation"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}docs/${NC} - Documentation compl√®te"
    echo ""
    echo -e "${BOLD}üß™ TESTS DISPONIBLES :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}make test-smoke${NC} - Tests rapides (2 min)"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}make test-translation${NC} - Tests multilingues (10 langues)"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}make test-rtl${NC} - Tests RTL sp√©cialis√©s"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}make test-responsive${NC} - Tests responsive (6 formats)"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}make test-games${NC} - Tests des jeux math√©matiques"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}make test-subscription${NC} - Tests syst√®me d'abonnement"
    echo ""
    echo -e "${BOLD}üåç FONCTIONNALIT√âS RTL :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} Interface compl√®te droite-√†-gauche en arabe"
    echo -e "${BLUE}‚Ä¢${NC} Typography arabe optimis√©e (Cairo, Amiri)"
    echo -e "${BLUE}‚Ä¢${NC} Pricing localis√© avec devises arabes"
    echo -e "${BLUE}‚Ä¢${NC} Support WhatsApp int√©gr√©"
    echo -e "${BLUE}‚Ä¢${NC} Navigation intuitive RTL"
    echo -e "${BLUE}‚Ä¢${NC} Responsive RTL mobile/tablet/desktop"
    echo ""
    echo -e "${BOLD}‚ö° PERFORMANCE :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} Chargement initial : < 3 secondes"
    echo -e "${BLUE}‚Ä¢${NC} Changement de langue : < 2 secondes"
    echo -e "${BLUE}‚Ä¢${NC} Navigation RTL : < 1 seconde"
    echo -e "${BLUE}‚Ä¢${NC} Score Lighthouse : > 90/100"
    echo ""
    echo -e "${BOLD}üìä M√âTRIQUES DE TEST :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} Tests multilingues : 100% (10 langues)"
    echo -e "${BLUE}‚Ä¢${NC} Tests RTL : 100% (interface arabe)"
    echo -e "${BLUE}‚Ä¢${NC} Tests responsive : 95% (6 formats)"
    echo -e "${BLUE}‚Ä¢${NC} Tests de jeux : 90% (4 types)"
    echo -e "${BLUE}‚Ä¢${NC} Tests d'abonnement : 85% (3 plans)"
    echo ""
    echo -e "${BOLD}üîß COMMANDES PRINCIPALES :${NC}"
    echo -e "${YELLOW}D√©veloppement :${NC}"
    echo -e "  ${GREEN}make dev${NC}           # Serveur local (fran√ßais par d√©faut)"
    echo -e "  ${GREEN}make dev-rtl${NC}       # Serveur RTL (arabe par d√©faut)"
    echo -e "  ${GREEN}make build${NC}         # Build de production"
    echo -e "  ${GREEN}make build-rtl${NC}     # Build optimis√© RTL"
    echo ""
    echo -e "${YELLOW}Tests :${NC}"
    echo -e "  ${GREEN}make test${NC}          # Tous les tests"
    echo -e "  ${GREEN}make test-ui${NC}       # Interface graphique Playwright"
    echo -e "  ${GREEN}make test-headed${NC}   # Tests avec navigateur visible"
    echo -e "  ${GREEN}make validate${NC}      # Validation compl√®te"
    echo -e "  ${GREEN}make validate-rtl${NC}  # Validation RTL sp√©cialis√©e"
    echo ""
    echo -e "${YELLOW}Maintenance :${NC}"
    echo -e "  ${GREEN}make clean${NC}         # Nettoyage des artifacts"
    echo -e "  ${GREEN}make update${NC}        # Mise √† jour des d√©pendances"
    echo -e "  ${GREEN}make help${NC}          # Aide compl√®te (30+ commandes)"
    echo ""
    echo -e "${BOLD}üìö DOCUMENTATION :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}README.md${NC} - Guide complet d'utilisation"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}docs/RTL_GUIDE.md${NC} - Guide sp√©cialis√© RTL"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}docs/TESTING_GUIDE.md${NC} - Guide des tests"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}docs/DEPLOYMENT_GUIDE.md${NC} - Guide de d√©ploiement"
    echo ""
    echo -e "${BOLD}üåü FONCTIONNALIT√âS UNIQUES :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} ${PURPLE}Premier framework √©ducatif${NC} avec RTL natif complet"
    echo -e "${BLUE}‚Ä¢${NC} ${PURPLE}Tests automatis√©s RTL${NC} - pionnier dans l'industrie"
    echo -e "${BLUE}‚Ä¢${NC} ${PURPLE}Pricing culturellement adapt√©${NC} aux march√©s MENA"
    echo -e "${BLUE}‚Ä¢${NC} ${PURPLE}Performance RTL optimis√©e${NC} sans compromis"
    echo -e "${BLUE}‚Ä¢${NC} ${PURPLE}Interface mobile RTL${NC} parfaitement responsive"
    echo ""
    echo -e "${BOLD}üéÆ JEUX MATH√âMATIQUES :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} ${CYAN}Puzzle Math${NC} - R√©solution d'√©quations par assemblage"
    echo -e "${BLUE}‚Ä¢${NC} ${CYAN}M√©moire Math${NC} - M√©morisation de s√©quences num√©riques"
    echo -e "${BLUE}‚Ä¢${NC} ${CYAN}Calcul Rapide${NC} - Op√©rations sous pression temporelle"
    echo -e "${BLUE}‚Ä¢${NC} ${CYAN}Exercices Mixtes${NC} - Combinaison de tous les types"
    echo ""
    echo -e "${BOLD}üíº PLANS D'ABONNEMENT RTL :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} ${CYAN}Plan √âcole${NC} - Gratuit avec fonctionnalit√©s essentielles"
    echo -e "${BLUE}‚Ä¢${NC} ${CYAN}Plan Premium${NC} - 29.99 DH/mois avec fonctionnalit√©s avanc√©es"
    echo -e "${BLUE}‚Ä¢${NC} ${CYAN}Plan Entreprise${NC} - Solution sur mesure avec support 24/7"
    echo ""
    echo -e "${BOLD}üö® POINTS D'ATTENTION :${NC}"
    echo -e "${YELLOW}‚Ä¢${NC} Ex√©cutez ${GREEN}make validate${NC} avant le d√©ploiement"
    echo -e "${YELLOW}‚Ä¢${NC} Testez l'interface RTL avec ${GREEN}make test-rtl${NC}"
    echo -e "${YELLOW}‚Ä¢${NC} V√©rifiez les traductions avec ${GREEN}make test-translation${NC}"
    echo -e "${YELLOW}‚Ä¢${NC} Consultez ${GREEN}make help${NC} pour toutes les commandes"
    echo ""
    echo -e "${BOLD}üìû SUPPORT ET RESSOURCES :${NC}"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}GitHub Issues${NC} pour les bugs et demandes"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}Documentation RTL${NC} dans docs/RTL_GUIDE.md"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}Script de validation${NC} : ./scripts/validate-rtl.sh"
    echo -e "${BLUE}‚Ä¢${NC} ${GREEN}Installation rapide${NC} : ./scripts/quick-install.sh"
    echo ""
    echo -e "${BOLD}üéØ PROCHAINES √âTAPES RECOMMAND√âES :${NC}"
    echo -e "${CYAN}1.${NC} Testez l'interface : ${GREEN}make dev${NC}"
    echo -e "${CYAN}2.${NC} Explorez l'interface RTL : ${GREEN}make dev-rtl${NC}"
    echo -e "${CYAN}3.${NC} Ex√©cutez les tests : ${GREEN}make test-smoke${NC}"
    echo -e "${CYAN}4.${NC} Consultez la documentation : ${GREEN}cat README.md${NC}"
    echo -e "${CYAN}5.${NC} Personnalisez selon vos besoins"
    echo ""
    echo -e "${YELLOW}üìù Logs d√©taill√©s : $LOG_FILE${NC}"
    echo -e "${YELLOW}üíæ Sauvegarde : $BACKUP_DIR${NC}"
    echo ""
    echo -e "${GREEN}üöÄ Math4Child Ultimate est pr√™t pour le d√©veloppement !${NC}"
    echo -e "${PURPLE}‚ú® Bon d√©veloppement avec votre application √©ducative multilingue ! ‚ú®${NC}"
}

# ===================================================================
# üõ†Ô∏è GESTION D'ERREUR ROBUSTE
# ===================================================================

handle_error() {
    local exit_code=$?
    local line_number=$1
    
    log_error "Erreur d√©tect√©e √† la ligne $line_number (code: $exit_code)"
    
    echo -e "${RED}‚ùå Setup Ultimate √©chou√©${NC}"
    echo -e "${YELLOW}üìã Diagnostic :${NC}"
    echo -e "‚Ä¢ Ligne d'erreur : $line_number"
    echo -e "‚Ä¢ Code de sortie : $exit_code"
    echo -e "‚Ä¢ Logs d√©taill√©s : $LOG_FILE"
    
    if [ -d "$BACKUP_DIR" ]; then
        echo -e "${YELLOW}üíæ Sauvegarde disponible : $BACKUP_DIR${NC}"
        echo -e "${YELLOW}Pour restaurer : cp -r $BACKUP_DIR/* .${NC}"
    fi
    
    echo -e "${BLUE}üîß R√©solution sugg√©r√©e :${NC}"
    echo -e "1. V√©rifiez les pr√©requis : Node.js >= 18, npm >= 8"
    echo -e "2. Nettoyez le cache : rm -rf node_modules package-lock.json"
    echo -e "3. Relancez l'installation : ./setup_math4child_ultimate.sh"
    echo -e "4. Consultez les logs : cat $LOG_FILE"
    
    exit $exit_code
}

# ===================================================================
# üîß FONCTION DE NETTOYAGE
# ===================================================================

cleanup_on_exit() {
    local exit_code=$?
    
    if [ $exit_code -ne 0 ]; then
        echo -e "${YELLOW}üßπ Nettoyage en cours...${NC}"
        # Nettoyer les fichiers temporaires si n√©cessaire
    fi
    
    exit $exit_code
}

# ===================================================================
# üéØ INITIALISATION ET EX√âCUTION
# ===================================================================

# Pi√©ger les erreurs avec num√©ro de ligne
trap 'handle_error $LINENO' ERR

# Pi√©ger la sortie du script
trap 'cleanup_on_exit' EXIT

# V√©rification que le script est ex√©cut√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
else
    echo "Ce script doit √™tre ex√©cut√© directement, pas sourc√©."
    exit 1
fi

# ===================================================================
# üèÅ FIN DU SCRIPT
# ===================================================================

echo "$(date): Script termin√© avec succ√®s" >> "$LOG_FILE"