#!/bin/bash

# =====================================
# MATH4CHILD - PROCHAINES √âTAPES
# Guide complet post-correction TypeScript
# =====================================

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

print_header() {
    echo -e "${PURPLE}"
    echo "============================================================"
    echo "$1"
    echo "============================================================"
    echo -e "${NC}"
}

print_step() {
    echo -e "${BLUE}‚ñ∂Ô∏è${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

print_header "üöÄ MATH4CHILD - GUIDE DES PROCHAINES √âTAPES"

echo ""
echo -e "${CYAN}Votre application Math4Child est maintenant fonctionnelle !${NC}"
echo -e "${CYAN}Voici les √©tapes recommand√©es pour la compl√©ter :${NC}"
echo ""

# =====================================
# √âTAPE 1: V√âRIFICATION ET LANCEMENT
# =====================================

print_header "1Ô∏è‚É£ V√âRIFICATION ET LANCEMENT"

print_step "V√©rification du statut de l'application..."

cd apps/math4child

# Test rapide
if npm run type-check --silent 2>/dev/null; then
    print_success "TypeScript: ‚úÖ Aucune erreur"
else
    print_warning "TypeScript: Quelques avertissements (consultez avec npm run type-check)"
fi

print_info "Pour lancer l'application:"
echo -e "${YELLOW}  cd apps/math4child${NC}"
echo -e "${YELLOW}  npm run dev${NC}"
echo -e "${YELLOW}  # Puis ouvrir http://localhost:3000${NC}"
echo ""

# =====================================
# √âTAPE 2: FONCTIONNALIT√âS √Ä D√âVELOPPER
# =====================================

print_header "2Ô∏è‚É£ FONCTIONNALIT√âS CL√âS √Ä D√âVELOPPER"

echo -e "${BLUE}üéÆ SYST√àME DE JEU MATH√âMATIQUE${NC}"
echo "‚Ä¢ G√©n√©rateur d'exercices dynamiques par niveau"
echo "‚Ä¢ Logique de validation des r√©ponses"
echo "‚Ä¢ Syst√®me de scoring et r√©compenses"
echo "‚Ä¢ Sauvegarde de progression"
echo ""

echo -e "${BLUE}üë§ GESTION DES PROFILS ENFANTS${NC}"
echo "‚Ä¢ Cr√©ation/√©dition de profils"
echo "‚Ä¢ S√©lection d'avatar et personnalisation"
echo "‚Ä¢ Historique des sessions"
echo "‚Ä¢ Statistiques individuelles"
echo ""

echo -e "${BLUE}üí∞ INT√âGRATION PAIEMENTS${NC}"
echo "‚Ä¢ Configuration Stripe/Paddle"
echo "‚Ä¢ Pages de checkout s√©curis√©es"
echo "‚Ä¢ Gestion des abonnements"
echo "‚Ä¢ Webhooks de validation"
echo ""

echo -e "${BLUE}üìä DASHBOARD PARENTS/ENSEIGNANTS${NC}"
echo "‚Ä¢ Suivi des progr√®s en temps r√©el"
echo "‚Ä¢ Rapports d√©taill√©s par enfant"
echo "‚Ä¢ Recommandations personnalis√©es"
echo "‚Ä¢ Export des donn√©es"
echo ""

# =====================================
# √âTAPE 3: D√âVELOPPEMENT TECHNIQUE
# =====================================

print_header "3Ô∏è‚É£ D√âVELOPPEMENT TECHNIQUE"

echo -e "${BLUE}üóÑÔ∏è BASE DE DONN√âES${NC}"
echo "‚Ä¢ Configuration PostgreSQL/MongoDB"
echo "‚Ä¢ Sch√©mas pour profils, progression, exercices"
echo "‚Ä¢ Migrations et seeds"
echo ""

echo -e "${BLUE}üîê AUTHENTIFICATION${NC}"
echo "‚Ä¢ NextAuth.js ou Clerk"
echo "‚Ä¢ Connexion Google/Apple/Email"
echo "‚Ä¢ Gestion des r√¥les (parent/enfant/enseignant)"
echo ""

echo -e "${BLUE}üì± OPTIMISATION MOBILE${NC}"
echo "‚Ä¢ Tests sur Android/iOS"
echo "‚Ä¢ Optimisation tactile"
echo "‚Ä¢ Mode hors-ligne"
echo "‚Ä¢ Notifications push"
echo ""

echo -e "${BLUE}üß™ TESTS ET QUALIT√â${NC}"
echo "‚Ä¢ Tests E2E avec Playwright"
echo "‚Ä¢ Tests unitaires des composants"
echo "‚Ä¢ Tests de performance"
echo "‚Ä¢ Validation d'accessibilit√©"
echo ""

# =====================================
# √âTAPE 4: SCRIPTS UTILES
# =====================================

print_header "4Ô∏è‚É£ SCRIPTS UTILES DISPONIBLES"

print_info "Cr√©er un script pour g√©n√©rer des exercices..."

cat > "scripts/generate-exercises.js" << 'EOF'
#!/usr/bin/env node

// G√©n√©rateur d'exercices math√©matiques pour Math4Child

const levels = {
  cp: { range: [1, 20], operations: ['addition', 'subtraction'] },
  ce1: { range: [1, 100], operations: ['addition', 'subtraction'] },
  ce2: { range: [1, 100], operations: ['addition', 'subtraction', 'multiplication', 'division'] },
  cm1: { range: [1, 1000], operations: ['addition', 'subtraction', 'multiplication', 'division'] },
  cm2: { range: [1, 1000], operations: ['all'] }
};

function generateExercise(level, operation) {
  const config = levels[level];
  const [min, max] = config.range;
  
  const a = Math.floor(Math.random() * (max - min + 1)) + min;
  const b = Math.floor(Math.random() * (max - min + 1)) + min;
  
  switch(operation) {
    case 'addition':
      return { question: `${a} + ${b} = ?`, answer: a + b };
    case 'subtraction':
      return { question: `${Math.max(a,b)} - ${Math.min(a,b)} = ?`, answer: Math.max(a,b) - Math.min(a,b) };
    case 'multiplication':
      const smallA = Math.floor(Math.random() * 10) + 1;
      const smallB = Math.floor(Math.random() * 10) + 1;
      return { question: `${smallA} √ó ${smallB} = ?`, answer: smallA * smallB };
    case 'division':
      const divisor = Math.floor(Math.random() * 9) + 1;
      const quotient = Math.floor(Math.random() * 10) + 1;
      const dividend = divisor * quotient;
      return { question: `${dividend} √∑ ${divisor} = ?`, answer: quotient };
    default:
      return generateExercise(level, 'addition');
  }
}

// G√©n√©rer un set d'exercices
function generateExerciseSet(level, count = 10) {
  const config = levels[level];
  const exercises = [];
  
  for (let i = 0; i < count; i++) {
    const operation = config.operations[Math.floor(Math.random() * config.operations.length)];
    exercises.push({
      id: `${level}_${i + 1}`,
      ...generateExercise(level, operation),
      level,
      operation
    });
  }
  
  return exercises;
}

// Usage en ligne de commande
if (require.main === module) {
  const level = process.argv[2] || 'cp';
  const count = parseInt(process.argv[3]) || 10;
  
  console.log(`üéØ G√©n√©ration de ${count} exercices pour le niveau ${level.toUpperCase()}`);
  console.log(JSON.stringify(generateExerciseSet(level, count), null, 2));
}

module.exports = { generateExercise, generateExerciseSet };
EOF

chmod +x scripts/generate-exercises.js

print_success "G√©n√©rateur d'exercices cr√©√© : scripts/generate-exercises.js"

print_info "Cr√©er un script de d√©ploiement..."

cat > "scripts/deploy.sh" << 'EOF'
#!/bin/bash

# Script de d√©ploiement Math4Child
# Usage: ./scripts/deploy.sh [web|android|ios|all]

set -e

TARGET=${1:-"web"}
echo "üöÄ D√©ploiement Math4Child - Target: $TARGET"

# Nettoyage
rm -rf .next out android/app/build ios/build 2>/dev/null || true

# Installation et v√©rifications
npm ci --silent
npm run type-check
npm run lint

case $TARGET in
    "web")
        echo "üì¶ Build web..."
        npm run build
        echo "‚úÖ Build web termin√©"
        ;;
    "android")
        echo "ü§ñ Build Android..."
        npm run build
        npx cap sync android
        echo "‚úÖ Build Android termin√© - Ouvrir dans Android Studio"
        ;;
    "ios")
        if [[ "$OSTYPE" != "darwin"* ]]; then
            echo "‚ùå iOS build n√©cessite macOS"
            exit 1
        fi
        echo "üçé Build iOS..."
        npm run build
        npx cap sync ios
        npx cap open ios
        echo "‚úÖ Build iOS pr√©par√© - Ouvrir dans Xcode"
        ;;
    "all")
        echo "üåç Build complet..."
        npm run build
        npx cap sync android
        if [[ "$OSTYPE" == "darwin"* ]]; then
            npx cap sync ios
        fi
        echo "‚úÖ Build complet termin√©"
        ;;
    *)
        echo "‚ùå Target invalide: $TARGET"
        echo "Usage: ./scripts/deploy.sh [web|android|ios|all]"
        exit 1
        ;;
esac

echo "üéâ D√©ploiement termin√©!"
EOF

chmod +x scripts/deploy.sh

print_success "Script de d√©ploiement cr√©√© : scripts/deploy.sh"

# =====================================
# √âTAPE 5: RESSOURCES ET DOCUMENTATION
# =====================================

print_header "5Ô∏è‚É£ RESSOURCES ET PROCHAINES √âTAPES"

echo -e "${BLUE}üìö DOCUMENTATION RECOMMAND√âE${NC}"
echo "‚Ä¢ Next.js: https://nextjs.org/docs"
echo "‚Ä¢ Capacitor: https://capacitorjs.com/docs"
echo "‚Ä¢ TypeScript: https://www.typescriptlang.org/docs"
echo "‚Ä¢ Tailwind CSS: https://tailwindcss.com/docs"
echo "‚Ä¢ Playwright: https://playwright.dev/docs"
echo ""

echo -e "${BLUE}üõ†Ô∏è OUTILS DE D√âVELOPPEMENT${NC}"
echo "‚Ä¢ VS Code + Extensions TypeScript/Tailwind"
echo "‚Ä¢ Android Studio pour Android"
echo "‚Ä¢ Xcode pour iOS (macOS uniquement)"
echo "‚Ä¢ Postman pour tester les APIs"
echo ""

echo -e "${BLUE}‚òÅÔ∏è H√âBERGEMENT ET D√âPLOIEMENT${NC}"
echo "‚Ä¢ Vercel (recommand√© pour Next.js)"
echo "‚Ä¢ Netlify (alternative)"
echo "‚Ä¢ Google Play Store (Android)"
echo "‚Ä¢ Apple App Store (iOS)"
echo ""

# =====================================
# √âTAPE 6: COMMANDES UTILES
# =====================================

print_header "6Ô∏è‚É£ COMMANDES UTILES"

echo -e "${YELLOW}# D√©veloppement${NC}"
echo "npm run dev                    # Serveur de d√©veloppement"
echo "npm run type-check            # V√©rification TypeScript"
echo "npm run lint                  # V√©rification ESLint"
echo ""

echo -e "${YELLOW}# Build et Tests${NC}"
echo "npm run build                 # Build de production"
echo "npm run test                  # Tests Playwright"
echo "npm run test:headed           # Tests avec interface"
echo ""

echo -e "${YELLOW}# Mobile${NC}"
echo "npx cap sync android          # Sync Android"
echo "npx cap run android           # Lancer sur Android"
echo "npx cap open android          # Ouvrir Android Studio"
echo "npx cap sync ios              # Sync iOS (macOS uniquement)"
echo "npx cap open ios              # Ouvrir Xcode (macOS uniquement)"
echo ""

echo -e "${YELLOW}# Exercices (scripts personnalis√©s)${NC}"
echo "node scripts/generate-exercises.js cp 20    # 20 exercices CP"
echo "./scripts/deploy.sh web                     # D√©ploiement web"
echo ""

# =====================================
# R√âSUM√â FINAL
# =====================================

print_header "üéâ R√âSUM√â ET PROCHAINES ACTIONS"

echo -e "${GREEN}‚úÖ √âTAT ACTUEL${NC}"
echo "‚Ä¢ Application Next.js fonctionnelle"
echo "‚Ä¢ TypeScript sans erreurs"
echo "‚Ä¢ Interface utilisateur compl√®te"
echo "‚Ä¢ Support multilingue"
echo "‚Ä¢ Syst√®me de niveaux CP ‚Üí CM2"
echo "‚Ä¢ Plans d'abonnement configur√©s"
echo ""

echo -e "${BLUE}üéØ PRIORIT√âS IMM√âDIATES${NC}"
echo "1. Tester l'application actuelle"
echo "2. Impl√©menter la logique de jeu math√©matique"
echo "3. Ajouter l'authentification"
echo "4. Configurer la base de donn√©es"
echo "5. Int√©grer les paiements"
echo ""

echo -e "${PURPLE}üöÄ ACTIONS RECOMMAND√âES${NC}"
echo "1. ${YELLOW}cd apps/math4child && npm run dev${NC} - Lancer l'app"
echo "2. ${YELLOW}node scripts/generate-exercises.js cp 10${NC} - Tester le g√©n√©rateur"
echo "3. ${YELLOW}npm run test${NC} - Lancer les tests"
echo "4. Commencer √† d√©velopper la logique de jeu"
echo "5. Configurer votre base de donn√©es pr√©f√©r√©e"
echo ""

echo -e "${CYAN}üí° CONSEILS${NC}"
echo "‚Ä¢ Commencez par le g√©n√©rateur d'exercices"
echo "‚Ä¢ Testez r√©guli√®rement sur mobile"
echo "‚Ä¢ Documentez vos API au fur et √† mesure"
echo "‚Ä¢ Utilisez les TypeScript types strictement"
echo ""

print_success "Guide des prochaines √©tapes cr√©√© avec succ√®s!"
print_info "Votre application Math4Child est pr√™te pour le d√©veloppement avanc√©!"

cd ../..