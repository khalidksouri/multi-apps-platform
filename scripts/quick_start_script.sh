#!/bin/bash

# =============================================================================
# ‚ö° D√âMARRAGE RAPIDE MATH4CHILD
# =============================================================================

GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_header() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë${NC}              ${YELLOW}‚ö° D√âMARRAGE RAPIDE MATH4CHILD${NC}               ${BLUE}‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier l'√©tat du projet
check_project_status() {
    echo -e "${YELLOW}üîç V√©rification de l'√©tat du projet...${NC}"
    echo ""
    
    # V√©rifier si le projet existe
    if [ -d "apps/math4child" ]; then
        print_success "Projet trouv√© dans apps/math4child"
        cd apps/math4child
        
        # V√©rifier package.json
        if [ -f "package.json" ]; then
            print_success "Configuration package.json OK"
        else
            print_error "package.json manquant"
            return 1
        fi
        
        # V√©rifier node_modules
        if [ -d "node_modules" ]; then
            print_success "D√©pendances install√©es"
        else
            print_info "Installation des d√©pendances n√©cessaire"
            npm install --legacy-peer-deps
        fi
        
        # V√©rifier les fichiers principaux
        if [ -f "src/app/page.tsx" ]; then
            print_success "Application principale OK"
        else
            print_error "Fichiers application manquants"
            return 1
        fi
        
        return 0
    else
        print_error "Projet non trouv√© dans apps/math4child"
        echo ""
        echo -e "${YELLOW}üí° Pour cr√©er le projet, lancez:${NC}"
        echo "   ./math4child_complete_script.sh"
        return 1
    fi
}

# D√©marrer le serveur de d√©veloppement
start_dev_server() {
    echo ""
    echo -e "${YELLOW}üöÄ D√©marrage du serveur de d√©veloppement...${NC}"
    echo ""
    
    # V√©rifier si le port 3000 est libre
    if lsof -i :3000 >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Le port 3000 est d√©j√† utilis√©${NC}"
        echo ""
        echo "Voulez-vous:"
        echo "1) Arr√™ter le processus existant et red√©marrer"
        echo "2) Utiliser un autre port"
        echo "3) Annuler"
        echo ""
        read -p "Votre choix (1-3): " choice
        
        case $choice in
            1)
                print_info "Arr√™t du processus sur le port 3000..."
                lsof -ti:3000 | xargs kill -9 2>/dev/null || true
                sleep 2
                ;;
            2)
                print_info "D√©marrage sur le port 3001..."
                npm run dev -- -p 3001 &
                sleep 3
                echo ""
                echo -e "${GREEN}üåê Application disponible sur: http://localhost:3001${NC}"
                return 0
                ;;
            3)
                print_info "Annulation du d√©marrage"
                return 1
                ;;
        esac
    fi
    
    # D√©marrer le serveur
    print_info "Lancement du serveur Next.js..."
    npm run dev &
    DEV_PID=$!
    
    # Attendre que le serveur d√©marre
    print_info "Attente du d√©marrage du serveur..."
    sleep 5
    
    # V√©rifier si le serveur r√©pond
    if curl -s http://localhost:3000 > /dev/null; then
        print_success "Serveur d√©marr√© avec succ√®s !"
        echo ""
        echo -e "${GREEN}üåê Application disponible sur: http://localhost:3000${NC}"
        echo ""
        echo -e "${YELLOW}üí° Commandes utiles :${NC}"
        echo "   ‚Ä¢ Ctrl+C pour arr√™ter le serveur"
        echo "   ‚Ä¢ npm run build pour build production"
        echo "   ‚Ä¢ npm run test:optimal pour les tests"
        echo ""
        
        # Proposer d'ouvrir le navigateur
        if command -v open >/dev/null 2>&1; then
            echo -e "${BLUE}üåê Ouvrir dans le navigateur ? (y/n):${NC}"
            read -t 5 -n 1 open_browser
            if [ "$open_browser" = "y" ] || [ "$open_browser" = "Y" ]; then
                open http://localhost:3000
            fi
        fi
        
        # Garder le script actif
        echo ""
        echo -e "${BLUE}üìã Serveur actif - Appuyez sur Ctrl+C pour arr√™ter${NC}"
        
        # Attendre que l'utilisateur arr√™te le serveur
        wait $DEV_PID
        
    else
        print_error "√âchec du d√©marrage du serveur"
        echo ""
        echo -e "${YELLOW}üí° Pour diagnostiquer:${NC}"
        echo "   1. V√©rifiez les erreurs ci-dessus"
        echo "   2. Lancez: npm run type-check"
        echo "   3. Lancez: npm run build"
        echo "   4. Essayez: ./final_fix_script.sh"
        
        # Arr√™ter le processus
        kill $DEV_PID 2>/dev/null || true
        return 1
    fi
}

# Afficher les informations du projet
show_project_info() {
    echo -e "${BLUE}üìä INFORMATIONS DU PROJET${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    # Version Node.js
    echo "Node.js: $(node --version)"
    echo "npm: $(npm --version)"
    
    # D√©pendances principales
    echo ""
    echo "üì¶ D√©pendances principales:"
    npm ls --depth=0 2>/dev/null | grep -E "(next|react|typescript)" | head -5
    
    # Scripts disponibles
    echo ""
    echo "üîß Scripts disponibles:"
    npm run 2>/dev/null | grep -v "Lifecycle scripts" | grep -E "(dev|build|test|lint)" | head -10
    
    # Taille du projet
    echo ""
    echo "üìÅ Taille du projet:"
    du -sh . 2>/dev/null || echo "Calcul impossible"
    
    echo ""
}

# Menu principal
show_menu() {
    echo -e "${YELLOW}üéØ Que souhaitez-vous faire ?${NC}"
    echo ""
    echo "1) üöÄ D√©marrer le serveur de d√©veloppement"
    echo "2) üèóÔ∏è  Build de production"
    echo "3) üß™ Lancer les tests"
    echo "4) üîç V√©rifications (lint + type-check)"
    echo "5) üìä Informations du projet"
    echo "6) üîß Corriger les erreurs (script final)"
    echo "7) üßπ Nettoyer le cache"
    echo "0) ‚ùå Quitter"
    echo ""
    read -p "Votre choix (0-7): " choice
    
    case $choice in
        1)
            start_dev_server
            ;;
        2)
            echo ""
            print_info "Build de production..."
            if npm run build; then
                print_success "Build r√©ussi !"
                echo ""
                echo -e "${BLUE}Pour d√©marrer en production:${NC}"
                echo "   npm run start"
            else
                print_error "Build √©chou√©"
            fi
            ;;
        3)
            echo ""
            print_info "Lancement des tests..."
            npm run test:optimal || print_error "Tests √©chou√©s"
            ;;
        4)
            echo ""
            print_info "V√©rifications..."
            echo "üîç Lint:"
            npm run lint || true
            echo ""
            echo "üîç TypeScript:"
            npm run type-check || true
            ;;
        5)
            echo ""
            show_project_info
            ;;
        6)
            echo ""
            print_info "Lancement du script de correction..."
            if [ -f "../final_fix_script.sh" ]; then
                ../final_fix_script.sh
            elif [ -f "../../final_fix_script.sh" ]; then
                ../../final_fix_script.sh
            else
                print_error "Script de correction non trouv√©"
            fi
            ;;
        7)
            echo ""
            print_info "Nettoyage du cache..."
            npm run clean 2>/dev/null || true
            npm cache clean --force
            print_success "Cache nettoy√©"
            ;;
        0)
            print_info "Au revoir !"
            exit 0
            ;;
        *)
            print_error "Choix invalide"
            show_menu
            ;;
    esac
    
    echo ""
    echo -e "${BLUE}Appuyez sur Entr√©e pour continuer...${NC}"
    read -r
    show_menu
}

# Fonction principale
main() {
    print_header
    
    if check_project_status; then
        show_menu
    else
        echo ""
        print_error "Impossible de continuer - projet non configur√©"
        exit 1
    fi
}

# Gestion propre de l'arr√™t
trap 'echo ""; print_info "Arr√™t en cours..."; exit 0' INT

# Ex√©cution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi