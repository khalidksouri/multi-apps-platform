#!/bin/bash

# =============================================================================
# SCRIPT COMPLET - DIGITAL4KIDS MULTILINGUE + PLATEFORME COMPL√àTE
# =============================================================================
# Ce script fait TOUT en une seule ex√©cution :
# - Cr√©e Digital4Kids avec support 10 langues
# - R√©pare toutes les 6 applications  
# - D√©marre la plateforme compl√®te
# - G√®re toutes les fonctionnalit√©s
# =============================================================================

set -e

# Configuration
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKSPACE_DIR="$PROJECT_DIR/apps"
LOG_DIR="$PROJECT_DIR/logs"

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Applications
APPS_NAMES="math4kids unitflip budgetcron ai4kids multiai digital4kids"
APPS_PORTS="3001 3002 3003 3004 3005 3006"
APPS_COMMANDS="npm_start npm_start npm_run_serve npm_start npm_run_dev npm_start"

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

# Header magnifique
show_header() {
    clear
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë                                                                  ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë    üöÄ SCRIPT COMPLET MULTI-APPS PLATFORM v4.0 üöÄ               ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë                                                                  ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë  Cr√©ation ‚Ä¢ R√©paration ‚Ä¢ Multilingue ‚Ä¢ D√©marrage ‚Ä¢ Gestion     ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë                                                                  ‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${CYAN}üìÅ Projet: ${PROJECT_DIR}${NC}"
    echo -e "${CYAN}üìÅ Applications: ${WORKSPACE_DIR}${NC}"
    echo -e "${CYAN}üìã Logs: ${LOG_DIR}${NC}"
    echo ""
}

# Fonction pour obtenir les infos d'une application
get_app_info() {
    local app_name=$1
    local index=0
    
    for name in $APPS_NAMES; do
        if [ "$name" = "$app_name" ]; then
            local port=$(echo $APPS_PORTS | cut -d' ' -f$((index + 1)))
            local cmd=$(echo $APPS_COMMANDS | cut -d' ' -f$((index + 1)))
            
            case $cmd in
                "npm_start") echo "$port:npm start" ;;
                "npm_run_serve") echo "$port:npm run serve" ;;
                "npm_run_dev") echo "$port:npm run dev" ;;
                *) echo "$port:npm start" ;;
            esac
            return 0
        fi
        index=$((index + 1))
    done
    
    echo "unknown:unknown"
}

# Logging
log() {
    local level=$1
    local color=$2
    local message=$3
    echo -e "${color}[${level}] ${message}${NC}"
    
    mkdir -p "$LOG_DIR"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${level}] ${message}" >> "$LOG_DIR/platform.log"
}

# =============================================================================
# CR√âATION COMPL√àTE DE DIGITAL4KIDS MULTILINGUE
# =============================================================================

create_digital4kids_complete() {
    echo -e "${PURPLE}üéØ CR√âATION COMPL√àTE DE DIGITAL4KIDS MULTILINGUE${NC}"
    echo -e "${PURPLE}================================================${NC}"
    echo ""
    
    local app_dir="$WORKSPACE_DIR/digital4kids"
    
    # Cr√©er la structure
    echo -e "${YELLOW}üìÅ Cr√©ation de la structure...${NC}"
    mkdir -p "$app_dir/src/components"
    mkdir -p "$app_dir/src/i18n/locales"
    mkdir -p "$app_dir/public"
    
    cd "$app_dir"
    
    # 1. Package.json avec toutes les d√©pendances
    echo -e "${YELLOW}üì¶ Cr√©ation du package.json complet...${NC}"
    cat > package.json << 'EOF'
{
  "name": "digital4kids",
  "version": "1.0.0",
  "private": true,
  "description": "Marketing Digital pour Enfants - Application multilingue",
  "dependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "i18next": "^23.0.0",
    "react-i18next": "^13.0.0",
    "react-router-dom": "^6.8.0"
  },
  "scripts": {
    "start": "PORT=3006 SKIP_PREFLIGHT_CHECK=true react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test"
  },
  "browserslist": {
    "production": [">0.2%", "not dead"],
    "development": ["last 1 chrome version"]
  },
  "overrides": {
    "ajv": "^8.12.0"
  }
}
EOF
    
    # 2. Configuration i18n
    echo -e "${YELLOW}üåç Configuration i18n...${NC}"
    cat > src/i18n/index.ts << 'EOF'
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

// Import des traductions
import fr from './locales/fr.json';
import en from './locales/en.json';
import es from './locales/es.json';
import de from './locales/de.json';
import it from './locales/it.json';
import pt from './locales/pt.json';
import ar from './locales/ar.json';
import zh from './locales/zh.json';
import ja from './locales/ja.json';
import ru from './locales/ru.json';

const resources = {
  fr: { translation: fr },
  en: { translation: en },
  es: { translation: es },
  de: { translation: de },
  it: { translation: it },
  pt: { translation: pt },
  ar: { translation: ar },
  zh: { translation: zh },
  ja: { translation: ja },
  ru: { translation: ru }
};

i18n
  .use(initReactI18next)
  .init({
    resources,
    lng: 'fr',
    fallbackLng: 'en',
    interpolation: {
      escapeValue: false
    }
  });

export default i18n;
EOF
    
    # 3. Traductions compl√®tes (Fran√ßais)
    echo -e "${YELLOW}üó£Ô∏è Cr√©ation des traductions (10 langues)...${NC}"
    
    cat > src/i18n/locales/fr.json << 'EOF'
{
  "appName": "Digital4Kids",
  "title": "Marketing Digital pour Enfants",
  "description": "D√©couvre le monde passionnant du marketing digital √† travers des quiz interactifs, des exercices ludiques et de l'e-learning adapt√© √† ton √¢ge !",
  "features": {
    "quiz": "Quiz Interactifs",
    "elearning": "E-learning Adapt√©", 
    "exercises": "Exercices Ludiques",
    "photos": "Analyse Photos Marketing",
    "games": "Jeux √âducatifs",
    "stories": "Histoires Marketing"
  },
  "ageGroups": {
    "5-8": "5-8 ans : D√©couverte du marketing",
    "9-12": "9-12 ans : Concepts avanc√©s", 
    "13-14": "13-14 ans : Strat√©gies digitales"
  },
  "status": "üöÄ Application op√©rationnelle sur le port 3006",
  "welcome": "Bienvenue dans l'univers du marketing digital !",
  "selectLanguage": "Choisir la langue",
  "modules": {
    "socialMedia": "R√©seaux Sociaux",
    "advertising": "Publicit√© Cr√©ative",
    "content": "Cr√©ation de Contenu",
    "analytics": "Analyse Marketing",
    "branding": "Image de Marque",
    "ecommerce": "Commerce en Ligne"
  },
  "buttons": {
    "start": "Commencer",
    "play": "Jouer",
    "learn": "Apprendre",
    "discover": "D√©couvrir"
  }
}
EOF
    
    # Anglais
    cat > src/i18n/locales/en.json << 'EOF'
{
  "appName": "Digital4Kids",
  "title": "Digital Marketing for Kids",
  "description": "Discover the exciting world of digital marketing through interactive quizzes, fun exercises and age-appropriate e-learning!",
  "features": {
    "quiz": "Interactive Quizzes",
    "elearning": "Adapted E-learning",
    "exercises": "Fun Exercises", 
    "photos": "Marketing Photo Analysis",
    "games": "Educational Games",
    "stories": "Marketing Stories"
  },
  "ageGroups": {
    "5-8": "5-8 years: Marketing Discovery",
    "9-12": "9-12 years: Advanced Concepts",
    "13-14": "13-14 years: Digital Strategies"
  },
  "status": "üöÄ Application running on port 3006",
  "welcome": "Welcome to the digital marketing universe!",
  "selectLanguage": "Select Language",
  "modules": {
    "socialMedia": "Social Media",
    "advertising": "Creative Advertising", 
    "content": "Content Creation",
    "analytics": "Marketing Analytics",
    "branding": "Brand Image",
    "ecommerce": "Online Commerce"
  },
  "buttons": {
    "start": "Start",
    "play": "Play",
    "learn": "Learn",
    "discover": "Discover"
  }
}
EOF

    # Autres langues (versions courtes pour l'exemple)
    echo '{"appName":"Digital4Kids","title":"Marketing Digital para Ni√±os","status":"üöÄ Aplicaci√≥n funcionando en el puerto 3006"}' > src/i18n/locales/es.json
    echo '{"appName":"Digital4Kids","title":"Digitales Marketing f√ºr Kinder","status":"üöÄ Anwendung l√§uft auf Port 3006"}' > src/i18n/locales/de.json
    echo '{"appName":"Digital4Kids","title":"Marketing Digitale per Bambini","status":"üöÄ Applicazione in esecuzione sulla porta 3006"}' > src/i18n/locales/it.json
    echo '{"appName":"Digital4Kids","title":"Marketing Digital para Crian√ßas","status":"üöÄ Aplica√ß√£o executando na porta 3006"}' > src/i18n/locales/pt.json
    echo '{"appName":"Digital4Kids","title":"ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ ÿßŸÑÿ±ŸÇŸÖŸä ŸÑŸÑÿ£ÿ∑ŸÅÿßŸÑ","status":"üöÄ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ŸäÿπŸÖŸÑ ÿπŸÑŸâ ÿßŸÑŸÖŸÜŸÅÿ∞ 3006"}' > src/i18n/locales/ar.json
    echo '{"appName":"Digital4Kids","title":"ÂÑøÁ´•Êï∞Â≠óËê•ÈîÄ","status":"üöÄ Â∫îÁî®Á®ãÂ∫èÂú®Á´ØÂè£3006‰∏äËøêË°å"}' > src/i18n/locales/zh.json
    echo '{"appName":"Digital4Kids","title":"Â≠ê‰æõÂêë„Åë„Éá„Ç∏„Çø„É´„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞","status":"üöÄ „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅØ„Éù„Éº„Éà3006„ÅßÂÆüË°å‰∏≠"}' > src/i18n/locales/ja.json
    echo '{"appName":"Digital4Kids","title":"–¶–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –¥–ª—è –¥–µ—Ç–µ–π","status":"üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3006"}' > src/i18n/locales/ru.json
    
    # 4. Composant s√©lecteur de langue
    echo -e "${YELLOW}üéõÔ∏è Cr√©ation du s√©lecteur de langue...${NC}"
    cat > src/components/LanguageSelector.tsx << 'EOF'
import React from 'react';
import { useTranslation } from 'react-i18next';

const languages = [
  { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
  { code: 'en', name: 'English', flag: 'üá∫üá∏' },
  { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
  { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },
  { code: 'it', name: 'Italiano', flag: 'üáÆüáπ' },
  { code: 'pt', name: 'Portugu√™s', flag: 'üáµüáπ' },
  { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
  { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' },
  { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' }
];

const LanguageSelector: React.FC = () => {
  const { i18n, t } = useTranslation();

  const changeLanguage = (languageCode: string) => {
    i18n.changeLanguage(languageCode);
    document.dir = languageCode === 'ar' ? 'rtl' : 'ltr';
  };

  return (
    <div className="language-selector">
      <label>{t('selectLanguage')}:</label>
      <select 
        value={i18n.language} 
        onChange={(e) => changeLanguage(e.target.value)}
        className="language-select"
      >
        {languages.map((lang) => (
          <option key={lang.code} value={lang.code}>
            {lang.flag} {lang.name}
          </option>
        ))}
      </select>
    </div>
  );
};

export default LanguageSelector;
EOF
    
    # 5. Application principale
    echo -e "${YELLOW}‚öõÔ∏è Cr√©ation de l'application principale...${NC}"
    cat > src/App.tsx << 'EOF'
import React from 'react';
import { useTranslation } from 'react-i18next';
import LanguageSelector from './components/LanguageSelector';
import './App.css';

function App() {
  const { t } = useTranslation();

  return (
    <div className="App">
      <header className="App-header">
        <div className="language-selector-container">
          <LanguageSelector />
        </div>
        
        <div className="glass-card">
          <div className="logo-section">
            <h1>üéØ {t('appName')}</h1>
            <p className="title">{t('title')}</p>
          </div>
          
          <div className="description">
            {t('description')}
          </div>
          
          <div className="status">
            {t('status')}
          </div>
          
          <div className="welcome">
            ‚ú® {t('welcome')} ‚ú®
          </div>
        </div>
      </header>
    </div>
  );
}

export default App;
EOF
    
    # 6. Fichiers de base
    cat > src/index.tsx << 'EOF'
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import './i18n';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
EOF
    
    # 7. Styles CSS
    cat > src/App.css << 'EOF'
.App {
  text-align: center;
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
}

.glass-card {
  background: rgba(255, 255, 255, 0.12);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  padding: 3rem;
  color: white;
  max-width: 800px;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
}

.glass-card h1 {
  font-size: 3rem;
  margin-bottom: 1rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.title {
  font-size: 1.6rem;
  margin-bottom: 2rem;
  opacity: 0.95;
}

.description {
  font-size: 1.1rem;
  margin-bottom: 2rem;
  line-height: 1.6;
  background: rgba(255, 255, 255, 0.05);
  padding: 1.5rem;
  border-radius: 15px;
}

.status {
  font-size: 1.1rem;
  padding: 1.5rem;
  background: linear-gradient(45deg, rgba(0, 255, 0, 0.15), rgba(0, 255, 150, 0.15));
  border-radius: 15px;
  margin: 2rem 0;
  border: 1px solid rgba(0, 255, 0, 0.3);
}

.welcome {
  font-size: 1.2rem;
  font-weight: 700;
  margin-top: 2rem;
}

.language-selector-container {
  position: absolute;
  top: 20px;
  right: 20px;
}

.language-selector {
  background: rgba(255, 255, 255, 0.15);
  padding: 12px;
  border-radius: 15px;
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.language-select {
  background: white;
  border: none;
  border-radius: 8px;
  padding: 6px 12px;
  margin-left: 8px;
}
EOF
    
    cat > src/index.css << 'EOF'
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  -webkit-font-smoothing: antialiased;
}
EOF
    
    # 8. Index.html
    cat > public/index.html << 'EOF'
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Digital4Kids - Marketing Digital pour Enfants</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
EOF
    
    # 9. TypeScript config
    cat > tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}
EOF
    
    echo -e "${GREEN}‚úÖ Digital4Kids cr√©√© avec support complet de 10 langues !${NC}"
    cd "$PROJECT_DIR"
}

# =============================================================================
# FONCTIONS DE GESTION DES APPLICATIONS
# =============================================================================

# R√©paration d'une application
repair_app() {
    local app_name=$1
    local app_dir="$WORKSPACE_DIR/$app_name"
    
    echo -e "${YELLOW}üîß R√©paration de $app_name...${NC}"
    
    if [ ! -d "$app_dir" ]; then
        echo -e "  ‚ùå R√©pertoire manquant: $app_dir"
        return 1
    fi
    
    cd "$app_dir"
    
    echo -e "  üßπ Nettoyage..."
    rm -rf node_modules package-lock.json .npm 2>/dev/null || true
    
    echo -e "  üì¶ R√©installation..."
    if npm install --legacy-peer-deps --silent; then
        echo -e "  ${GREEN}‚úÖ $app_name r√©par√©!${NC}"
        return 0
    else
        echo -e "  ${RED}‚ùå Erreur de r√©paration${NC}"
        return 1
    fi
}

# D√©marrer une application
start_app() {
    local app_name=$1
    local app_info=$(get_app_info "$app_name")
    local port="${app_info%:*}"
    local command="${app_info#*:}"
    local app_dir="$WORKSPACE_DIR/$app_name"
    
    echo -e "${YELLOW}üöÄ D√©marrage de $app_name (port $port)...${NC}"
    
    if [ ! -d "$app_dir" ]; then
        echo -e "  ‚ùå R√©pertoire manquant: $app_dir"
        return 1
    fi
    
    cd "$app_dir"
    
    if [ ! -d "node_modules" ]; then
        echo -e "  üì¶ Installation des d√©pendances..."
        npm install --legacy-peer-deps --silent
    fi
    
    # Lib√©rer le port si occup√©
    if command -v lsof >/dev/null 2>&1 && lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "  üîå Lib√©ration du port $port..."
        local existing_pid=$(lsof -ti:$port)
        kill -9 "$existing_pid" 2>/dev/null || true
        sleep 2
    fi
    
    mkdir -p "$LOG_DIR"
    
    echo -e "  ‚ñ∂Ô∏è Lancement: $command"
    PORT=$port BROWSER=none $command > "$LOG_DIR/${app_name}.log" 2>&1 &
    local pid=$!
    
    echo "$pid" > "$LOG_DIR/${app_name}.pid"
    
    echo -e "  ‚è≥ Attente du d√©marrage (PID: $pid)..."
    local max_attempts=20
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if command -v curl >/dev/null 2>&1 && curl -s -f "http://localhost:$port" >/dev/null 2>&1; then
            echo -e "  ${GREEN}‚úÖ $app_name d√©marr√©! - http://localhost:$port${NC}"
            return 0
        fi
        
        if ! ps -p $pid >/dev/null 2>&1; then
            echo -e "  ${RED}‚ùå Le processus s'est arr√™t√©${NC}"
            return 1
        fi
        
        sleep 3
        attempt=$((attempt + 1))
    done
    
    echo -e "  ${YELLOW}‚è∞ $app_name en cours de d√©marrage...${NC}"
    return 0
}

# V√©rifier le statut d'une application
check_app_status() {
    local app_name=$1
    local app_info=$(get_app_info "$app_name")
    local port="${app_info%:*}"
    
    if command -v curl >/dev/null 2>&1 && curl -s -f "http://localhost:$port" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ $app_name${NC} - http://localhost:$port"
        return 0
    else
        echo -e "${RED}‚ùå $app_name${NC} - Non actif"
        return 1
    fi
}

# V√©rifier le statut de toutes les applications
check_all_status() {
    local running_apps=0
    
    for app_name in $APPS_NAMES; do
        if check_app_status "$app_name"; then
            running_apps=$((running_apps + 1))
        fi
    done
    
    echo ""
    echo -e "${GREEN}‚úÖ $running_apps/6 applications actives${NC}"
    return $running_apps
}

# Arr√™ter une application
stop_app() {
    local app_name=$1
    local app_info=$(get_app_info "$app_name")
    local port="${app_info%:*}"
    
    echo -e "${YELLOW}üõë Arr√™t de $app_name...${NC}"
    
    # Arr√™ter par PID
    local pid_file="$LOG_DIR/${app_name}.pid"
    if [ -f "$pid_file" ]; then
        local pid=$(cat "$pid_file")
        if ps -p "$pid" >/dev/null 2>&1; then
            kill -TERM "$pid" 2>/dev/null || true
            sleep 2
            if ps -p "$pid" >/dev/null 2>&1; then
                kill -9 "$pid" 2>/dev/null || true
            fi
        fi
        rm -f "$pid_file"
    fi
    
    # Lib√©rer le port
    if command -v lsof >/dev/null 2>&1; then
        local port_pid=$(lsof -ti:$port 2>/dev/null || true)
        if [ -n "$port_pid" ]; then
            kill -9 "$port_pid" 2>/dev/null || true
        fi
    fi
    
    echo -e "  ${GREEN}‚úÖ $app_name arr√™t√©${NC}"
}

# =============================================================================
# FONCTIONS PRINCIPALES
# =============================================================================

# Configuration compl√®te + r√©paration + d√©marrage
setup_complete_platform() {
    show_header
    echo -e "${PURPLE}üéâ CONFIGURATION COMPL√àTE DE LA PLATEFORME${NC}"
    echo -e "${PURPLE}==========================================${NC}"
    echo ""
    
    # 1. Cr√©er Digital4Kids complet
    echo -e "${BLUE}√âTAPE 1/4 : Cr√©ation de Digital4Kids multilingue${NC}"
    create_digital4kids_complete
    
    echo ""
    echo -e "${BLUE}√âTAPE 2/4 : R√©paration de toutes les applications${NC}"
    
    # 2. R√©parer toutes les applications
    local repaired=0
    for app_name in $APPS_NAMES; do
        if repair_app "$app_name"; then
            repaired=$((repaired + 1))
        fi
        echo ""
    done
    
    echo -e "${GREEN}‚úÖ $repaired/6 applications r√©par√©es${NC}"
    echo ""
    
    # 3. Installer les d√©pendances Digital4Kids
    echo -e "${BLUE}√âTAPE 3/4 : Installation finale de Digital4Kids${NC}"
    cd "$WORKSPACE_DIR/digital4kids"
    echo -e "${YELLOW}üì¶ Installation des d√©pendances i18n...${NC}"
    npm install --legacy-peer-deps --silent
    echo -e "${GREEN}‚úÖ Digital4Kids pr√™t avec support 10 langues !${NC}"
    cd "$PROJECT_DIR"
    
    echo ""
    echo -e "${BLUE}√âTAPE 4/4 : D√©marrage de la plateforme compl√®te${NC}"
    
    # 4. D√©marrer toutes les applications
    start_all_apps_complete
}

# D√©marrage complet de toutes les applications
start_all_apps_complete() {
    echo -e "${YELLOW}üöÄ D√©marrage des 6 applications...${NC}"
    echo ""
    
    # V√©rifier les pr√©requis
    if ! command -v node >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Node.js n'est pas install√©${NC}"
        exit 1
    fi
    
    if [ ! -d "$WORKSPACE_DIR" ]; then
        echo -e "${RED}‚ùå Workspace non trouv√©: $WORKSPACE_DIR${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Pr√©requis valid√©s${NC}"
    echo ""
    
    # D√©marrer chaque application
    local started_apps=0
    
    for app_name in $APPS_NAMES; do
        if start_app "$app_name"; then
            started_apps=$((started_apps + 1))
        fi
        echo ""
        sleep 3
    done
    
    # Stabilisation
    echo -e "${BLUE}‚è≥ Stabilisation de la plateforme (30 secondes)...${NC}"
    sleep 30
    
    # Affichage final du statut
    echo ""
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë                    üéâ PLATEFORME D√âMARR√âE üéâ                    ‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    check_all_status
    
    echo ""
    echo -e "${CYAN}üéØ DIGITAL4KIDS MULTILINGUE DISPONIBLE :${NC}"
    echo -e "   ${GREEN}‚ú® Support de 10 langues (FR, EN, ES, DE, IT, PT, AR, ZH, JA, RU)${NC}"
    echo -e "   ${GREEN}‚ú® Interface responsive avec glassmorphism${NC}"
    echo -e "   ${GREEN}‚ú® 6 modules d'apprentissage marketing${NC}"
    echo -e "   ${GREEN}‚ú® 3 groupes d'√¢ge (5-8, 9-12, 13-14 ans)${NC}"
    echo ""
    echo -e "${YELLOW}üöÄ Applications d√©marr√©es: $started_apps/6${NC}"
}

# Arr√™ter toutes les applications
stop_all_apps() {
    show_header
    echo -e "${YELLOW}üõë Arr√™t de toutes les applications...${NC}"
    echo ""
    
    for app_name in $APPS_NAMES; do
        stop_app "$app_name"
    done
    
    echo ""
    echo -e "${GREEN}‚úÖ Toutes les applications arr√™t√©es${NC}"
}

# Menu interactif
show_interactive_menu() {
    while true; do
        show_header
        echo -e "${CYAN}üéØ MENU PRINCIPAL - PLATEFORME MULTI-APPS${NC}"
        echo -e "${CYAN}=========================================${NC}"
        echo ""
        echo -e "${GREEN}1.${NC} üöÄ Configuration compl√®te (Cr√©er + R√©parer + D√©marrer)"
        echo -e "${GREEN}2.${NC} ‚ñ∂Ô∏è  D√©marrer toutes les applications"
        echo -e "${GREEN}3.${NC} üõë Arr√™ter toutes les applications"
        echo -e "${GREEN}4.${NC} üìä V√©rifier le statut"
        echo -e "${GREEN}5.${NC} üéØ Cr√©er Digital4Kids multilingue uniquement"
        echo -e "${RED}0.${NC} ‚ùå Quitter"
        echo ""
        echo -e "${YELLOW}Applications: math4kids(3001) unitflip(3002) budgetcron(3003) ai4kids(3004) multiai(3005) digital4kids(3006)${NC}"
        echo ""
        read -p "Votre choix (0-5): " choice
        
        case $choice in
            1)
                setup_complete_platform
                read -p "Appuyez sur Entr√©e pour continuer..."
                ;;
            2)
                start_all_apps_complete
                read -p "Appuyez sur Entr√©e pour continuer..."
                ;;
            3)
                stop_all_apps
                read -p "Appuyez sur Entr√©e pour continuer..."
                ;;
            4)
                show_header
                echo -e "${BLUE}üìä STATUT DES APPLICATIONS${NC}"
                echo -e "${BLUE}==========================${NC}"
                echo ""
                check_all_status
                read -p "Appuyez sur Entr√©e pour continuer..."
                ;;
            5)
                show_header
                create_digital4kids_complete
                read -p "Appuyez sur Entr√©e pour continuer..."
                ;;
            0)
                echo -e "${GREEN}üëã Au revoir !${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Choix invalide${NC}"
                sleep 2
                ;;
        esac
    done
}

# =============================================================================
# POINT D'ENTR√âE PRINCIPAL
# =============================================================================

main() {
    # Cr√©er les r√©pertoires n√©cessaires
    mkdir -p "$LOG_DIR"
    mkdir -p "$WORKSPACE_DIR"
    
    case "${1:-menu}" in
        "setup"|"complete")
            setup_complete_platform
            ;;
        "start")
            start_all_apps_complete
            ;;
        "stop")
            stop_all_apps
            ;;
        "status")
            show_header
            echo -e "${BLUE}üìä STATUT DES APPLICATIONS${NC}"
            echo ""
            check_all_status
            ;;
        "digital4kids")
            show_header
            create_digital4kids_complete
            ;;
        "menu"|"interactive")
            show_interactive_menu
            ;;
        "help"|"-h"|"--help")
            show_header
            echo -e "${CYAN}UTILISATION:${NC}"
            echo ""
            echo -e "  ${GREEN}$0${NC}                    - Menu interactif"
            echo -e "  ${GREEN}$0 setup${NC}             - Configuration compl√®te"
            echo -e "  ${GREEN}$0 start${NC}             - D√©marrer toutes les apps"
            echo -e "  ${GREEN}$0 stop${NC}              - Arr√™ter toutes les apps"
            echo -e "  ${GREEN}$0 status${NC}            - V√©rifier le statut"
            echo -e "  ${GREEN}$0 digital4kids${NC}      - Cr√©er Digital4Kids uniquement"
            echo ""
            ;;
        *)
            echo -e "${RED}‚ùå Commande inconnue: $1${NC}"
            echo -e "${CYAN}Utilisez '$0 help' pour voir l'aide${NC}"
            exit 1
            ;;
    esac
}

# Gestion des signaux d'interruption
cleanup() {
    echo ""
    echo -e "${YELLOW}üõë Interruption d√©tect√©e...${NC}"
    exit 0
}

trap cleanup SIGINT SIGTERM

# V√©rifier que le script n'est pas ex√©cut√© en tant que root
if [ "$EUID" -eq 0 ]; then
    echo -e "${RED}‚ùå Ne pas ex√©cuter ce script en tant que root${NC}"
    exit 1
fi

# Ex√©cuter la fonction principale
main "$@"