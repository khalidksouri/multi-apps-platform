#!/bin/bash

# =============================================================================
# üîç S√âLECTEUR DE LANGUES AVEC RECHERCHE AVANC√âE - VERSION CORRIG√âE
# Ajoute une fonctionnalit√© de recherche dans le dropdown de langues
# =============================================================================

set -e

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}=================================${NC}"
    echo -e "${PURPLE}üîç $1${NC}"
    echo -e "${PURPLE}=================================${NC}"
}

print_header "S√âLECTEUR DE LANGUES AVEC RECHERCHE - VERSION CORRIG√âE"

# V√©rifications
if [ ! -d "apps/math4child" ]; then
    log_error "Dossier apps/math4child introuvable!"
    exit 1
fi

cd apps/math4child

# =============================================================================
# 1. CR√âATION DU COMPOSANT LANGUAGESELECTOR AVANC√â AVEC RECHERCHE
# =============================================================================

log_info "üîç Cr√©ation du composant LanguageSelector avec recherche..."

# Cr√©er une sauvegarde du composant existant s'il existe
if [ -f "src/components/LanguageSelector.tsx" ]; then
    cp src/components/LanguageSelector.tsx "src/components/LanguageSelector.tsx.backup_$(date +%Y%m%d_%H%M%S)"
fi

# Cr√©er le r√©pertoire components s'il n'existe pas
mkdir -p src/components

# Nouveau composant avec fonctionnalit√© de recherche
cat > src/components/LanguageSelector.tsx << 'EOF'
'use client';

import React, { useState, useRef, useEffect, useMemo } from 'react';

interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
}

interface LanguageSelectorProps {
  languages: Language[];
  currentLanguage: string;
  onLanguageChange: (languageCode: string) => void;
}

const LanguageSelector: React.FC<LanguageSelectorProps> = ({
  languages,
  currentLanguage,
  onLanguageChange
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const dropdownRef = useRef<HTMLDivElement>(null);
  const searchInputRef = useRef<HTMLInputElement>(null);
  
  // Trouver la langue actuelle
  const selectedLanguage = languages.find(lang => lang.code === currentLanguage) || languages[0];
  
  // Filtrer les langues bas√© sur la recherche
  const filteredLanguages = useMemo(() => {
    if (!searchQuery.trim()) {
      // Si pas de recherche, montrer la langue actuelle en premier puis les autres
      const otherLanguages = languages
        .filter(lang => lang.code !== currentLanguage)
        .sort((a, b) => a.nativeName.localeCompare(b.nativeName));
      
      return [selectedLanguage, ...otherLanguages];
    }
    
    // Filtrer selon la requ√™te de recherche
    const query = searchQuery.toLowerCase().trim();
    return languages
      .filter(lang => 
        lang.nativeName.toLowerCase().includes(query) ||
        lang.name.toLowerCase().includes(query) ||
        lang.code.toLowerCase().includes(query)
      )
      .sort((a, b) => {
        // Prioriser la langue actuelle
        if (a.code === currentLanguage) return -1;
        if (b.code === currentLanguage) return 1;
        
        // Prioriser les correspondances exactes au d√©but du nom
        const aStartsWithNative = a.nativeName.toLowerCase().startsWith(query);
        const bStartsWithNative = b.nativeName.toLowerCase().startsWith(query);
        const aStartsWithName = a.name.toLowerCase().startsWith(query);
        const bStartsWithName = b.name.toLowerCase().startsWith(query);
        
        if (aStartsWithNative && !bStartsWithNative) return -1;
        if (!aStartsWithNative && bStartsWithNative) return 1;
        if (aStartsWithName && !bStartsWithName) return -1;
        if (!aStartsWithName && bStartsWithName) return 1;
        
        // Sinon tri alphab√©tique
        return a.nativeName.localeCompare(b.nativeName);
      });
  }, [languages, currentLanguage, searchQuery, selectedLanguage]);

  // Fermer le dropdown quand on clique √† l'ext√©rieur
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
        setSearchQuery('');
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Focus sur l'input de recherche quand le dropdown s'ouvre
  useEffect(() => {
    if (isOpen && searchInputRef.current) {
      // Petit d√©lai pour s'assurer que le dropdown est rendu
      setTimeout(() => {
        searchInputRef.current?.focus();
      }, 100);
    }
  }, [isOpen]);

  const handleLanguageSelect = (languageCode: string) => {
    onLanguageChange(languageCode);
    setIsOpen(false);
    setSearchQuery('');
  };

  const handleToggleDropdown = () => {
    setIsOpen(!isOpen);
    if (!isOpen) {
      setSearchQuery('');
    }
  };

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Escape') {
      setIsOpen(false);
      setSearchQuery('');
    } else if (e.key === 'Enter' && filteredLanguages.length > 0) {
      // S√©lectionner la premi√®re langue filtr√©e si Enter est press√©
      const firstLanguage = filteredLanguages[0];
      if (firstLanguage) {
        handleLanguageSelect(firstLanguage.code);
      }
    }
  };

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={handleToggleDropdown}
        className="flex items-center space-x-2 bg-white border border-gray-300 rounded-lg px-4 py-2 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 min-w-[160px]"
        aria-expanded={isOpen}
        aria-haspopup="listbox"
      >
        <span className="text-xl" role="img" aria-label={selectedLanguage.name}>
          {selectedLanguage.flag}
        </span>
        <span className="font-medium text-gray-900 flex-1 text-left">
          {selectedLanguage.nativeName}
        </span>
        <svg
          className={`w-4 h-4 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {isOpen && (
        <div 
          className="absolute top-full left-0 mt-1 w-80 bg-white border border-gray-300 rounded-lg shadow-xl z-50 max-h-96 overflow-hidden language-dropdown"
          role="listbox"
        >
          {/* Barre de recherche */}
          <div className="p-3 border-b border-gray-200 bg-gray-50">
            <div className="relative">
              <input
                ref={searchInputRef}
                type="text"
                value={searchQuery}
                onChange={handleSearchChange}
                onKeyDown={handleKeyDown}
                placeholder="üîç Rechercher une langue..."
                className="w-full px-3 py-2 pl-8 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
              />
              <svg
                className="absolute left-2 top-2.5 w-4 h-4 text-gray-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            
            {/* Indicateur de r√©sultats */}
            <div className="text-xs text-gray-500 mt-1">
              {searchQuery.trim() ? (
                <>
                  {filteredLanguages.length} langue{filteredLanguages.length !== 1 ? 's' : ''} trouv√©e{filteredLanguages.length !== 1 ? 's' : ''}
                  {searchQuery.trim() && (
                    <span className="ml-2 text-blue-600">
                      pour "{searchQuery}"
                    </span>
                  )}
                </>
              ) : (
                `${languages.length} langues disponibles`
              )}
            </div>
          </div>

          {/* Liste des langues filtr√©es */}
          <div className="overflow-y-auto max-h-80">
            {filteredLanguages.length > 0 ? (
              filteredLanguages.map((language, index) => (
                <button
                  key={language.code}
                  onClick={() => handleLanguageSelect(language.code)}
                  className={`w-full flex items-center space-x-3 px-4 py-3 text-left hover:bg-gray-50 transition-colors duration-150 ${
                    language.code === currentLanguage 
                      ? 'bg-blue-50 text-blue-600 border-l-4 border-blue-500' 
                      : 'text-gray-900'
                  } ${index === 0 ? 'rounded-t-lg' : ''} ${index === filteredLanguages.length - 1 ? 'rounded-b-lg' : ''}`}
                  role="option"
                  aria-selected={language.code === currentLanguage}
                >
                  <span className="text-xl flex-shrink-0" role="img" aria-label={language.name}>
                    {language.flag}
                  </span>
                  <div className="flex-1 min-w-0">
                    <div className={`font-medium truncate ${
                      language.code === currentLanguage ? 'text-blue-600' : 'text-gray-900'
                    }`}>
                      {/* Surligner les correspondances de recherche */}
                      {searchQuery.trim() ? (
                        <HighlightText text={language.nativeName} highlight={searchQuery} />
                      ) : (
                        language.nativeName
                      )}
                    </div>
                    <div className={`text-sm truncate ${
                      language.code === currentLanguage ? 'text-blue-500' : 'text-gray-500'
                    }`}>
                      {searchQuery.trim() ? (
                        <HighlightText text={language.name} highlight={searchQuery} />
                      ) : (
                        language.name
                      )}
                    </div>
                  </div>
                  {language.code === currentLanguage && (
                    <div className="flex-shrink-0">
                      <svg className="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    </div>
                  )}
                </button>
              ))
            ) : (
              <div className="px-4 py-8 text-center text-gray-500">
                <div className="text-4xl mb-2">üîç</div>
                <div className="font-medium">Aucune langue trouv√©e</div>
                <div className="text-sm">
                  Essayez avec "{searchQuery.slice(0, -1)}" ou un autre terme
                </div>
              </div>
            )}
          </div>

          {/* Instructions en bas */}
          {searchQuery.trim() && filteredLanguages.length > 0 && (
            <div className="px-3 py-2 bg-gray-50 border-t border-gray-200 text-xs text-gray-500">
              <div className="flex items-center space-x-4">
                <span>‚Üµ Entr√©e pour s√©lectionner</span>
                <span>Esc pour fermer</span>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

// Composant pour surligner le texte de recherche
const HighlightText: React.FC<{ text: string; highlight: string }> = ({ text, highlight }) => {
  if (!highlight.trim()) return <>{text}</>;
  
  const regex = new RegExp(`(${highlight.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
  const parts = text.split(regex);
  
  return (
    <>
      {parts.map((part, index) => 
        regex.test(part) ? (
          <span key={index} className="bg-yellow-200 font-semibold">
            {part}
          </span>
        ) : (
          part
        )
      )}
    </>
  );
};

export default LanguageSelector;
EOF

log_success "‚úÖ Composant LanguageSelector avec recherche cr√©√©"

# =============================================================================
# 2. MISE √Ä JOUR DU FICHIER PRINCIPAL AVEC LANGUES √âTENDUES
# =============================================================================

log_info "üåç Mise √† jour du fichier principal avec liste de langues √©tendue..."

# Cr√©er une sauvegarde du fichier principal
if [ -f "src/app/page.tsx" ]; then
    cp src/app/page.tsx "src/app/page.tsx.backup_$(date +%Y%m%d_%H%M%S)"
fi

# Cr√©er le fichier principal avec liste de langues √©tendue
cat > src/app/page.tsx << 'EOF'
'use client';

import React, { useState, useEffect } from 'react';
import LanguageSelector from '../components/LanguageSelector';

interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
}

const LANGUAGES: Language[] = [
  { code: 'fr', name: 'Fran√ßais', nativeName: 'Fran√ßais', flag: 'üá´üá∑' },
  { code: 'en', name: 'English', nativeName: 'English', flag: 'üá∫üá∏' },
  { code: 'es', name: 'Espa√±ol', nativeName: 'Espa√±ol', flag: 'üá™üá∏' },
  { code: 'de', name: 'Deutsch', nativeName: 'Deutsch', flag: 'üá©üá™' },
  { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
  { code: 'zh', name: '‰∏≠Êñá', nativeName: '‰∏≠Êñá', flag: 'üá®üá≥' },
  
  // Langues suppl√©mentaires pour la recherche
  { code: 'it', name: 'Italiano', nativeName: 'Italiano', flag: 'üáÆüáπ' },
  { code: 'pt', name: 'Portugu√™s', nativeName: 'Portugu√™s', flag: 'üáµüáπ' },
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', nativeName: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  { code: 'ja', name: 'Êó•Êú¨Ë™û', nativeName: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
  { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥', nativeName: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' },
  { code: 'nl', name: 'Nederlands', nativeName: 'Nederlands', flag: 'üá≥üá±' },
  { code: 'sv', name: 'Svenska', nativeName: 'Svenska', flag: 'üá∏üá™' },
  { code: 'no', name: 'Norsk', nativeName: 'Norsk', flag: 'üá≥üá¥' },
  { code: 'da', name: 'Dansk', nativeName: 'Dansk', flag: 'üá©üá∞' },
  { code: 'fi', name: 'Suomi', nativeName: 'Suomi', flag: 'üá´üáÆ' },
  { code: 'pl', name: 'Polski', nativeName: 'Polski', flag: 'üáµüá±' },
  { code: 'cs', name: 'ƒåe≈°tina', nativeName: 'ƒåe≈°tina', flag: 'üá®üáø' },
  { code: 'hu', name: 'Magyar', nativeName: 'Magyar', flag: 'üá≠üá∫' },
  { code: 'ro', name: 'Rom√¢nƒÉ', nativeName: 'Rom√¢nƒÉ', flag: 'üá∑üá¥' },
  { code: 'bg', name: '–ë—ä–ª–≥–∞—Ä—Å–∫–∏', nativeName: '–ë—ä–ª–≥–∞—Ä—Å–∫–∏', flag: 'üáßüá¨' },
  { code: 'hr', name: 'Hrvatski', nativeName: 'Hrvatski', flag: 'üá≠üá∑' },
  { code: 'sk', name: 'Slovenƒçina', nativeName: 'Slovenƒçina', flag: 'üá∏üá∞' },
  { code: 'sl', name: 'Sloven≈°ƒçina', nativeName: 'Sloven≈°ƒçina', flag: 'üá∏üáÆ' },
  { code: 'et', name: 'Eesti', nativeName: 'Eesti', flag: 'üá™üá™' },
  { code: 'lv', name: 'Latvie≈°u', nativeName: 'Latvie≈°u', flag: 'üá±üáª' },
  { code: 'lt', name: 'Lietuvi≈≥', nativeName: 'Lietuvi≈≥', flag: 'üá±üáπ' },
  { code: 'el', name: 'ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨', nativeName: 'ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨', flag: 'üá¨üá∑' },
  { code: 'tr', name: 'T√ºrk√ße', nativeName: 'T√ºrk√ße', flag: 'üáπüá∑' },
  { code: 'he', name: '◊¢◊ë◊®◊ô◊™', nativeName: '◊¢◊ë◊®◊ô◊™', flag: 'üáÆüá±' },
  { code: 'fa', name: 'ŸÅÿßÿ±ÿ≥€å', nativeName: 'ŸÅÿßÿ±ÿ≥€å', flag: 'üáÆüá∑' },
  { code: 'ur', name: 'ÿßÿ±ÿØŸà', nativeName: 'ÿßÿ±ÿØŸà', flag: 'üáµüá∞' },
  { code: 'hi', name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  { code: 'bn', name: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', nativeName: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', flag: 'üáßüá©' },
  { code: 'ta', name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', nativeName: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üá±üá∞' },
  { code: 'te', name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', nativeName: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
  { code: 'ml', name: '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç', nativeName: '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç', flag: 'üáÆüá≥' },
  { code: 'th', name: '‡πÑ‡∏ó‡∏¢', nativeName: '‡πÑ‡∏ó‡∏¢', flag: 'üáπüá≠' },
  { code: 'vi', name: 'Ti·∫øng Vi·ªát', nativeName: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥' },
  { code: 'id', name: 'Bahasa Indonesia', nativeName: 'Bahasa Indonesia', flag: 'üáÆüá©' },
  { code: 'ms', name: 'Bahasa Melayu', nativeName: 'Bahasa Melayu', flag: 'üá≤üáæ' },
  { code: 'tl', name: 'Filipino', nativeName: 'Filipino', flag: 'üáµüá≠' },
  { code: 'sw', name: 'Kiswahili', nativeName: 'Kiswahili', flag: 'üá∞üá™' },
  { code: 'am', name: '·ä†·àõ·à≠·äõ', nativeName: '·ä†·àõ·à≠·äõ', flag: 'üá™üáπ' },
  { code: 'yo', name: 'Yor√πb√°', nativeName: 'Yor√πb√°', flag: 'üá≥üá¨' },
  { code: 'ig', name: 'Igbo', nativeName: 'Igbo', flag: 'üá≥üá¨' },
  { code: 'ha', name: 'Hausa', nativeName: 'Hausa', flag: 'üá≥üá¨' },
  { code: 'zu', name: 'isiZulu', nativeName: 'isiZulu', flag: 'üáøüá¶' },
  { code: 'xh', name: 'isiXhosa', nativeName: 'isiXhosa', flag: 'üáøüá¶' },
  { code: 'af', name: 'Afrikaans', nativeName: 'Afrikaans', flag: 'üáøüá¶' }
];

// Traductions basiques pour la d√©mo
const TRANSLATIONS: Record<string, Record<string, string>> = {
  fr: {
    title: 'Math4Child - Application √âducative',
    subtitle: 'Apprentissage des math√©matiques pour toute la famille',
    welcome: 'Bienvenue dans Math4Child',
    description: 'Une application √©ducative interactive pour apprendre les math√©matiques de fa√ßon ludique.',
    features: 'Fonctionnalit√©s',
    feature1: 'üßÆ Calculs interactifs',
    feature2: 'üéØ Exercices adapt√©s',
    feature3: 'üìä Suivi des progr√®s',
    feature4: 'üéÆ Jeux √©ducatifs',
    trySearch: 'Essayez la recherche de langues ci-dessus !',
    searchDemo: 'Tapez "ital" pour voir Italien, "ara" pour voir ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
  },
  en: {
    title: 'Math4Child - Educational App',
    subtitle: 'Mathematics learning for the whole family',
    welcome: 'Welcome to Math4Child',
    description: 'An interactive educational application to learn mathematics in a fun way.',
    features: 'Features',
    feature1: 'üßÆ Interactive calculations',
    feature2: 'üéØ Adapted exercises',
    feature3: 'üìä Progress tracking',
    feature4: 'üéÆ Educational games',
    trySearch: 'Try the language search above!',
    searchDemo: 'Type "ital" to see Italian, "ara" to see ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
  },
  es: {
    title: 'Math4Child - Aplicaci√≥n Educativa',
    subtitle: 'Aprendizaje de matem√°ticas para toda la familia',
    welcome: 'Bienvenido a Math4Child',
    description: 'Una aplicaci√≥n educativa interactiva para aprender matem√°ticas de forma divertida.',
    features: 'Caracter√≠sticas',
    feature1: 'üßÆ C√°lculos interactivos',
    feature2: 'üéØ Ejercicios adaptados',
    feature3: 'üìä Seguimiento del progreso',
    feature4: 'üéÆ Juegos educativos',
    trySearch: '¬°Prueba la b√∫squeda de idiomas arriba!',
    searchDemo: 'Escribe "ital" para ver Italiano, "ara" para ver ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
  },
  de: {
    title: 'Math4Child - Bildungs-App',
    subtitle: 'Mathematik-Lernen f√ºr die ganze Familie',
    welcome: 'Willkommen bei Math4Child',
    description: 'Eine interaktive Bildungsanwendung zum spielerischen Lernen von Mathematik.',
    features: 'Funktionen',
    feature1: 'üßÆ Interaktive Berechnungen',
    feature2: 'üéØ Angepasste √úbungen',
    feature3: 'üìä Fortschritt verfolgen',
    feature4: 'üéÆ Lernspiele',
    trySearch: 'Probieren Sie die Sprachsuche oben aus!',
    searchDemo: 'Tippen Sie "ital" f√ºr Italiano, "ara" f√ºr ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
  },
  ar: {
    title: 'Math4Child - ÿ™ÿ∑ÿ®ŸäŸÇ ÿ™ÿπŸÑŸäŸÖŸä',
    subtitle: 'ÿ™ÿπŸÑŸÖ ÿßŸÑÿ±Ÿäÿßÿ∂Ÿäÿßÿ™ ŸÑÿ¨ŸÖŸäÿπ ÿ£ŸÅÿ±ÿßÿØ ÿßŸÑÿπÿßÿ¶ŸÑÿ©',
    welcome: 'ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉŸÖ ŸÅŸä Math4Child',
    description: 'ÿ™ÿ∑ÿ®ŸäŸÇ ÿ™ÿπŸÑŸäŸÖŸä ÿ™ŸÅÿßÿπŸÑŸä ŸÑÿ™ÿπŸÑŸÖ ÿßŸÑÿ±Ÿäÿßÿ∂Ÿäÿßÿ™ ÿ®ÿ∑ÿ±ŸäŸÇÿ© ŸÖŸÖÿ™ÿπÿ©.',
    features: 'ÿßŸÑŸÖŸÖŸäÿ≤ÿßÿ™',
    feature1: 'üßÆ ÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿ™ŸÅÿßÿπŸÑŸäÿ©',
    feature2: 'üéØ ÿ™ŸÖÿßÿ±ŸäŸÜ ŸÖÿÆÿµÿµÿ©',
    feature3: 'üìä ÿ™ÿ™ÿ®ÿπ ÿßŸÑÿ™ŸÇÿØŸÖ',
    feature4: 'üéÆ ÿ£ŸÑÿπÿßÿ® ÿ™ÿπŸÑŸäŸÖŸäÿ©',
    trySearch: 'ÿ¨ÿ±ÿ® ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÑÿ∫ÿßÿ™ ÿ£ÿπŸÑÿßŸá!',
    searchDemo: 'ÿßŸÉÿ™ÿ® "ital" ŸÑÿ±ÿ§Ÿäÿ© ÿßŸÑÿ•Ÿäÿ∑ÿßŸÑŸäÿ©ÿå "ara" ŸÑÿ±ÿ§Ÿäÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
  },
  zh: {
    title: 'Math4Child - ÊïôËÇ≤Â∫îÁî®',
    subtitle: 'ÂÖ®ÂÆ∂Êï∞Â≠¶Â≠¶‰π†',
    welcome: 'Ê¨¢Ëøé‰ΩøÁî® Math4Child',
    description: '‰∏Ä‰∏™‰∫§‰∫íÂºèÊïôËÇ≤Â∫îÁî®Á®ãÂ∫èÔºå‰ª•ÊúâË∂£ÁöÑÊñπÂºèÂ≠¶‰π†Êï∞Â≠¶„ÄÇ',
    features: 'ÂäüËÉΩ',
    feature1: 'üßÆ ‰∫§‰∫íÂºèËÆ°ÁÆó',
    feature2: 'üéØ ÈÄÇÂ∫îÊÄßÁªÉ‰π†',
    feature3: 'üìä ËøõÂ∫¶Ë∑üË∏™',
    feature4: 'üéÆ ÊïôËÇ≤Ê∏∏Êàè',
    trySearch: 'ËØïËØï‰∏äÈù¢ÁöÑËØ≠Ë®ÄÊêúÁ¥¢ÂäüËÉΩÔºÅ',
    searchDemo: 'ËæìÂÖ•"ital"Êü•ÁúãÊÑèÂ§ßÂà©ËØ≠Ôºå"ara"Êü•ÁúãÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
  }
};

const DEFAULT_LANGUAGE = 'fr';

export default function HomePage() {
  const [currentLanguage, setCurrentLanguage] = useState(DEFAULT_LANGUAGE);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
    // Charger la langue depuis localStorage si disponible
    const savedLanguage = localStorage.getItem('math4child-language');
    if (savedLanguage && LANGUAGES.find(lang => lang.code === savedLanguage)) {
      setCurrentLanguage(savedLanguage);
    }
  }, []);

  const handleLanguageChange = (languageCode: string) => {
    setCurrentLanguage(languageCode);
    if (mounted) {
      localStorage.setItem('math4child-language', languageCode);
    }
  };

  const t = (key: string): string => {
    return TRANSLATIONS[currentLanguage]?.[key] || TRANSLATIONS[DEFAULT_LANGUAGE]?.[key] || key;
  };

  if (!mounted) {
    return <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
      <div className="text-blue-600">Chargement...</div>
    </div>;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header avec s√©lecteur de langue */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                <span className="text-white text-lg font-bold">M</span>
              </div>
              <h1 className="text-xl font-bold text-gray-900">Math4Child</h1>
            </div>
            
            <LanguageSelector
              languages={LANGUAGES}
              currentLanguage={currentLanguage}
              onLanguageChange={handleLanguageChange}
            />
          </div>
        </div>
      </header>

      {/* Contenu principal */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            {t('title')}
          </h1>
          <p className="text-xl text-gray-600 mb-12">
            {t('subtitle')}
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          {/* Section principale */}
          <div>
            <h2 className="text-3xl font-bold text-gray-900 mb-6">
              {t('welcome')}
            </h2>
            <p className="text-lg text-gray-600 mb-8">
              {t('description')}
            </p>

            <h3 className="text-xl font-semibold text-gray-900 mb-4">
              {t('features')}
            </h3>
            <ul className="space-y-3">
              <li className="text-gray-600">{t('feature1')}</li>
              <li className="text-gray-600">{t('feature2')}</li>
              <li className="text-gray-600">{t('feature3')}</li>
              <li className="text-gray-600">{t('feature4')}</li>
            </ul>
          </div>

          {/* D√©mo de recherche */}
          <div className="bg-white rounded-lg shadow-lg p-8">
            <h3 className="text-xl font-semibold text-gray-900 mb-4">
              üîç Recherche de Langues Avanc√©e
            </h3>
            <p className="text-gray-600 mb-6">
              {t('trySearch')}
            </p>
            <div className="bg-blue-50 rounded-lg p-4">
              <p className="text-sm text-blue-800">
                üí° {t('searchDemo')}
              </p>
            </div>
            
            {/* Statistiques */}
            <div className="mt-6 grid grid-cols-2 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{LANGUAGES.length}</div>
                <div className="text-sm text-gray-500">Langues disponibles</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">üéØ</div>
                <div className="text-sm text-gray-500">Recherche intelligente</div>
              </div>
            </div>
          </div>
        </div>

        {/* Section des langues disponibles */}
        <div className="mt-16">
          <h3 className="text-2xl font-bold text-gray-900 mb-8 text-center">
            Langues Disponibles ({LANGUAGES.length})
          </h3>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
            {LANGUAGES.slice(0, 24).map((language) => (
              <div 
                key={language.code}
                className={`p-3 rounded-lg border transition-all duration-200 cursor-pointer hover:shadow-md ${
                  language.code === currentLanguage 
                    ? 'bg-blue-50 border-blue-300 ring-2 ring-blue-500' 
                    : 'bg-white border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => handleLanguageChange(language.code)}
              >
                <div className="text-center">
                  <div className="text-2xl mb-1">{language.flag}</div>
                  <div className="text-sm font-medium text-gray-900 truncate">
                    {language.nativeName}
                  </div>
                  <div className="text-xs text-gray-500 truncate">
                    {language.name}
                  </div>
                </div>
              </div>
            ))}
          </div>
          {LANGUAGES.length > 24 && (
            <div className="text-center mt-6">
              <p className="text-gray-500">
                ... et {LANGUAGES.length - 24} autres langues disponibles via la recherche
              </p>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}
EOF

log_success "‚úÖ Fichier principal mis √† jour avec langues √©tendues"

# =============================================================================
# 3. AJOUT DES STYLES CSS POUR LA RECHERCHE
# =============================================================================

log_info "üé® Ajout des styles CSS pour la recherche de langues..."

# Cr√©er le r√©pertoire app s'il n'existe pas
mkdir -p src/app

# Ajouter ou cr√©er le fichier de styles globaux
cat > src/app/globals.css << 'EOF'
@tailwind base;
@tailwind components;
@tailwind utilities;

/* =============================================================================
   STYLES POUR LA RECHERCHE DE LANGUES
   ============================================================================= */

.language-dropdown {
  backdrop-filter: blur(8px);
  background: rgba(255, 255, 255, 0.98);
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

.language-dropdown::-webkit-scrollbar {
  width: 8px;
}

.language-dropdown::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 4px;
}

.language-dropdown::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 4px;
}

.language-dropdown::-webkit-scrollbar-thumb:hover {
  background: #94a3b8;
}

/* Animation d'ouverture du dropdown */
@keyframes languageDropdownOpen {
  from {
    opacity: 0;
    transform: translateY(-8px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.language-dropdown {
  animation: languageDropdownOpen 0.2s ease-out;
}

/* Styles pour le surlignage de recherche */
.search-highlight {
  background: linear-gradient(120deg, #fef08a 0%, #fde047 100%);
  font-weight: 600;
  padding: 1px 2px;
  border-radius: 2px;
}

/* Animation pour les r√©sultats de recherche */
@keyframes searchResultFadeIn {
  from {
    opacity: 0;
    transform: translateY(4px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.language-dropdown button[role="option"] {
  animation: searchResultFadeIn 0.15s ease-out;
}

/* Styles pour l'input de recherche */
.language-search-input {
  transition: all 0.2s ease;
}

.language-search-input:focus {
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

/* Indicateur de r√©sultats */
.search-results-indicator {
  transition: all 0.3s ease;
}

/* Animation pour "aucun r√©sultat" */
.no-results {
  animation: searchResultFadeIn 0.3s ease-out;
}

/* Styles responsive pour mobile */
@media (max-width: 768px) {
  .language-dropdown {
    width: 90vw;
    max-width: 320px;
    left: 50%;
    transform: translateX(-50%);
  }
  
  .language-dropdown button[role="option"] {
    padding: 12px 16px;
  }
}

/* Styles sp√©ciaux pour les langues RTL */
.language-option-rtl {
  direction: rtl;
  text-align: right;
}

/* Animation de pulsation pour la langue s√©lectionn√©e */
@keyframes selectedLanguagePulse {
  0%, 100% {
    background-color: rgba(59, 130, 246, 0.1);
  }
  50% {
    background-color: rgba(59, 130, 246, 0.2);
  }
}

.language-dropdown button[aria-selected="true"] {
  animation: selectedLanguagePulse 2s ease-in-out infinite;
}

/* Effet de hover am√©lior√© */
.language-dropdown button[role="option"]:hover:not([aria-selected="true"]) {
  background: linear-gradient(90deg, #f8fafc 0%, #e2e8f0 100%);
  transform: translateX(2px);
}

/* Style pour les instructions en bas */
.language-instructions {
  background: linear-gradient(90deg, #f1f5f9 0%, #e2e8f0 100%);
  border-top: 1px solid #cbd5e1;
}
EOF

log_success "‚úÖ Styles CSS pour la recherche ajout√©s"

# =============================================================================
# 4. RED√âMARRAGE DU SERVEUR
# =============================================================================

log_info "üîÑ Red√©marrage du serveur..."

# Arr√™ter le serveur existant
pkill -f "next dev" 2>/dev/null || true
sleep 3

# Supprimer le cache
rm -rf .next 2>/dev/null || true

# Red√©marrer
nohup npm run dev > /dev/null 2>&1 &
sleep 5

# V√©rification que le serveur fonctionne
if pgrep -f "next dev" > /dev/null; then
    log_success "‚úÖ Serveur de d√©veloppement red√©marr√©"
else
    log_error "‚ö†Ô∏è Le serveur n'a pas pu red√©marrer automatiquement"
    echo "   D√©marrez-le manuellement avec: npm run dev"
fi

# =============================================================================
# RAPPORT FINAL
# =============================================================================

echo ""
print_header "S√âLECTEUR DE LANGUES AVEC RECHERCHE TERMIN√â"
echo ""
echo "üîç Nouvelles fonctionnalit√©s :"
echo ""
echo "‚úÖ Recherche avanc√©e de langues :"
echo "   üî§ Saisie manuelle pour filtrer les langues"
echo "   üéØ Recherche par nom natif, nom anglais ou code"
echo "   ‚ö° Filtrage en temps r√©el pendant la saisie"
echo "   üèÜ Priorisation des correspondances exactes"
echo ""
echo "‚úÖ Interface am√©lior√©e :"
echo "   üìä Indicateur du nombre de r√©sultats"
echo "   üí° Surlignage des correspondances en jaune"
echo "   ‚å®Ô∏è Navigation clavier (Enter, Escape)"
echo "   üì± Design responsive pour mobile"
echo ""
echo "‚úÖ 45+ langues disponibles :"
echo "   üåç Langues europ√©ennes (25+)"
echo "   üåè Langues asiatiques (10+)"
echo "   üåç Langues africaines (5+)"
echo "   üåç Langues du Moyen-Orient (5+)"
echo ""
echo "üéÆ Comment utiliser :"
echo "   1. Cliquez sur le dropdown de langues"
echo "   2. Tapez le d√©but d'une langue (ex: 'fran' pour fran√ßais)"
echo "   3. Les r√©sultats se filtrent automatiquement"
echo "   4. Cliquez sur une langue ou appuyez sur Entr√©e"
echo ""
echo "üîç Exemples de recherche :"
echo "   ‚Ä¢ 'fr' ‚Üí Fran√ßais"
echo "   ‚Ä¢ 'eng' ‚Üí English"
echo "   ‚Ä¢ 'esp' ‚Üí Espa√±ol"
echo "   ‚Ä¢ 'deut' ‚Üí Deutsch"
echo "   ‚Ä¢ 'arab' ‚Üí ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"
echo "   ‚Ä¢ 'chin' ‚Üí ‰∏≠Êñá"
echo "   ‚Ä¢ 'ital' ‚Üí Italiano"
echo "   ‚Ä¢ 'port' ‚Üí Portugu√™s"
echo ""
echo "‚ú® Fonctionnalit√©s avanc√©es :"
echo "   üé® Animation fluide d'ouverture"
echo "   üî¶ Focus automatique sur la recherche"
echo "   üìç Langue actuelle toujours en premier"
echo "   ‚å®Ô∏è Support clavier complet"
echo "   üéØ Message d'aide si aucun r√©sultat"
echo ""
echo "üåê Testez maintenant :"
echo "   http://localhost:3000"
echo "   ‚Üí Cliquez sur le dropdown de langues"
echo "   ‚Üí Tapez 'ital' pour voir Italien appara√Ætre"
echo "   ‚Üí Tapez 'ara' pour voir ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"
echo ""
echo "üìÅ Fichiers cr√©√©s/modifi√©s :"
echo "   ‚úì src/components/LanguageSelector.tsx (nouveau composant)"
echo "   ‚úì src/app/page.tsx (page principale mise √† jour)"
echo "   ‚úì src/app/globals.css (styles ajout√©s)"
echo ""
log_success "üéâ S√©lecteur de langues avec recherche op√©rationnel!"
echo "======================================"
EOF

chmod +x script_corrige.sh

log_success "‚úÖ Script corrig√© cr√©√© avec succ√®s!"
echo ""
echo "üîß Pour ex√©cuter le script corrig√© :"
echo "   ./script_corrige.sh"
echo ""
echo "üìù Principales corrections apport√©es :"
echo "   ‚úì Suppression de la commande sed probl√©matique"
echo "   ‚úì Cr√©ation directe des fichiers complets"
echo "   ‚úì Gestion des r√©pertoires manquants"
echo "   ‚úì Am√©lioration de la gestion d'erreurs"
echo "   ‚úì Simplification du processus"