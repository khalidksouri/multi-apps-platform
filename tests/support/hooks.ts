// =============================================
// üìÑ tests/support/hooks.ts
// =============================================
import { Before, After, BeforeAll, AfterAll, Status } from '@cucumber/cucumber';
import { CustomWorld } from './world';
import * as fs from 'fs';
import * as path from 'path';

// ===== HOOKS GLOBAUX =====
BeforeAll(async function() {
  console.log('üöÄ Initialisation de la suite de tests BDD...');
  
  // Cr√©er les dossiers de rapports si n√©cessaire
  const reportDirs = ['reports', 'test-results', 'test-results/screenshots', 'test-results/videos'];
  reportDirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
  
  console.log('üìÅ Dossiers de rapports cr√©√©s');
});

AfterAll(async function() {
  console.log('‚úÖ Suite de tests termin√©e');
  console.log('üìä Rapports disponibles dans le dossier reports/');
});

// ===== HOOKS PAR SC√âNARIO =====
Before(async function(this: CustomWorld, scenario) {
  console.log(`‚ñ∂Ô∏è D√©marrage: ${scenario.pickle.name}`);
  
  // Initialiser le World Playwright
  await this.init();
  
  // Enregistrer les informations du sc√©nario
  this.setTestData('scenarioName', scenario.pickle.name);
  this.setTestData('scenarioTags', scenario.pickle.tags.map(tag => tag.name));
  this.setTestData('startTime', Date.now());
});

After(async function(this: CustomWorld, scenario) {
  const endTime = Date.now();
  const startTime = this.getTestData('startTime') || endTime;
  const duration = endTime - startTime;
  
  console.log(`‚è±Ô∏è Dur√©e: ${duration}ms - ${scenario.pickle.name}`);
  
  // Capture d'√©cran et vid√©o en cas d'√©chec
  if (scenario.result?.status === Status.FAILED) {
    console.log(`‚ùå √âchec: ${scenario.pickle.name}`);
    
    // Screenshot
    if (this.page) {
      const screenshot = await this.page.screenshot({ fullPage: true });
      this.attach(screenshot, 'image/png');
    }
    
    // HTML snapshot
    if (this.page) {
      const htmlContent = await this.page.content();
      this.attach(htmlContent, 'text/html');
    }
    
    // Performance metrics si activ√©es
    if (process.env.ENABLE_PERFORMANCE_METRICS === 'true') {
      const metrics = Array.from(this.performance.entries());
      this.attach(JSON.stringify(metrics, null, 2), 'application/json');
    }
  } else if (scenario.result?.status === Status.PASSED) {
    console.log(`‚úÖ Succ√®s: ${scenario.pickle.name}`);
  }
  
  // Nettoyage
  await this.cleanup();
});

// ===== HOOKS PAR TAG =====
Before({ tags: '@performance' }, async function(this: CustomWorld) {
  console.log('üöÄ Activation du monitoring de performance');
  process.env.ENABLE_PERFORMANCE_METRICS = 'true';
});

Before({ tags: '@accessibility' }, async function(this: CustomWorld) {
  console.log('‚ôø Activation des v√©rifications d\'accessibilit√©');
  process.env.ENABLE_A11Y_CHECKS = 'true';
});

Before({ tags: '@mobile' }, async function(this: CustomWorld) {
  console.log('üì± Configuration mobile activ√©e');
  process.env.DEVICE_TYPE = 'mobile';
});

Before({ tags: '@debug' }, async function(this: CustomWorld) {
  console.log('üêõ Mode debug activ√©');
  process.env.HEADLESS = 'false';
  process.env.SLOW_MO = '1000';
});

// ===== HOOKS PAR APPLICATION =====
Before({ tags: '@ai4kids' }, async function(this: CustomWorld) {
  this.currentApp = 'ai4kids';
});

Before({ tags: '@multiai' }, async function(this: CustomWorld) {
  this.currentApp = 'multiai';
});

Before({ tags: '@budgetcron' }, async function(this: CustomWorld) {
  this.currentApp = 'budgetcron';
});

Before({ tags: '@unitflip' }, async function(this: CustomWorld) {
  this.currentApp = 'unitflip';
});

Before({ tags: '@postmath' }, async function(this: CustomWorld) {
  this.currentApp = 'postmath';
});