import { test, expect } from '@playwright/test';

test.describe('Tests de traduction selon README.md - 200+ langues', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('http://localhost:3000');
    await page.waitForLoadState('networkidle');
  });

  test('Support 200+ langues - Structure selon README.md', async ({ page }) => {
    // V√©rifier les mentions de support multilingue
    const languageSupport = await page.locator('text=200+').or(page.locator('text=200+ langues')).count();
    console.log(`üåç Mentions "200+ langues": ${languageSupport}`);
    
    // V√©rifier la structure HTML pour l'internationalisation
    const htmlLang = await page.locator('html').getAttribute('lang');
    expect(htmlLang).toBeTruthy();
    console.log(`üî§ Langue HTML d√©tect√©e: ${htmlLang}`);
  });

  test('Drapeaux sp√©cifiques - üá≤üá¶ Maroc et üáµüá∏ Palestine selon README.md', async ({ page }) => {
    // Test sp√©cifique pour les drapeaux mentionn√©s dans README.md
    const flagTest = await page.evaluate(() => {
      // Cr√©er un √©l√©ment de test avec les drapeaux sp√©cifiques
      const testDiv = document.createElement('div');
      testDiv.innerHTML = 'üá≤üá¶ Arabe (Afrique) üáµüá∏ Arabe (Moyen-Orient)';
      document.body.appendChild(testDiv);
      
      const content = testDiv.textContent || '';
      const hasMarocco = content.includes('üá≤üá¶');
      const hasPalestine = content.includes('üáµüá∏');
      
      document.body.removeChild(testDiv);
      
      return { hasMarocco, hasPalestine, fullContent: content };
    });
    
    expect(flagTest.hasMarocco).toBe(true);
    expect(flagTest.hasPalestine).toBe(true);
    console.log('üá≤üá¶üáµüá∏ Drapeaux sp√©cifiques README.md valid√©s');
  });

  test('Interface de s√©lection langue - Fonctionnalit√©', async ({ page }) => {
    // Chercher des s√©lecteurs de langue ou boutons de traduction
    const languageControls = page.locator(
      '[data-testid="language-selector"], ' +
      '.language-selector, ' +
      'button:has-text("Fran√ßais"), ' +
      'button:has-text("English"), ' +
      'button:has-text("ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"), ' +
      '[aria-label*="language"], ' +
      '[aria-label*="langue"]'
    );
    
    const count = await languageControls.count();
    console.log(`üîÑ ${count} contr√¥les de langue trouv√©s`);
    
    if (count > 0) {
      // Tester l'interaction avec le premier contr√¥le trouv√©
      try {
        await languageControls.first().click({ timeout: 5000 });
        await page.waitForTimeout(1000);
        console.log('‚úÖ Interaction avec s√©lecteur de langue r√©ussie');
      } catch (error) {
        console.log('‚ö†Ô∏è S√©lecteur de langue non interactif');
      }
    }
    
    // V√©rifier que l'application reste stable
    await expect(page.locator('body')).toBeVisible();
  });

  test('Support RTL - Configuration arabe selon README.md', async ({ page }) => {
    // V√©rifier la capacit√© de support RTL
    const rtlSupport = await page.evaluate(() => {
      const testDiv = document.createElement('div');
      testDiv.dir = 'rtl';
      testDiv.textContent = 'ÿßŸÑŸÜÿµ ÿßŸÑÿπÿ±ÿ®Ÿä';
      document.body.appendChild(testDiv);
      
      const styles = window.getComputedStyle(testDiv);
      const direction = styles.direction;
      
      document.body.removeChild(testDiv);
      
      return { direction, rtlSupported: direction === 'rtl' };
    });
    
    expect(rtlSupport.rtlSupported).toBe(true);
    console.log(`üìù Support RTL: ${rtlSupport.direction}`);
  });

  test('Changement de langue - Interface disponible', async ({ page }) => {
    // Chercher des √©l√©ments de s√©lection de langue
    const languageSelectors = page.locator('[data-testid="language-selector"], .language-selector, button:has-text("Fran√ßais"), button:has-text("English")');
    const count = await languageSelectors.count();
    
    console.log(`üîÑ ${count} s√©lecteurs de langue trouv√©s`);
    
    if (count > 0) {
      // Tester l'interaction avec le s√©lecteur de langue
      await languageSelectors.first().click();
      
      // Attendre une petite pause pour les animations
      await page.waitForTimeout(1000);
      
      // V√©rifier que l'interface r√©pond
      await expect(page.locator('body')).toBeVisible();
    }
  });

  test('Support RTL - Structure CSS', async ({ page }) => {
    // V√©rifier si la structure supporte RTL
    const bodyDir = await page.locator('body').getAttribute('dir');
    const htmlDir = await page.locator('html').getAttribute('dir');
    
    console.log(`üìù Direction body: ${bodyDir}, html: ${htmlDir}`);
    
    // Test de changement de direction si des contr√¥les existent
    const rtlControls = page.locator('[data-testid="rtl-toggle"], .rtl-toggle');
    const rtlCount = await rtlControls.count();
    
    if (rtlCount > 0) {
      await rtlControls.first().click();
      await page.waitForTimeout(500);
      
      const newDir = await page.locator('body').getAttribute('dir');
      console.log(`üîÑ Nouvelle direction: ${newDir}`);
    }
  });

  test('Contenu multilingue - Pr√©sence de textes', async ({ page }) => {
    // V√©rifier la pr√©sence de texte principal
    const mainText = page.locator('h1, h2, h3').first();
    await expect(mainText).toBeVisible();
    
    const textContent = await mainText.textContent();
    expect(textContent).toBeTruthy();
    expect(textContent!.length).toBeGreaterThan(3);
    
    console.log(`üìù Contenu principal: "${textContent?.substring(0, 50)}..."`);
  });

  test('Drapeaux et symboles - Support Unicode', async ({ page }) => {
    // Tester le support des caract√®res Unicode/emojis
    const unicodeTest = await page.evaluate(() => {
      const testDiv = document.createElement('div');
      testDiv.textContent = 'üá´üá∑ üá∫üá∏ üá≤üá¶ üáµüá∏';
      document.body.appendChild(testDiv);
      
      const displayedText = testDiv.textContent;
      document.body.removeChild(testDiv);
      
      return displayedText === 'üá´üá∑ üá∫üá∏ üá≤üá¶ üáµüá∏';
    });
    
    expect(unicodeTest).toBe(true);
    console.log('üéå Support Unicode valid√©');
  });

  test('Formats de date et nombre - Localisation', async ({ page }) => {
    // Tester le support des formats localis√©s
    const localeTest = await page.evaluate(() => {
      try {
        const date = new Date();
        const frFormat = date.toLocaleDateString('fr-FR');
        const usFormat = date.toLocaleDateString('en-US');
        
        return frFormat !== usFormat;
      } catch {
        return false;
      }
    });
    
    expect(localeTest).toBe(true);
    console.log('üìÖ Support de localisation valid√©');
  });

  test('Performance avec langues - Changements rapides', async ({ page }) => {
    // Test de performance lors de changements de langue
    const startTime = Date.now();
    
    // Simuler des changements rapides si les contr√¥les existent
    const languageButtons = page.locator('button[data-lang], .lang-btn, .language-option');
    const buttonCount = await languageButtons.count();
    
    if (buttonCount > 1) {
      for (let i = 0; i < Math.min(buttonCount, 3); i++) {
        await languageButtons.nth(i).click();
        await page.waitForTimeout(100);
      }
    }
    
    const endTime = Date.now();
    console.log(`‚ö° Test de performance: ${endTime - startTime}ms`);
    
    // V√©rifier que l'application reste stable
    await expect(page.locator('body')).toBeVisible();
  });

  test('Accessibilit√© multilingue - ARIA et labels', async ({ page }) => {
    // V√©rifier les attributs d'accessibilit√© li√©s aux langues
    const ariaElements = page.locator('[aria-label], [aria-labelledby], [aria-describedby]');
    const ariaCount = await ariaElements.count();
    
    console.log(`‚ôø ${ariaCount} √©l√©ments avec attributs ARIA trouv√©s`);
    
    if (ariaCount > 0) {
      // V√©rifier qu'au moins un √©l√©ment a des attributs ARIA valides
      const firstAriaElement = ariaElements.first();
      const ariaLabel = await firstAriaElement.getAttribute('aria-label');
      
      if (ariaLabel) {
        expect(ariaLabel.length).toBeGreaterThan(0);
      }
    }
  });
});

test.describe('Tests de robustesse linguistique', () => {
  test('Caract√®res sp√©ciaux - Support √©tendu', async ({ page }) => {
    await page.goto('http://localhost:3000');
    
    // Tester divers caract√®res sp√©ciaux
    const specialChars = ['√©', '√±', '√º', '√ß', '≈æ', '√∏', '√ü', '≈Ç'];
    
    const supportTest = await page.evaluate((chars) => {
      const testDiv = document.createElement('div');
      testDiv.textContent = chars.join('');
      document.body.appendChild(testDiv);
      
      const result = testDiv.textContent === chars.join('');
      document.body.removeChild(testDiv);
      
      return result;
    }, specialChars);
    
    expect(supportTest).toBe(true);
    console.log('‚úÖ Support des caract√®res sp√©ciaux valid√©');
  });

  test('Texte long - Gestion des d√©bordements', async ({ page }) => {
    await page.goto('http://localhost:3000');
    
    // Tester avec du texte tr√®s long
    const longTextTest = await page.evaluate(() => {
      const testDiv = document.createElement('div');
      testDiv.style.width = '200px';
      testDiv.style.border = '1px solid red';
      testDiv.textContent = 'Ce texte est tr√®s long et devrait √™tre g√©r√© correctement sans d√©border ou causer de probl√®mes de mise en page dans l\'application Math4Child.';
      
      document.body.appendChild(testDiv);
      
      const rect = testDiv.getBoundingClientRect();
      const hasOverflow = testDiv.scrollWidth > testDiv.clientWidth;
      
      document.body.removeChild(testDiv);
      
      return { width: rect.width, hasOverflow };
    });
    
    console.log(`üìè Test de d√©bordement: largeur=${longTextTest.width}px, d√©bordement=${longTextTest.hasOverflow}`);
    expect(longTextTest.width).toBeGreaterThan(0);
  });

  test('Encodage de caract√®res - UTF-8', async ({ page }) => {
    await page.goto('http://localhost:3000');
    
    // V√©rifier l'encodage UTF-8
    const charset = await page.evaluate(() => {
      const metaCharset = document.querySelector('meta[charset]');
      return metaCharset ? metaCharset.getAttribute('charset') : null;
    });
    
    console.log(`üî§ Encodage d√©tect√©: ${charset}`);
    expect(charset?.toLowerCase()).toContain('utf');
  });
});
