#!/bin/bash

# =============================================================================
# SCRIPT UNIFI√â MULTI-APPS PLATFORM - TOUT EN UN
# =============================================================================

set -e

# Configuration - TOUT dans le projet
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKSPACE_DIR="/Users/khalidksouri/Desktop/multi-apps-platform"
LOG_DIR="$PROJECT_DIR/logs"

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Applications
APPS_NAMES="math4kids unitflip budgetcron ai4kids multiai digital4kids"
APPS_PORTS="3001 3002 3003 3004 3005 3006"
APPS_COMMANDS="npm_start npm_start npm_run_serve npm_start npm_run_dev npm_start"

# Fonction pour obtenir les infos d'une application
get_app_info() {
    local app_name=$1
    local index=0
    
    for name in $APPS_NAMES; do
        if [ "$name" = "$app_name" ]; then
            local port=$(echo $APPS_PORTS | cut -d' ' -f$((index + 1)))
            local cmd=$(echo $APPS_COMMANDS | cut -d' ' -f$((index + 1)))
            
            case $cmd in
                "npm_start") echo "$port:npm start" ;;
                "npm_run_serve") echo "$port:npm run serve" ;;
                "npm_run_dev") echo "$port:npm run dev" ;;
                *) echo "$port:npm start" ;;
            esac
            return 0
        fi
        index=$((index + 1))
    done
    
    echo "unknown:unknown"
}

# Header
show_header() {
    clear
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë         üöÄ SCRIPT UNIFI√â MULTI-APPS PLATFORM üöÄ                ‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${CYAN}üìÅ Projet: ${PROJECT_DIR}${NC}"
    echo -e "${CYAN}üìã Logs: ${LOG_DIR}${NC}"
    echo ""
}

# R√©paration simple d'une application
repair_app() {
    local app_name=$1
    local app_dir="$WORKSPACE_DIR/$app_name"
    
    echo -e "${YELLOW}üîß R√©paration de $app_name...${NC}"
    
    if [ ! -d "$app_dir" ]; then
        echo -e "  ‚ùå R√©pertoire manquant: $app_dir"
        return 1
    fi
    
    cd "$app_dir"
    
    echo -e "  üßπ Nettoyage..."
    rm -rf node_modules package-lock.json .npm 2>/dev/null || true
    
    echo -e "  üì¶ R√©installation..."
    if npm install --legacy-peer-deps --silent; then
        echo -e "  ${GREEN}‚úÖ $app_name r√©par√©!${NC}"
        return 0
    else
        echo -e "  ${RED}‚ùå Erreur de r√©paration${NC}"
        return 1
    fi
}

# D√©marrer une application (bas√© sur votre script qui marche)
start_app() {
    local app_name=$1
    local app_info=$(get_app_info "$app_name")
    local port="${app_info%:*}"
    local command="${app_info#*:}"
    local app_dir="$WORKSPACE_DIR/$app_name"
    
    echo -e "${YELLOW}üöÄ D√©marrage de $app_name (port $port)...${NC}"
    
    if [ ! -d "$app_dir" ]; then
        echo -e "  ‚ùå R√©pertoire manquant: $app_dir"
        return 1
    fi
    
    cd "$app_dir"
    
    if [ ! -d "node_modules" ]; then
        echo -e "  üì¶ Installation des d√©pendances..."
        npm install --legacy-peer-deps --silent
    fi
    
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "  üîå Lib√©ration du port $port..."
        local existing_pid=$(lsof -ti:$port)
        kill -9 "$existing_pid" 2>/dev/null || true
        sleep 2
    fi
    
    mkdir -p "$LOG_DIR"
    
    echo -e "  ‚ñ∂Ô∏è Lancement: $command"
    PORT=$port BROWSER=none $command > "$LOG_DIR/${app_name}.log" 2>&1 &
    local pid=$!
    
    echo "$pid" > "$LOG_DIR/${app_name}.pid"
    
    echo -e "  ‚è≥ Attente du d√©marrage (PID: $pid)..."
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -s -f "http://localhost:$port" >/dev/null 2>&1; then
            echo -e "  ${GREEN}‚úÖ $app_name d√©marr√©! - http://localhost:$port${NC}"
            return 0
        fi
        
        if ! ps -p $pid >/dev/null 2>&1; then
            echo -e "  ${RED}‚ùå Le processus s'est arr√™t√©${NC}"
            return 1
        fi
        
        sleep 2
        attempt=$((attempt + 1))
        
        if [ $attempt -eq 15 ]; then
            echo -e "  ‚è∞ D√©marrage en cours..."
        fi
    done
    
    echo -e "  ${RED}‚ùå √âchec du d√©marrage${NC}"
    return 1
}

# V√©rifier le statut d'une application
check_app_status() {
    local app_name=$1
    local app_info=$(get_app_info "$app_name")
    local port="${app_info%:*}"
    
    if curl -s -f "http://localhost:$port" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ $app_name${NC} - http://localhost:$port"
        return 0
    else
        echo -e "${RED}‚ùå $app_name${NC} - Non actif"
        return 1
    fi
}

# D√©marrer toutes les applications
start_all_apps() {
    show_header
    echo -e "${BLUE}üöÄ D√âMARRAGE DE TOUTES LES APPLICATIONS${NC}"
    echo -e "${BLUE}=====================================${NC}"
    echo ""
    
    if ! command -v node >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Node.js n'est pas install√©${NC}"
        exit 1
    fi
    
    if [ ! -d "$WORKSPACE_DIR" ]; then
        echo -e "${RED}‚ùå Workspace non trouv√©${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Pr√©requis valid√©s${NC}"
    echo ""
    
    for app_name in $APPS_NAMES; do
        start_app "$app_name"
        echo ""
        sleep 3
    done
    
    echo -e "${BLUE}‚è≥ Stabilisation (15 secondes)...${NC}"
    sleep 15
    
    echo ""
    echo -e "${BLUE}üéä R√âSULTAT FINAL${NC}"
    echo -e "${BLUE}=================${NC}"
    echo ""
    
    check_all_status
}

# V√©rifier le statut de toutes les applications
check_all_status() {
    local running_apps=0
    local working_urls=""
    
    for app_name in $APPS_NAMES; do
        if check_app_status "$app_name"; then
            running_apps=$((running_apps + 1))
            local app_info=$(get_app_info "$app_name")
            local port="${app_info%:*}"
            working_urls="$working_urls http://localhost:$port"
        fi
        echo ""
    done
    
    echo -e "${BLUE}üìä R√âSUM√â${NC}"
    echo -e "üéØ Applications actives: ${GREEN}$running_apps/6${NC}"
    echo ""
    
    if [ $running_apps -eq 6 ]; then
        echo -e "üèÜ ${GREEN}PLATEFORME 100% OP√âRATIONNELLE !${NC}"
        echo -e "${CYAN}üöÄ ACC√àS :${NC} open$working_urls"
    elif [ $running_apps -ge 4 ]; then
        echo -e "‚ú® ${GREEN}Tr√®s bien ! $running_apps applications actives${NC}"
        echo -e "${CYAN}üåê Disponibles :${NC} open$working_urls"
    fi
    echo ""
}

# R√©parer toutes les applications
repair_all() {
    show_header
    echo -e "${BLUE}üîß R√âPARATION DE TOUTES LES APPLICATIONS${NC}"
    echo -e "${BLUE}======================================${NC}"
    echo ""
    
    for app_name in $APPS_NAMES; do
        repair_app "$app_name"
        echo ""
    done
    
    echo -e "${GREEN}‚úÖ R√©parations termin√©es${NC}"
    echo ""
}

# Point d'entr√©e principal
main() {
    case "${1:-help}" in
        "start")
            start_all_apps
            ;;
        "status")
            show_header
            echo -e "${BLUE}üìä STATUT${NC}"
            echo -e "${BLUE}==========${NC}"
            echo ""
            check_all_status
            ;;
        "repair-all")
            repair_all
            ;;
        "repair")
            if [ -n "$2" ]; then
                show_header
                repair_app "$2"
            else
                echo "Usage: $0 repair [app_name]"
            fi
            ;;
        *)
            show_header
            echo -e "${CYAN}COMMANDES DISPONIBLES:${NC}"
            echo ""
            echo -e "  ${GREEN}$0 start${NC}      - D√©marrer toutes les applications"
            echo -e "  ${YELLOW}$0 status${NC}     - Voir le statut"
            echo -e "  ${CYAN}$0 repair-all${NC} - R√©parer toutes les applications"
            echo -e "  ${BLUE}$0 repair [app]${NC} - R√©parer une application"
            echo ""
            echo -e "${YELLOW}Applications:${NC} math4kids unitflip budgetcron ai4kids multiai digital4kids"
            echo ""
            ;;
    esac
}

main "$@"
