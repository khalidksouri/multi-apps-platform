
{
  "name": "@multiapps/shared",
  "version": "1.0.0",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "scripts": {
    "build": "tsc",
    "dev": "tsc --watch",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "date-fns": "^2.30.0",
    "lodash": "^4.17.21",
    "zod": "^3.22.0"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "@types/lodash": "^4.14.200"
  },
  "peerDependencies": {
    "react": "^18.0.0"
  }
}

// =============================================
// ðŸ“„ packages/shared/src/index.ts - CorrigÃ©
// =============================================
// Types de base
export interface APIResponse<T = any> {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
    details?: any;
  };
  meta?: {
    page?: number;
    limit?: number;
    total?: number;
    timestamp?: string;
  };
}

// Types pour le shipping
export interface Carrier {
  id: string;
  name: string;
  price: number;
  deliveryTime: string;
  reliability: number;
  tracking: boolean;
}

export interface ShippingCalculation {
  id: string;
  departure: string;
  destination: string;
  weight: number;
  dimensions: string;
  carriers: Carrier[];
  createdAt: Date;
}

// Types pour la conversion d'unitÃ©s
export interface ConversionResult {
  value: number;
  unit: string;
  explanation: string;
}

export interface UnitCategory {
  id: string;
  name: string;
  units: UnitDefinition[];
}

export interface UnitDefinition {
  id: string;
  name: string;
  symbol: string;
  toBase: (value: number) => number;
  fromBase: (value: number) => number;
}

// Types pour le budget
export interface BudgetCategory {
  id: string;
  name: string;
  budget: number;
  spent: number;
  color: string;
}

export interface BudgetInsight {
  id: number;
  type: 'savings_opportunity' | 'budget_alert' | 'spending_pattern';
  title: string;
  description: string;
  confidence: number;
  color: string;
}

export interface BankAccount {
  id: string;
  name: string;
  type: string;
  balance: number;
  status: 'active' | 'error' | 'pending';
  lastSync: Date;
}

// Fonctions utilitaires
export function formatCurrency(amount: number, currency: string = 'EUR'): string {
  return new Intl.NumberFormat('fr-FR', {
    style: 'currency',
    currency
  }).format(amount);
}

export function validateEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

export function formatDate(date: Date): string {
  return date.toLocaleDateString('fr-FR');
}

// Constantes
export const APP_URLS = {
  AI4KIDS: process.env.AI4KIDS_URL || 'http://localhost:3004',
  MULTIAI: process.env.MULTIAI_URL || 'http://localhost:3005',
  BUDGETCRON: process.env.BUDGETCRON_URL || 'http://localhost:3003',
  UNITFLIP: process.env.UNITFLIP_URL || 'http://localhost:3002',
  POSTMATH: process.env.POSTMATH_URL || 'http://localhost:3001'
} as const;

// =============================================
// ðŸ“„ packages/shared/tsconfig.json - CorrigÃ©
// =============================================
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "declaration": true,
    "outDir": "dist",
    "rootDir": "src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}