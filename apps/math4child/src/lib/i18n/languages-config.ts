// Configuration langues MATH4CHILD - Conformit√© sp√©cifications exactes
export interface LanguageConfig {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
  region: string;
  rtl?: boolean;
}

// Langues support√©es - TOUS CONTINENTS sauf h√©breu selon sp√©cifications
export const SUPPORTED_LANGUAGES: LanguageConfig[] = [
  // AFRIQUE
  { code: 'ar-ma', name: 'Arabic (Africa)', nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (ÿ£ŸÅÿ±ŸäŸÇŸäÿß)', flag: 'üá≤üá¶', region: 'Africa', rtl: true },
  { code: 'fr', name: 'French', nativeName: 'Fran√ßais', flag: 'üá´üá∑', region: 'Africa/Europe' },
  { code: 'sw', name: 'Swahili', nativeName: 'Kiswahili', flag: 'üá∞üá™', region: 'Africa' },
  { code: 'am', name: 'Amharic', nativeName: '·ä†·àõ·à≠·äõ', flag: 'üá™üáπ', region: 'Africa' },
  { code: 'ha', name: 'Hausa', nativeName: 'Harshen Hausa', flag: 'üá≥üá¨', region: 'Africa' },
  
  // MOYEN-ORIENT & GOLF
  { code: 'ar-ps', name: 'Arabic (Middle East)', nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (ÿßŸÑÿ¥ÿ±ŸÇ ÿßŸÑÿ£Ÿàÿ≥ÿ∑)', flag: 'üáµüá∏', region: 'Middle East', rtl: true },
  { code: 'fa', name: 'Persian', nativeName: 'ŸÅÿßÿ±ÿ≥€å', flag: 'üáÆüá∑', region: 'Middle East', rtl: true },
  { code: 'tr', name: 'Turkish', nativeName: 'T√ºrk√ße', flag: 'üáπüá∑', region: 'Middle East' },
  { code: 'ur', name: 'Urdu', nativeName: 'ÿßÿ±ÿØŸà', flag: 'üáµüá∞', region: 'Middle East', rtl: true },
  
  // ASIE  
  { code: 'zh', name: 'Chinese', nativeName: '‰∏≠Êñá', flag: 'üá®üá≥', region: 'Asia' },
  { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥', region: 'Asia' },
  { code: 'ja', name: 'Japanese', nativeName: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ', region: 'Asia' },
  { code: 'ko', name: 'Korean', nativeName: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑', region: 'Asia' },
  { code: 'th', name: 'Thai', nativeName: '‡πÑ‡∏ó‡∏¢', flag: 'üáπüá≠', region: 'Asia' },
  { code: 'vi', name: 'Vietnamese', nativeName: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥', region: 'Asia' },
  { code: 'id', name: 'Indonesian', nativeName: 'Bahasa Indonesia', flag: 'üáÆüá©', region: 'Asia' },
  { code: 'ms', name: 'Malay', nativeName: 'Bahasa Melayu', flag: 'üá≤üáæ', region: 'Asia' },
  
  // EUROPE
  { code: 'en', name: 'English', nativeName: 'English', flag: 'üá¨üáß', region: 'Europe/Global' },
  { code: 'es', name: 'Spanish', nativeName: 'Espa√±ol', flag: 'üá™üá∏', region: 'Europe/Americas' },
  { code: 'de', name: 'German', nativeName: 'Deutsch', flag: 'üá©üá™', region: 'Europe' },
  { code: 'it', name: 'Italian', nativeName: 'Italiano', flag: 'üáÆüáπ', region: 'Europe' },
  { code: 'pt', name: 'Portuguese', nativeName: 'Portugu√™s', flag: 'üáµüáπ', region: 'Europe/Americas' },
  { code: 'ru', name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫', region: 'Europe/Asia' },
  { code: 'pl', name: 'Polish', nativeName: 'Polski', flag: 'üáµüá±', region: 'Europe' },
  { code: 'nl', name: 'Dutch', nativeName: 'Nederlands', flag: 'üá≥üá±', region: 'Europe' },
  { code: 'sv', name: 'Swedish', nativeName: 'Svenska', flag: 'üá∏üá™', region: 'Europe' },
  { code: 'da', name: 'Danish', nativeName: 'Dansk', flag: 'üá©üá∞', region: 'Europe' },
  { code: 'no', name: 'Norwegian', nativeName: 'Norsk', flag: 'üá≥üá¥', region: 'Europe' },
  { code: 'fi', name: 'Finnish', nativeName: 'Suomi', flag: 'üá´üáÆ', region: 'Europe' },
  
  // AM√âRIQUE DU NORD
  { code: 'en-us', name: 'English (US)', nativeName: 'English (US)', flag: 'üá∫üá∏', region: 'North America' },
  { code: 'en-ca', name: 'English (Canada)', nativeName: 'English (Canada)', flag: 'üá®üá¶', region: 'North America' },
  { code: 'fr-ca', name: 'French (Canada)', nativeName: 'Fran√ßais (Canada)', flag: 'üá®üá¶', region: 'North America' },
  
  // AM√âRIQUE LATINE
  { code: 'es-mx', name: 'Spanish (Mexico)', nativeName: 'Espa√±ol (M√©xico)', flag: 'üá≤üáΩ', region: 'Latin America' },
  { code: 'es-ar', name: 'Spanish (Argentina)', nativeName: 'Espa√±ol (Argentina)', flag: 'üá¶üá∑', region: 'Latin America' },
  { code: 'pt-br', name: 'Portuguese (Brazil)', nativeName: 'Portugu√™s (Brasil)', flag: 'üáßüá∑', region: 'Latin America' },
  
  // OC√âANIE
  { code: 'en-au', name: 'English (Australia)', nativeName: 'English (Australia)', flag: 'üá¶üá∫', region: 'Oceania' },
  { code: 'en-nz', name: 'English (New Zealand)', nativeName: 'English (New Zealand)', flag: 'üá≥üáø', region: 'Oceania' }
];

// Configuration sp√©cifications exactes
export const LANGUAGE_RESTRICTIONS = {
  // INTERDIT selon sp√©cifications
  excluded: ['he', 'hebrew', '◊¢◊ë◊®◊ô◊™'], // H√©breu exclu
  
  // Drapeaux sp√©cifiques selon sp√©cifications  
  arabic_flags: {
    africa: 'üá≤üá¶', // Maroc pour Afrique
    middle_east: 'üáµüá∏' // Palestine pour Moyen-Orient & Golf
  },
  
  // Pas de duplication - regroupement par famille linguistique
  no_duplication: true,
  
  // Traduction compl√®te requise
  full_translation_required: true,
  
  // Liste d√©roulante avec scroll
  dropdown_scroll: true
};

// Fonction traduction selon langue s√©lectionn√©e (sp√©cification requise)
export const translateLanguageNames = (targetLanguage: string): LanguageConfig[] => {
  // Ici impl√©menter la traduction des noms de langues selon langue cible
  // Exemple: si fran√ßais s√©lectionn√©, "English" devient "Anglais"
  return SUPPORTED_LANGUAGES.map(lang => ({
    ...lang,
    name: getTranslatedLanguageName(lang.code, targetLanguage)
  }));
};

// Fonction helper traduction noms langues
const getTranslatedLanguageName = (langCode: string, targetLang: string): string => {
  // Impl√©mentation simplifi√©e - √† √©tendre selon besoins
  const translations: Record<string, Record<string, string>> = {
    fr: {
      'en': 'Anglais',
      'es': 'Espagnol', 
      'de': 'Allemand',
      'it': 'Italien',
      'pt': 'Portugais',
      'ar-ma': 'Arabe (Afrique)',
      'ar-ps': 'Arabe (Moyen-Orient)'
      // ... autres traductions
    },
    en: {
      'fr': 'French',
      'es': 'Spanish',
      'de': 'German', 
      'ar-ma': 'Arabic (Africa)',
      'ar-ps': 'Arabic (Middle East)'
      // ... autres traductions
    }
    // ... autres langues cibles
  };
  
  return translations[targetLang]?.[langCode] || langCode;
};

export default SUPPORTED_LANGUAGES;
