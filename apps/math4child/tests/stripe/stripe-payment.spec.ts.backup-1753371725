import { test, expect } from '@playwright/test'

test.describe('Tests de Paiement Stripe - Math4Child', () => {
  
  test.beforeEach(async ({ page }) => {
    await page.goto('/stripe-test')
  })

  test('Page de test des paiements s\'affiche correctement', async ({ page }) => {
    await expect(page.locator('h1')).toContainText('Test des Paiements Math4Child')
    await expect(page.locator('text=Mode dÃ©veloppement')).toBeVisible()
    await expect(page.locator('text=ðŸ’³ Cartes de Test Stripe')).toBeVisible()
  })

  test('Cartes de test Stripe sont toutes affichÃ©es', async ({ page }) => {
    // VÃ©rifier les cartes principales
    await expect(page.locator('text=4242 4242 4242 4242')).toBeVisible() // SuccÃ¨s
    await expect(page.locator('text=4000 0000 0000 0002')).toBeVisible() // DÃ©clinÃ©e
    await expect(page.locator('text=4000 0000 0000 9995')).toBeVisible() // Fonds insuffisants
    await expect(page.locator('text=4000 0000 0000 0069')).toBeVisible() // ExpirÃ©e
  })

  test('Plans de test sont affichÃ©s avec prix corrects', async ({ page }) => {
    // Plan Famille
    await expect(page.locator('text=Plan Famille')).toBeVisible()
    await expect(page.locator('text=â‚¬6.99')).toBeVisible()
    
    // Plan Premium
    await expect(page.locator('text=Plan Premium')).toBeVisible()
    await expect(page.locator('text=â‚¬4.99')).toBeVisible()
    
    // Plan Ã‰cole
    await expect(page.locator('text=Plan Ã‰cole')).toBeVisible()
    await expect(page.locator('text=â‚¬24.99')).toBeVisible()
  })

  test('Toggle mensuel/annuel fonctionne', async ({ page }) => {
    // Ã‰tat initial (mensuel)
    await expect(page.locator('text=â‚¬6.99')).toBeVisible()
    
    // Passer en annuel
    await page.click('button:has-text("Annuel")')
    await expect(page.locator('text=â‚¬59.90')).toBeVisible()
    
    // Retour en mensuel
    await page.click('button:has-text("Mensuel")')
    await expect(page.locator('text=â‚¬6.99')).toBeVisible()
  })

  test('Test paiement rÃ©ussi redirige vers page de succÃ¨s', async ({ page }) => {
    // Intercepter l'API
    await page.route('/api/stripe/create-checkout-session', async route => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          sessionId: 'cs_test_success_123',
          url: 'http://localhost:3000/success?session_id=cs_test_success_123',
          testMode: true
        })
      })
    })

    // DÃ©clencher un test de paiement
    const successButton = page.locator('button:has-text("âœ… SuccÃ¨s")').first()
    
    // Attendre l'ouverture d'un nouvel onglet
    const [newPage] = await Promise.all([
      page.waitForEvent('popup'),
      successButton.click()
    ])

    // VÃ©rifier la page de succÃ¨s
    await expect(newPage.locator('h1')).toContainText('Paiement RÃ©ussi')
    await expect(newPage.locator('text=cs_test_success_123')).toBeVisible()
    
    await newPage.close()
  })

  test('Copie de numÃ©ro de carte fonctionne', async ({ page }) => {
    // Cliquer sur une carte pour copier
    await page.click('text=4242 4242 4242 4242')
    
    // VÃ©rifier dans la console (si possible)
    const logs: string[] = []
    page.on('console', msg => logs.push(msg.text()))
    
    // DÃ©clencher Ã  nouveau la copie
    await page.click('text=4242 4242 4242 4242')
    
    // Note: Le test de clipboard nÃ©cessite des permissions spÃ©ciales
    // En pratique, on vÃ©rifie que l'action ne cause pas d'erreur
    expect(true).toBeTruthy()
  })

  test('API de checkout rÃ©pond correctement', async ({ page }) => {
    const response = await page.request.get('/api/stripe/create-checkout-session')
    expect(response.status()).toBe(200)
    
    const data = await response.json()
    expect(data).toHaveProperty('status', 'OK')
    expect(data).toHaveProperty('testMode', true)
  })
})
