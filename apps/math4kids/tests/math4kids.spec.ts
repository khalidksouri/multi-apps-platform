import { expect, test } from '@playwright/test';

test.describe('Math4Kids Enhanced', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
    // Attendre que l'application se charge complÃ¨tement
    await page.waitForLoadState('networkidle');
    // Attendre la disparition du loader
    await page.waitForSelector('#loading', { state: 'detached', timeout: 10000 });
  });

  test('should display the Math4Kids title', async ({ page }) => {
    // VÃ©rifier que le titre principal est visible
    await expect(page.locator('h1')).toContainText('Math4Kids');
    
    // VÃ©rifier la prÃ©sence de l'emoji caractÃ©ristique
    await expect(page.locator('text=ðŸ§®')).toBeVisible();
    
    // VÃ©rifier le sous-titre
    await expect(page.locator('text=Apprendre les maths')).toBeVisible();
  });

  test('should start a new game', async ({ page }) => {
    // Chercher le bouton avec l'icÃ´ne rocket et le texte spÃ©cifique
    const startButton = page.getByRole('button', { name: /ðŸš€.*Commencer le jeu/i });
    await expect(startButton).toBeVisible();
    
    // Cliquer sur le bouton
    await startButton.click();
    
    // VÃ©rifier qu'on arrive sur l'Ã©cran de jeu
    // Chercher les Ã©lÃ©ments spÃ©cifiques Ã  l'Ã©cran de jeu
    await expect(page.locator('text=Score')).toBeVisible();
    await expect(page.locator('text=Vies')).toBeVisible();
    await expect(page.locator('text=SÃ©rie')).toBeVisible();
  });

  test('should change language to English', async ({ page }) => {
    // Cliquer sur le sÃ©lecteur de langue (globe avec drapeau franÃ§ais)
    const languageButton = page.locator('button:has-text("ðŸ‡«ðŸ‡·")').first();
    await expect(languageButton).toBeVisible();
    await languageButton.click();
    
    // Attendre que le dropdown soit visible
    await expect(page.locator('text=Choisir la langue')).toBeVisible();
    
    // SÃ©lectionner l'anglais spÃ©cifiquement (premier anglais GB)
    const englishButton = page.getByRole('button', { name: /ðŸ‡¬ðŸ‡§.*English.*English$/i });
    await expect(englishButton).toBeVisible();
    await englishButton.click();
    
    // VÃ©rifier que l'interface a changÃ© en anglais
    await expect(page.getByText('ðŸš€ Start Game')).toBeVisible();
    await expect(page.getByText('Learn math while having fun!')).toBeVisible();
  });

  test('should select different difficulty levels', async ({ page }) => {
    // VÃ©rifier que les niveaux de difficultÃ© sont prÃ©sents
    for (let level = 1; level <= 5; level++) {
      const levelButton = page.locator(`button:has-text("${level}")`).first();
      await expect(levelButton).toBeVisible();
      
      // Cliquer sur le niveau
      await levelButton.click();
      
      // VÃ©rifier que le niveau est sÃ©lectionnÃ© (changement de style)
      await expect(levelButton).toHaveClass(/bg-white/);
    }
  });

  test('should select different math operations', async ({ page }) => {
    const operations = ['Addition', 'Soustraction', 'Multiplication', 'Division'];
    
    for (const operation of operations) {
      const operationButton = page.getByRole('button', { name: new RegExp(operation, 'i') });
      await expect(operationButton).toBeVisible();
      
      // Cliquer sur l'opÃ©ration
      await operationButton.click();
      
      // VÃ©rifier que l'opÃ©ration est sÃ©lectionnÃ©e
      await expect(operationButton).toHaveClass(/bg-white/);
    }
  });

  test('should navigate to settings', async ({ page }) => {
    // Cliquer sur le bouton paramÃ¨tres
    const settingsButton = page.getByRole('button', { name: /ParamÃ¨tres/i });
    await expect(settingsButton).toBeVisible();
    await settingsButton.click();
    
    // VÃ©rifier qu'on arrive sur l'Ã©cran des paramÃ¨tres
    await expect(page.locator('h2:has-text("ParamÃ¨tres")')).toBeVisible();
    await expect(page.locator('text=Langue')).toBeVisible();
    await expect(page.locator('text=Son')).toBeVisible();
  });

  test('should toggle sound settings', async ({ page }) => {
    // Aller aux paramÃ¨tres
    const settingsButton = page.getByRole('button', { name: /ParamÃ¨tres/i });
    await settingsButton.click();
    
    // Attendre que l'Ã©cran des paramÃ¨tres se charge
    await expect(page.locator('h2:has-text("ParamÃ¨tres")')).toBeVisible();
    
    // Trouver et cliquer sur le bouton son
    const soundButton = page.locator('button:has-text("ðŸ”Š ON"), button:has-text("ðŸ”‡ OFF")').first();
    await expect(soundButton).toBeVisible();
    
    // VÃ©rifier l'Ã©tat initial
    const initialText = await soundButton.textContent();
    
    // Cliquer pour changer l'Ã©tat
    await soundButton.click();
    
    // VÃ©rifier que l'Ã©tat a changÃ©
    const newText = await soundButton.textContent();
    expect(newText).not.toBe(initialText);
  });

  test('should display language dropdown with multiple languages', async ({ page }) => {
    // Ouvrir le sÃ©lecteur de langue
    const languageButton = page.locator('button:has-text("ðŸ‡«ðŸ‡·")').first();
    await languageButton.click();
    
    // VÃ©rifier que le dropdown contient plusieurs langues
    await expect(page.locator('text=Europe')).toBeVisible();
    await expect(page.locator('text=Asia')).toBeVisible();
    await expect(page.locator('text=Americas')).toBeVisible();
    
    // VÃ©rifier quelques langues spÃ©cifiques
    await expect(page.locator('button:has-text("ðŸ‡©ðŸ‡ª")')).toBeVisible(); // Allemand
    await expect(page.locator('button:has-text("ðŸ‡ªðŸ‡¸")')).toBeVisible(); // Espagnol
    await expect(page.locator('button:has-text("ðŸ‡¨ðŸ‡³")')).toBeVisible(); // Chinois
  });

  test('should be responsive on mobile', async ({ page }) => {
    // Simuler un Ã©cran mobile
    await page.setViewportSize({ width: 375, height: 667 });
    
    // VÃ©rifier que les Ã©lÃ©ments principaux sont toujours visibles
    await expect(page.locator('h1:has-text("Math4Kids")')).toBeVisible();
    await expect(page.getByRole('button', { name: /ðŸš€.*Commencer le jeu/i })).toBeVisible();
    
    // VÃ©rifier que le sÃ©lecteur de langue est adaptÃ© au mobile
    const languageButton = page.locator('button:has-text("ðŸ‡«ðŸ‡·")').first();
    await expect(languageButton).toBeVisible();
  });

  test('should start a complete game flow', async ({ page }) => {
    // SÃ©lectionner niveau 1 (dÃ©butant)
    const level1Button = page.locator('button:has-text("1")').first();
    await level1Button.click();
    
    // SÃ©lectionner addition
    const additionButton = page.getByRole('button', { name: /Addition/i });
    await additionButton.click();
    
    // Commencer le jeu
    const startButton = page.getByRole('button', { name: /ðŸš€.*Commencer le jeu/i });
    await startButton.click();
    
    // VÃ©rifier qu'on arrive sur l'Ã©cran de jeu
    await expect(page.locator('text=Level 1')).toBeVisible();
    await expect(page.locator('input[placeholder="RÃ©ponse"]')).toBeVisible();
    
    // VÃ©rifier qu'une question mathÃ©matique est affichÃ©e
    await expect(page.locator('text= + ')).toBeVisible();
    await expect(page.locator('text= = ?')).toBeVisible();
  });

  test('should maintain app state across navigation', async ({ page }) => {
    // Changer la langue
    const languageButton = page.locator('button:has-text("ðŸ‡«ðŸ‡·")').first();
    await languageButton.click();
    
    const englishButton = page.getByRole('button', { name: /ðŸ‡¬ðŸ‡§.*English.*English$/i });
    await englishButton.click();
    
    // Aller aux paramÃ¨tres
    const settingsButton = page.getByRole('button', { name: /Settings/i });
    await settingsButton.click();
    
    // Retourner Ã  l'accueil
    const homeButton = page.locator('button:has([data-lucide="home"])').first();
    await homeButton.click();
    
    // VÃ©rifier que la langue anglaise est conservÃ©e
    await expect(page.getByText('ðŸš€ Start Game')).toBeVisible();
    await expect(page.getByText('Learn math while having fun!')).toBeVisible();
  });
});