import { test, expect } from '@playwright/test'

test.describe('üß™ Tests de base Math4Child', () => {
  
  test('Page d\'accueil se charge correctement', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // V√©rifier que la page charge
    await expect(page.locator('body')).toBeVisible()
    
    // V√©rifier le titre
    const title = await page.title()
    expect(title).toBeTruthy()
    
    console.log(`‚úÖ Page charg√©e - Titre: ${title}`)
  })

  test('S√©lecteur de langue fonctionnel', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // Chercher le s√©lecteur de langue
    const languageSelector = page.locator('[data-testid="language-selector"]')
      .or(page.locator('button').filter({ hasText: /fran√ßais|english|ÿßŸÑÿπÿ±ÿ®Ÿäÿ©/i }))
      .first()
    
    if (await languageSelector.isVisible()) {
      await languageSelector.click()
      
      // V√©rifier que le dropdown s'ouvre
      const dropdown = page.locator('[data-testid="language-dropdown"]')
        .or(page.locator('.absolute').filter({ hasText: /fran√ßais|english|ÿßŸÑÿπÿ±ÿ®Ÿäÿ©/i }))
        .first()
      
      await expect(dropdown).toBeVisible({ timeout: 5000 })
      console.log('‚úÖ S√©lecteur de langue fonctionnel')
      
      // Test sp√©cifique des langues arabes ajout√©es
      const palestineOption = page.locator('text=üáµüá∏').or(page.locator('text=Palestine'))
      const moroccoOption = page.locator('text=üá≤üá¶').or(page.locator('text=Maroc'))
      
      if (await palestineOption.isVisible()) {
        console.log('‚úÖ Palestine üáµüá∏ trouv√©e dans le s√©lecteur')
      }
      
      if (await moroccoOption.isVisible()) {
        console.log('‚úÖ Maroc üá≤üá¶ trouv√© dans le s√©lecteur')
      }
      
    } else {
      console.log('‚ö†Ô∏è S√©lecteur de langue non trouv√© - design diff√©rent')
    }
  })

  test('Contenu de base pr√©sent', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // V√©rifier qu'il y a du contenu textuel
    const bodyText = await page.textContent('body')
    expect(bodyText).toBeTruthy()
    expect(bodyText!.length).toBeGreaterThan(50)
    
    // Chercher des √©l√©ments typiques d'une app √©ducative
    const hasEducationalContent = bodyText!.includes('math') || 
                                  bodyText!.includes('Math') ||
                                  bodyText!.includes('math√©matiques') ||
                                  bodyText!.includes('√©ducatif') ||
                                  bodyText!.includes('enfant')
    
    expect(hasEducationalContent).toBe(true)
    console.log('‚úÖ Contenu √©ducatif d√©tect√©')
  })
})
