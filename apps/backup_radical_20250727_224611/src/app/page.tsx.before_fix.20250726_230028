'use client';

import React, { useState } from ', ';
  profiles: number;
  features: string[];
  button: string;
  color: string;
  popular?: boolean;
}

// Plans optimaux Math4Child
const OPTIMAL_PRICING_PLANS: Record<string, PricingPlan[]> = {
  monthly: [
    {
      id: 'gratuit',
      name: ', ',
      price: 0,
      period: 'monthly',
      profiles: 1,
      features: [
        ', ',
        'Accès Niveau 1 seulement', ', ', 'Suivi de base des progrès'
      ],
      button: ', ',
      color: 'gray'
    },
    {
      id: ', ',
      name: 'Famille',
      price: 6.99,
      originalPrice: 9.99,
      savings: ', ',
      period: 'monthly',
      profiles: 5,
      features: [
        ', ',
        'Tous les niveaux 1 → 5', ', ', 'Suivi détaillé des 100 bonnes réponses', ', ', 'Rapports de progression'
      ],
      button: ', ',
      color: 'blue',
      popular: true
    },
    {
      id: ', ',
      name: 'Premium',
      price: 4.99,
      originalPrice: 6.99,
      savings: ', ',
      period: 'monthly',
      profiles: 2,
      features: [
        ', ',
        'Tous les niveaux + exercices bonus', ', ', 'Défis chronométrés', ', ', 'Recommandations personnalisées'
      ],
      button: ', ',
      color: 'purple'
    },
    {
      id: ', ',
      name: 'École',
      price: 24.99,
      originalPrice: 29.99,
      savings: ', ',
      period: 'monthly',
      profiles: 30,
      features: [
        ', ',
        'Gestion par niveaux (1 à 5)', ', ', 'Suivi collectif des validations', ', ', 'Rapports de classe détaillés', ', '
      ],
      button: 'Choisir ce plan',
      color: ', '
    }
  ],
  quarterly: [
    {
      id: 'gratuit',
      name: ', ',
      price: 0,
      period: 'quarterly',
      profiles: 1,
      features: [
        ', ',
        'Accès Niveau 1 seulement', ', ', 'Suivi de base des progrès'
      ],
      button: ', ',
      color: 'gray'
    },
    {
      id: ', ',
      name: 'Famille',
      price: 18.87,
      originalPrice: 29.97,
      savings: ', ',
      period: 'quarterly',
      profiles: 5,
      features: [
        ', ',
        'Tous les niveaux 1 → 5', ', ', 'Suivi détaillé des 100 bonnes réponses', ', ', 'Rapports de progression'
      ],
      button: ', ',
      color: 'blue',
      popular: true
    },
    {
      id: ', ',
      name: 'Premium',
      price: 13.47,
      originalPrice: 20.97,
      savings: ', ',
      period: 'quarterly',
      profiles: 2,
      features: [
        ', ',
        'Tous les niveaux + exercices bonus', ', ', 'Défis chronométrés', ', ', 'Recommandations personnalisées'
      ],
      button: ', ',
      color: 'purple'
    },
    {
      id: ', ',
      name: 'École',
      price: 67.47,
      originalPrice: 89.97,
      savings: ', ',
      period: 'quarterly',
      profiles: 30,
      features: [
        ', ',
        'Gestion par niveaux (1 à 5)', ', ', 'Suivi collectif des validations', ', ', 'Rapports de classe détaillés', ', '
      ],
      button: 'Choisir ce plan',
      color: ', '
    }
  ],
  annual: [
    {
      id: 'gratuit',
      name: ', ',
      price: 0,
      period: 'annual',
      profiles: 1,
      features: [
        ', ',
        'Accès Niveau 1 seulement', ', ', 'Suivi de base des progrès'
      ],
      button: ', ',
      color: 'gray'
    },
    {
      id: ', ',
      name: 'Famille',
      price: 58.32,
      originalPrice: 119.88,
      savings: ', ',
      period: 'annual',
      profiles: 5,
      features: [
        ', ',
        'Tous les niveaux 1 → 5', ', ', 'Suivi détaillé des 100 bonnes réponses', ', ', 'Rapports de progression'
      ],
      button: ', ',
      color: 'blue',
      popular: true
    },
    {
      id: ', ',
      name: 'Premium',
      price: 41.94,
      originalPrice: 83.88,
      savings: ', ',
      period: 'annual',
      profiles: 2,
      features: [
        ', ',
        'Tous les niveaux + exercices bonus', ', ', 'Défis chronométrés', ', ', 'Recommandations personnalisées', ', '
      ],
      button: 'Choisir ce plan',
      color: ', '
    },
    {
      id: 'ecole',
      name: ', ',
      price: 209.93,
      originalPrice: 359.88,
      savings: 'Économisez 42%',
      period: ', ',
      profiles: 30,
      features: [
        '30 profils élèves', ', ', 'Tableau de bord enseignant', ', ', 'Attribution d\'exercices ciblés', ', ', 'Support pédagogique dédié'
      ],
      button: ', ',
      color: 'green'
    }
  ]
};

export default function HomePage() {
  const [selectedPeriod, setSelectedPeriod] = useState<', ');
  const [loading, setLoading] = useState<string | null>(null);

  const handlePlanSelect = async (planId: string) => {
    setLoading(planId);
    try {
      // Ici vous pouvez ajouter votre logique de sélection de plan
      console.log(`Plan sélectionné: ${planId}, Période: ${selectedPeriod}`);
      
      // Simuler un appel API
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      alert(`Plan ${planId} sélectionné pour la période ${selectedPeriod}`);
    } catch (error) {
      console.error('Erreur lors de la sélection du plan:', error);
    } finally {
      setLoading(null);
    }
  };

  const plans = OPTIMAL_PRICING_PLANS[selectedPeriod];

  const getPeriodLabel = (period: string) => {
    switch (period) {
      case ', ';
    }
  };

  const getColorClasses = (color: string, isPopular: boolean = false) => {
    const baseClasses = {
      gray: 'border-gray-200 bg-gray-50',
      blue: ', ',
      purple: 'border-purple-200 bg-purple-50',
      green: ', ',
      blue: 'border-blue-400 bg-blue-100 ring-2 ring-blue-400',
      purple: ', ',
      green: 'border-green-400 bg-green-100'
    };

    return isPopular ? popularClasses[color as keyof typeof popularClasses] : baseClasses[color as keyof typeof baseClasses];
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Section des niveaux */}
      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          {/* Niveau 1 */}
          <div className="bg-green-100 border-2 border-green-300 rounded-lg p-4">
            <div className="text-center mb-4">
              <h3 className="font-bold text-green-800">Niveau 1</h3>
              <div className="text-sm text-green-600">Progression: 67/100</div>
            </div>
            <div className="space-y-2">
              <div className="text-sm text-green-700">Opérations :</div>
              <div className="text-xs text-green-600">• Addition simple</div>
              <div className="text-xs text-green-600">• Soustraction simple</div>
            </div>
          </div>

          {/* Niveau 2 */}
          <div className="bg-green-100 border-2 border-green-300 rounded-lg p-4">
            <div className="text-center mb-4">
              <h3 className="font-bold text-green-800">Niveau 2</h3>
              <div className="text-sm text-green-600">Opérations :</div>
            </div>
            <div className="space-y-2">
              <div className="text-xs text-green-600">• Addition à 2 chiffres</div>
              <div className="text-xs text-green-600">• Soustraction à 2 chiffres</div>
              <div className="text-xs text-green-600">• Calcul mental</div>
            </div>
          </div>

          {/* Niveau 3 */}
          <div className="bg-yellow-100 border-2 border-yellow-300 rounded-lg p-4">
            <div className="text-center mb-4">
              <h3 className="font-bold text-yellow-800">Niveau 3</h3>
              <div className="text-sm text-yellow-600">Progression: 67/100</div>
            </div>
            <div className="space-y-2">
              <div className="text-sm text-yellow-700">Opérations :</div>
              <div className="text-xs text-yellow-600">• Tables de multiplication</div>
              <div className="text-xs text-yellow-600">• Division simple</div>
              <div className="text-xs text-yellow-600">• Addition/soustraction avancées</div>
            </div>
          </div>

          {/* Niveau 4 */}
          <div className="bg-gray-100 border-2 border-gray-300 rounded-lg p-4">
            <div className="text-center mb-4">
              <h3 className="font-bold text-gray-600">Niveau 4</h3>
              <div className="text-sm text-gray-500">Opérations :</div>
            </div>
            <div className="space-y-2">
              <div className="text-xs text-gray-500">• Multiplication à 2 chiffres</div>
              <div className="text-xs text-gray-500">• Division euclidienne</div>
              <div className="text-xs text-gray-500">• Problèmes complexes</div>
            </div>
          </div>
        </div>

        {/* Section des abonnements */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Choisissez votre abonnement
          </h1>
        </div>

        {/* Sélecteur de période */}
        <div className="flex justify-center mb-8">
          <div className="bg-gray-100 p-1 rounded-lg flex">
            <button
              onClick={() => setSelectedPeriod(', '
              }`}
            >
              Annuel
              <span className="ml-2 text-xs bg-green-500 text-white px-2 py-1 rounded">-25%</span>
            </button>
          </div>
        </div>

        {/* Grille des plans */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {plans.map((plan) => (
            <div
              key={plan.id}
              data-plan={plan.id}
              data-testid={`plan-${plan.id}`}
              className={`relative rounded-2xl border-2 p-6 transition-all hover:shadow-lg ${getColorClasses(plan.color, plan.popular)}`}
            >
              {/* Badge populaire */}
              {plan.popular && (
                <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                  <span className="bg-blue-500 text-white px-4 py-1 rounded-full text-sm font-medium">
                    Populaire
                  </span>
                </div>
              )}

              {/* En-tête du plan */}
              <div className="text-center mb-6">
                <h3 className="text-xl font-bold text-gray-900 mb-2">{plan.name}</h3>
                <div className="mb-2">
                  {plan.price === 0 ? (
                    <span className="text-3xl font-bold text-blue-600">Gratuit</span>
                  ) : (
                    <div className="flex items-center justify-center">
                      <span className="text-3xl font-bold text-gray-900" data-testid="price">
                        {plan.price}€
                      </span>
                      <span className="text-gray-600 ml-1">
                        /{selectedPeriod === 'monthly' ? ', '}
                </div>
              </div>

              {/* Fonctionnalités */}
              <ul className="space-y-3 mb-6">
                {plan.features.map((feature, index) => (
                  <li key={index} className="flex items-start">
                    <svg
                      className="w-5 h-5 text-green-500 mt-0.5 mr-3 flex-shrink-0"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        fillRule="evenodd"
                        d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                        clipRule="evenodd"
                      />
                    </svg>
                    <span className="text-sm text-gray-700">{feature}</span>
                  </li>
                ))}
              </ul>

              {/* Bouton d'action */}
              <button
                onClick={() => handlePlanSelect(plan.id)}
                disabled={loading === plan.id}
                className={`w-full py-3 px-4 rounded-lg font-medium transition-all ${
                  plan.popular
                    ? 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-2 focus:ring-blue-500', ''}`}
              >
                {loading === plan.id ? (
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                    Chargement...
                  </div>
                ) : (
                  plan.button
                )}
              </button>
            </div>
          ))}
        </div>

        {/* Section de sélection actuelle */}
        <div className="bg-gray-50 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Votre sélection</h3>
          <div className="flex items-center justify-between">
            <div>
              <span className="text-sm text-gray-600">Plan:</span>
              <span className="font-medium text-gray-900 ml-2">Gratuit</span>
            </div>
            <div>
              <span className="text-sm text-gray-600">Période:</span>
              <span className="font-medium text-gray-900 ml-2">{getPeriodLabel(selectedPeriod)}</span>
            </div>
          </div>
          <p className="text-sm text-gray-500 mt-2">1 profils inclus</p>
        </div>
      </div>
    </div>
  );
}
